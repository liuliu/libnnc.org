{
  "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 114014,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q4pEncode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 109
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q4pEncode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 3148,
        "key.line" : 9,
        "key.modulename" : "main",
        "key.name" : "q4pEncode",
        "key.namelength" : 9,
        "key.nameoffset" : 121,
        "key.offset" : 117,
        "key.parsed_declaration" : "private let q4pEncode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize, identifier\n    in\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    guard let data = data, let dimensions = dimensions, var encoded = encoded,\n      let encodedSize = encodedSize, dimensionCount > 0\n    else { return 0 }\n    var elementSize: Int\n    switch dataType {\n    case Int32(CCV_64F):\n      elementSize = MemoryLayout<Double>.size\n    case Int32(CCV_32F):\n      elementSize = MemoryLayout<Float>.size\n    case Int32(CCV_16F):\n      elementSize = MemoryLayout<UInt16>.size\n    default:\n      return 0\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    let numberOfBlocks = (numberOfElements + 1023) \/ 1024\n    guard\n      (numberOfElements + 1) \/ 2 + numberOfBlocks * 16 * elementSize + MemoryLayout<UInt32>.size\n        < encodedSize[0]\n    else { return 0 }\n    encoded.storeBytes(of: UInt32(1024), as: UInt32.self)\n    encoded += MemoryLayout<UInt32>.size\n    DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n      let indices = UnsafeMutablePointer<Int32>.allocate(capacity: min(1024, numberOfElements))\n      let centroids = UnsafeMutablePointer<Double>.allocate(capacity: 16)\n      let nI = min(1024, numberOfElements - blockIdx * 1024)\n      var input = ccv_dense_matrix(\n        1, Int32(nI), dataType | Int32(CCV_C1),\n        UnsafeMutableRawPointer(mutating: data + 1024 * blockIdx * elementSize), 0)\n      ccv_kmeans1d(&input, 16, indices, centroids)\n      let encodedBlock = encoded + (16 * elementSize + 512) * blockIdx\n      switch dataType {\n      case Int32(CCV_64F):\n        \/\/ Write centroids directly to the output.\n        memcpy(encodedBlock, centroids, elementSize * 16)\n      case Int32(CCV_32F):\n        let f32 = encodedBlock.assumingMemoryBound(to: Float32.self)\n        for i in 0..<16 {\n          f32[i] = Float(centroids[i])\n        }\n      case Int32(CCV_16F):\n        let f32 = UnsafeMutableRawPointer(centroids).assumingMemoryBound(to: Float32.self)\n        for i in 0..<16 {\n          f32[i] = Float(centroids[i])\n        }\n        ccv_float_to_half_precision(f32, encodedBlock.assumingMemoryBound(to: UInt16.self), 16)\n      default:\n        return\n      }\n      let u8 = encodedBlock.assumingMemoryBound(to: UInt8.self) + 16 * elementSize\n      var j = 0\n      for i in stride(from: 0, to: nI, by: 2) {\n        let i0 = UInt8(indices[i])\n        let i1 = i + 1 < nI ? UInt8(indices[i + 1]) : 0\n        let u0 = (i0 << 4) | i1\n        u8[j] = u0\n        j += 1\n      }\n      centroids.deallocate()\n      indices.deallocate()\n    }\n    identifier?[0] = 0x8a1e4b\n    encodedSize[0] =\n      (numberOfElements + 1) \/ 2 + numberOfBlocks * 16 * elementSize + MemoryLayout<UInt32>.size\n    return 1\n  }",
        "key.parsed_scope.end" : 9,
        "key.parsed_scope.start" : 9,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main9q4pEncode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q4pDecode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 3267
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q4pDecode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 5497,
        "key.line" : 88,
        "key.modulename" : "main",
        "key.name" : "q4pDecode",
        "key.namelength" : 9,
        "key.nameoffset" : 3279,
        "key.offset" : 3275,
        "key.parsed_declaration" : "private let q4pDecode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard identifier == 0x8a1e4b else { return 0 }\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    if tensorOut!.pointee == nil {\n      tensorOut!.pointee = ccv_nnc_tensor_new(nil, params, 0)\n    }\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    guard var data = data, let dimensions = dimensions, let decoded = decoded ?? tensorData,\n      let decodedSize = decodedSize, dimensionCount > 0\n    else { return 0 }\n    let elementSize: Int\n    switch dataType {\n    case Int32(CCV_64F):\n      elementSize = MemoryLayout<Double>.size\n    case Int32(CCV_32F):\n      elementSize = MemoryLayout<Float>.size\n    case Int32(CCV_16F):\n      elementSize = MemoryLayout<UInt16>.size\n    default:\n      return 0\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    numberOfElements = min(decodedSize[0] \/ elementSize, numberOfElements)\n    guard dataSize > MemoryLayout<UInt32>.size else { return 0 }\n    let blockSize = Int(data.load(as: UInt32.self))\n    data += MemoryLayout<UInt32>.size\n    let numberOfBlocks = (numberOfElements + blockSize - 1) \/ blockSize\n    guard\n      dataSize >= (numberOfElements + 1) \/ 2 + numberOfBlocks * 16 * elementSize\n        + MemoryLayout<UInt32>.size\n    else { return 0 }\n    precondition(blockSize % 2 == 0)\n    switch dataType {\n    case Int32(CCV_64F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (16 * elementSize + blockSize \/ 2) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: Double.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 16\n        let f64 = decodedBlock.assumingMemoryBound(to: Double.self)\n        var j = 0\n        if nI % 2 == 0 {\n          for i in stride(from: 0, to: nI, by: 2) {\n            let u0 = u8[j]\n            let i0 = Int(u0 >> 4)\n            let i1 = Int(u0 & 15)\n            f64[i] = palette[i0]\n            f64[i + 1] = palette[i1]\n            j += 1\n          }\n        } else {\n          for i in stride(from: 0, to: nI, by: 2) {\n            let u0 = u8[j]\n            let i0 = Int(u0 >> 4)\n            let i1 = Int(u0 & 15)\n            f64[i] = palette[i0]\n            if i + 1 < nI {\n              f64[i + 1] = palette[i1]\n            }\n            j += 1\n          }\n        }\n      }\n    case Int32(CCV_32F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (16 * elementSize + blockSize \/ 2) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: Float.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 16\n        let f32 = decodedBlock.assumingMemoryBound(to: Float.self)\n        var j = 0\n        if nI % 2 == 0 {\n          for i in stride(from: 0, to: nI, by: 2) {\n            let u0 = u8[j]\n            let i0 = Int(u0 >> 4)\n            let i1 = Int(u0 & 15)\n            f32[i] = palette[i0]\n            f32[i + 1] = palette[i1]\n            j += 1\n          }\n        } else {\n          for i in stride(from: 0, to: nI, by: 2) {\n            let u0 = u8[j]\n            let i0 = Int(u0 >> 4)\n            let i1 = Int(u0 & 15)\n            f32[i] = palette[i0]\n            if i + 1 < nI {\n              f32[i + 1] = palette[i1]\n            }\n            j += 1\n          }\n        }\n      }\n    case Int32(CCV_16F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (16 * elementSize + blockSize \/ 2) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: UInt16.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 16\n        let f16 = decodedBlock.assumingMemoryBound(to: UInt16.self)\n        var j = 0\n        if nI % 2 == 0 {\n          for i in stride(from: 0, to: nI, by: 2) {\n            let u0 = u8[j]\n            let i0 = Int(u0 >> 4)\n            let i1 = Int(u0 & 15)\n            f16[i] = palette[i0]\n            f16[i + 1] = palette[i1]\n            j += 1\n          }\n        } else {\n          for i in stride(from: 0, to: nI, by: 2) {\n            let u0 = u8[j]\n            let i0 = Int(u0 >> 4)\n            let i1 = Int(u0 & 15)\n            f16[i] = palette[i0]\n            if i + 1 < nI {\n              f16[i + 1] = palette[i1]\n            }\n            j += 1\n          }\n        }\n      }\n    default:\n      return 0\n    }\n    decodedSize[0] = elementSize * numberOfElements\n    return 1\n  }",
        "key.parsed_scope.end" : 88,
        "key.parsed_scope.start" : 88,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main9q4pDecode33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q5pEncode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 8796
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q5pEncode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 3765,
        "key.line" : 234,
        "key.modulename" : "main",
        "key.name" : "q5pEncode",
        "key.namelength" : 9,
        "key.nameoffset" : 8808,
        "key.offset" : 8804,
        "key.parsed_declaration" : "private let q5pEncode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize, identifier\n    in\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    guard let data = data, let dimensions = dimensions, var encoded = encoded,\n      let encodedSize = encodedSize, dimensionCount > 0\n    else { return 0 }\n    var elementSize: Int\n    switch dataType {\n    case Int32(CCV_64F):\n      elementSize = MemoryLayout<Double>.size\n    case Int32(CCV_32F):\n      elementSize = MemoryLayout<Float>.size\n    case Int32(CCV_16F):\n      elementSize = MemoryLayout<UInt16>.size\n    default:\n      return 0\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    let numberOfBlocks = (numberOfElements + 2047) \/ 2048\n    guard\n      (numberOfElements + 7) \/ 8 * 5 + numberOfBlocks * 32 * elementSize + MemoryLayout<UInt32>.size\n        < encodedSize[0]\n    else { return 0 }\n    encoded.storeBytes(of: UInt32(2048), as: UInt32.self)\n    encoded += MemoryLayout<UInt32>.size\n    DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n      let indices = UnsafeMutablePointer<Int32>.allocate(capacity: min(2048, numberOfElements))\n      let centroids = UnsafeMutablePointer<Double>.allocate(capacity: 32)\n      let nI = min(2048, numberOfElements - blockIdx * 2048)\n      var input = ccv_dense_matrix(\n        1, Int32(nI), dataType | Int32(CCV_C1),\n        UnsafeMutableRawPointer(mutating: data + blockIdx * 2048 * elementSize), 0)\n      ccv_kmeans1d(&input, 32, indices, centroids)\n      let encodedBlock = encoded + (32 * elementSize + 1280) * blockIdx\n      switch dataType {\n      case Int32(CCV_64F):\n        \/\/ Write centroids directly to the output.\n        memcpy(encodedBlock, centroids, elementSize * 32)\n      case Int32(CCV_32F):\n        let f32 = encodedBlock.assumingMemoryBound(to: Float32.self)\n        for i in 0..<32 {\n          f32[i] = Float(centroids[i])\n        }\n      case Int32(CCV_16F):\n        let f32 = UnsafeMutableRawPointer(centroids).assumingMemoryBound(to: Float32.self)\n        for i in 0..<32 {\n          f32[i] = Float(centroids[i])\n        }\n        ccv_float_to_half_precision(f32, encodedBlock.assumingMemoryBound(to: UInt16.self), 32)\n      default:\n        return\n      }\n      let u8 = encodedBlock.assumingMemoryBound(to: UInt8.self) + 32 * elementSize\n      var j = 0\n      for i in stride(from: 0, to: nI, by: 8) {\n        let i0 = UInt8(indices[i])\n        let i1 = i + 1 < nI ? UInt8(indices[i + 1]) : 0\n        let i2 = i + 2 < nI ? UInt8(indices[i + 2]) : 0\n        let i3 = i + 3 < nI ? UInt8(indices[i + 3]) : 0\n        let i4 = i + 4 < nI ? UInt8(indices[i + 4]) : 0\n        let i5 = i + 5 < nI ? UInt8(indices[i + 5]) : 0\n        let i6 = i + 6 < nI ? UInt8(indices[i + 6]) : 0\n        let i7 = i + 7 < nI ? UInt8(indices[i + 7]) : 0\n        let u0 = (i0 << 3) | (i1 >> 2)\n        let u1 = (i1 << 6) | (i2 << 1) | (i3 >> 4)\n        let u2 = (i3 << 4) | (i4 >> 1)\n        let u3 = (i4 << 7) | (i5 << 2) | (i6 >> 3)\n        let u4 = (i6 << 5) | i7\n        u8[j] = u0\n        u8[j + 1] = u1\n        u8[j + 2] = u2\n        u8[j + 3] = u3\n        u8[j + 4] = u4\n        j += 5\n      }\n      centroids.deallocate()\n      indices.deallocate()\n    }\n    identifier?[0] = 0x8a1e5b\n    encodedSize[0] =\n      (numberOfElements + 7) \/ 8 * 5 + numberOfBlocks * 32 * elementSize + MemoryLayout<UInt32>.size\n    return 1\n  }",
        "key.parsed_scope.end" : 234,
        "key.parsed_scope.start" : 234,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main9q5pEncode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q5pDecode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 12571
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q5pDecode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 10175,
        "key.line" : 327,
        "key.modulename" : "main",
        "key.name" : "q5pDecode",
        "key.namelength" : 9,
        "key.nameoffset" : 12583,
        "key.offset" : 12579,
        "key.parsed_declaration" : "private let q5pDecode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard identifier == 0x8a1e5b else { return 0 }\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    if tensorOut!.pointee == nil {\n      tensorOut!.pointee = ccv_nnc_tensor_new(nil, params, 0)\n    }\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    guard var data = data, let dimensions = dimensions, let decoded = decoded ?? tensorData,\n      let decodedSize = decodedSize, dimensionCount > 0\n    else { return 0 }\n    let elementSize: Int\n    switch dataType {\n    case Int32(CCV_64F):\n      elementSize = MemoryLayout<Double>.size\n    case Int32(CCV_32F):\n      elementSize = MemoryLayout<Float>.size\n    case Int32(CCV_16F):\n      elementSize = MemoryLayout<UInt16>.size\n    default:\n      return 0\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    numberOfElements = min(decodedSize[0] \/ elementSize, numberOfElements)\n    guard dataSize > MemoryLayout<UInt32>.size else { return 0 }\n    let blockSize = Int(data.load(as: UInt32.self))\n    data += MemoryLayout<UInt32>.size\n    let numberOfBlocks = (numberOfElements + blockSize - 1) \/ blockSize\n    guard\n      dataSize >= (numberOfElements + 7) \/ 8 * 5 + numberOfBlocks * 32 * elementSize\n        + MemoryLayout<UInt32>.size\n    else { return 0 }\n    precondition(blockSize % 8 == 0)\n    switch dataType {\n    case Int32(CCV_64F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (32 * elementSize + blockSize \/ 8 * 5) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: Double.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 32\n        let f64 = decodedBlock.assumingMemoryBound(to: Double.self)\n        var j = 0\n        if nI % 8 == 0 {\n          for i in stride(from: 0, to: nI, by: 8) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let u3 = u8[j + 3]\n            let u4 = u8[j + 4]\n            let i0 = Int(u0 >> 3)\n            let i1 = Int(((u0 & 7) << 2) | (u1 >> 6))\n            let i2 = Int((u1 >> 1) & 31)\n            let i3 = Int(((u1 & 1) << 4) | (u2 >> 4))\n            let i4 = Int(((u2 & 15) << 1) | (u3 >> 7))\n            let i5 = Int((u3 >> 2) & 31)\n            let i6 = Int(((u3 & 3) << 3) | (u4 >> 5))\n            let i7 = Int(u4 & 31)\n            f64[i] = palette[i0]\n            f64[i + 1] = palette[i1]\n            f64[i + 2] = palette[i2]\n            f64[i + 3] = palette[i3]\n            f64[i + 4] = palette[i4]\n            f64[i + 5] = palette[i5]\n            f64[i + 6] = palette[i6]\n            f64[i + 7] = palette[i7]\n            j += 5\n          }\n        } else {\n          for i in stride(from: 0, to: nI, by: 8) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let u3 = u8[j + 3]\n            let u4 = u8[j + 4]\n            let i0 = Int(u0 >> 3)\n            let i1 = Int(((u0 & 7) << 2) | (u1 >> 6))\n            let i2 = Int((u1 >> 1) & 31)\n            let i3 = Int(((u1 & 1) << 4) | (u2 >> 4))\n            let i4 = Int(((u2 & 15) << 1) | (u3 >> 7))\n            let i5 = Int((u3 >> 2) & 31)\n            let i6 = Int(((u3 & 3) << 3) | (u4 >> 5))\n            let i7 = Int(u4 & 31)\n            f64[i] = palette[i0]\n            if i + 1 < nI {\n              f64[i + 1] = palette[i1]\n            }\n            if i + 2 < nI {\n              f64[i + 2] = palette[i2]\n            }\n            if i + 3 < nI {\n              f64[i + 3] = palette[i3]\n            }\n            if i + 4 < nI {\n              f64[i + 4] = palette[i4]\n            }\n            if i + 5 < nI {\n              f64[i + 5] = palette[i5]\n            }\n            if i + 6 < nI {\n              f64[i + 6] = palette[i6]\n            }\n            if i + 7 < nI {\n              f64[i + 7] = palette[i7]\n            }\n            j += 5\n          }\n        }\n      }\n    case Int32(CCV_32F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (32 * elementSize + blockSize \/ 8 * 5) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: Float.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 32\n        let f32 = decodedBlock.assumingMemoryBound(to: Float.self)\n        var j = 0\n        if nI % 8 == 0 {\n          for i in stride(from: 0, to: nI, by: 8) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let u3 = u8[j + 3]\n            let u4 = u8[j + 4]\n            let i0 = Int(u0 >> 3)\n            let i1 = Int(((u0 & 7) << 2) | (u1 >> 6))\n            let i2 = Int((u1 >> 1) & 31)\n            let i3 = Int(((u1 & 1) << 4) | (u2 >> 4))\n            let i4 = Int(((u2 & 15) << 1) | (u3 >> 7))\n            let i5 = Int((u3 >> 2) & 31)\n            let i6 = Int(((u3 & 3) << 3) | (u4 >> 5))\n            let i7 = Int(u4 & 31)\n            f32[i] = palette[i0]\n            f32[i + 1] = palette[i1]\n            f32[i + 2] = palette[i2]\n            f32[i + 3] = palette[i3]\n            f32[i + 4] = palette[i4]\n            f32[i + 5] = palette[i5]\n            f32[i + 6] = palette[i6]\n            f32[i + 7] = palette[i7]\n            j += 5\n          }\n        } else {\n          for i in stride(from: 0, to: nI, by: 8) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let u3 = u8[j + 3]\n            let u4 = u8[j + 4]\n            let i0 = Int(u0 >> 3)\n            let i1 = Int(((u0 & 7) << 2) | (u1 >> 6))\n            let i2 = Int((u1 >> 1) & 31)\n            let i3 = Int(((u1 & 1) << 4) | (u2 >> 4))\n            let i4 = Int(((u2 & 15) << 1) | (u3 >> 7))\n            let i5 = Int((u3 >> 2) & 31)\n            let i6 = Int(((u3 & 3) << 3) | (u4 >> 5))\n            let i7 = Int(u4 & 31)\n            f32[i] = palette[i0]\n            if i + 1 < nI {\n              f32[i + 1] = palette[i1]\n            }\n            if i + 2 < nI {\n              f32[i + 2] = palette[i2]\n            }\n            if i + 3 < nI {\n              f32[i + 3] = palette[i3]\n            }\n            if i + 4 < nI {\n              f32[i + 4] = palette[i4]\n            }\n            if i + 5 < nI {\n              f32[i + 5] = palette[i5]\n            }\n            if i + 6 < nI {\n              f32[i + 6] = palette[i6]\n            }\n            if i + 7 < nI {\n              f32[i + 7] = palette[i7]\n            }\n            j += 5\n          }\n        }\n      }\n    case Int32(CCV_16F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (32 * elementSize + blockSize \/ 8 * 5) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: UInt16.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 32\n        let f16 = decodedBlock.assumingMemoryBound(to: UInt16.self)\n        var j = 0\n        if nI % 8 == 0 {\n          for i in stride(from: 0, to: nI, by: 8) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let u3 = u8[j + 3]\n            let u4 = u8[j + 4]\n            let i0 = Int(u0 >> 3)\n            let i1 = Int(((u0 & 7) << 2) | (u1 >> 6))\n            let i2 = Int((u1 >> 1) & 31)\n            let i3 = Int(((u1 & 1) << 4) | (u2 >> 4))\n            let i4 = Int(((u2 & 15) << 1) | (u3 >> 7))\n            let i5 = Int((u3 >> 2) & 31)\n            let i6 = Int(((u3 & 3) << 3) | (u4 >> 5))\n            let i7 = Int(u4 & 31)\n            f16[i] = palette[i0]\n            f16[i + 1] = palette[i1]\n            f16[i + 2] = palette[i2]\n            f16[i + 3] = palette[i3]\n            f16[i + 4] = palette[i4]\n            f16[i + 5] = palette[i5]\n            f16[i + 6] = palette[i6]\n            f16[i + 7] = palette[i7]\n            j += 5\n          }\n        } else {\n          for i in stride(from: 0, to: nI, by: 8) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let u3 = u8[j + 3]\n            let u4 = u8[j + 4]\n            let i0 = Int(u0 >> 3)\n            let i1 = Int(((u0 & 7) << 2) | (u1 >> 6))\n            let i2 = Int((u1 >> 1) & 31)\n            let i3 = Int(((u1 & 1) << 4) | (u2 >> 4))\n            let i4 = Int(((u2 & 15) << 1) | (u3 >> 7))\n            let i5 = Int((u3 >> 2) & 31)\n            let i6 = Int(((u3 & 3) << 3) | (u4 >> 5))\n            let i7 = Int(u4 & 31)\n            f16[i] = palette[i0]\n            if i + 1 < nI {\n              f16[i + 1] = palette[i1]\n            }\n            if i + 2 < nI {\n              f16[i + 2] = palette[i2]\n            }\n            if i + 3 < nI {\n              f16[i + 3] = palette[i3]\n            }\n            if i + 4 < nI {\n              f16[i + 4] = palette[i4]\n            }\n            if i + 5 < nI {\n              f16[i + 5] = palette[i5]\n            }\n            if i + 6 < nI {\n              f16[i + 6] = palette[i6]\n            }\n            if i + 7 < nI {\n              f16[i + 7] = palette[i7]\n            }\n            j += 5\n          }\n        }\n      }\n    default:\n      return 0\n    }\n    decodedSize[0] = elementSize * numberOfElements\n    return 1\n  }",
        "key.parsed_scope.end" : 327,
        "key.parsed_scope.start" : 327,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main9q5pDecode33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q6pEncode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 22778
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q6pEncode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 3393,
        "key.line" : 605,
        "key.modulename" : "main",
        "key.name" : "q6pEncode",
        "key.namelength" : 9,
        "key.nameoffset" : 22790,
        "key.offset" : 22786,
        "key.parsed_declaration" : "private let q6pEncode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize, identifier\n    in\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    guard let data = data, let dimensions = dimensions, var encoded = encoded,\n      let encodedSize = encodedSize, dimensionCount > 0\n    else { return 0 }\n    var elementSize: Int\n    switch dataType {\n    case Int32(CCV_64F):\n      elementSize = MemoryLayout<Double>.size\n    case Int32(CCV_32F):\n      elementSize = MemoryLayout<Float>.size\n    case Int32(CCV_16F):\n      elementSize = MemoryLayout<UInt16>.size\n    default:\n      return 0\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    let numberOfBlocks = (numberOfElements + 4095) \/ 4096\n    guard\n      (numberOfElements + 3) \/ 4 * 3 + numberOfBlocks * 64 * elementSize + MemoryLayout<UInt32>.size\n        < encodedSize[0]\n    else { return 0 }\n    encoded.storeBytes(of: UInt32(4096), as: UInt32.self)\n    encoded += MemoryLayout<UInt32>.size\n    DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n      let indices = UnsafeMutablePointer<Int32>.allocate(capacity: min(4096, numberOfElements))\n      let centroids = UnsafeMutablePointer<Double>.allocate(capacity: 64)\n      let nI = min(4096, numberOfElements - blockIdx * 4096)\n      var input = ccv_dense_matrix(\n        1, Int32(nI), dataType | Int32(CCV_C1),\n        UnsafeMutableRawPointer(mutating: data + 4096 * elementSize * blockIdx), 0)\n      ccv_kmeans1d(&input, 64, indices, centroids)\n      let encodedBlock = encoded + (64 * elementSize + 3072) * blockIdx\n      switch dataType {\n      case Int32(CCV_64F):\n        \/\/ Write centroids directly to the output.\n        memcpy(encodedBlock, centroids, elementSize * 64)\n      case Int32(CCV_32F):\n        let f32 = encodedBlock.assumingMemoryBound(to: Float32.self)\n        for i in 0..<64 {\n          f32[i] = Float(centroids[i])\n        }\n      case Int32(CCV_16F):\n        let f32 = UnsafeMutableRawPointer(centroids).assumingMemoryBound(to: Float32.self)\n        for i in 0..<64 {\n          f32[i] = Float(centroids[i])\n        }\n        ccv_float_to_half_precision(f32, encodedBlock.assumingMemoryBound(to: UInt16.self), 64)\n      default:\n        return\n      }\n      let u8 = encodedBlock.assumingMemoryBound(to: UInt8.self) + 64 * elementSize\n      var j = 0\n      for i in stride(from: 0, to: nI, by: 4) {\n        let i0 = UInt8(indices[i])\n        let i1 = i + 1 < nI ? UInt8(indices[i + 1]) : 0\n        let i2 = i + 2 < nI ? UInt8(indices[i + 2]) : 0\n        let i3 = i + 3 < nI ? UInt8(indices[i + 3]) : 0\n        let u0 = (i0 << 2) | (i1 >> 4)\n        let u1 = (i1 << 4) | (i2 >> 2)\n        let u2 = (i2 << 6) | i3\n        u8[j] = u0\n        u8[j + 1] = u1\n        u8[j + 2] = u2\n        j += 3\n      }\n      centroids.deallocate()\n      indices.deallocate()\n    }\n    identifier?[0] = 0x8a1e6b\n    encodedSize[0] =\n      (numberOfElements + 3) \/ 4 * 3 + numberOfBlocks * 64 * elementSize + MemoryLayout<UInt32>.size\n    return 1\n  }",
        "key.parsed_scope.end" : 605,
        "key.parsed_scope.start" : 605,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main9q6pEncode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q6pDecode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 26181
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q6pDecode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 7247,
        "key.line" : 690,
        "key.modulename" : "main",
        "key.name" : "q6pDecode",
        "key.namelength" : 9,
        "key.nameoffset" : 26193,
        "key.offset" : 26189,
        "key.parsed_declaration" : "private let q6pDecode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard identifier == 0x8a1e6b else { return 0 }\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    if tensorOut!.pointee == nil {\n      tensorOut!.pointee = ccv_nnc_tensor_new(nil, params, 0)\n    }\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    guard var data = data, let dimensions = dimensions, let decoded = decoded ?? tensorData,\n      let decodedSize = decodedSize, dimensionCount > 0\n    else { return 0 }\n    let elementSize: Int\n    switch dataType {\n    case Int32(CCV_64F):\n      elementSize = MemoryLayout<Double>.size\n    case Int32(CCV_32F):\n      elementSize = MemoryLayout<Float>.size\n    case Int32(CCV_16F):\n      elementSize = MemoryLayout<UInt16>.size\n    default:\n      return 0\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    numberOfElements = min(decodedSize[0] \/ elementSize, numberOfElements)\n    guard dataSize > MemoryLayout<UInt32>.size else { return 0 }\n    let blockSize = Int(data.load(as: UInt32.self))\n    data += MemoryLayout<UInt32>.size\n    let numberOfBlocks = (numberOfElements + blockSize - 1) \/ blockSize\n    guard\n      dataSize >= (numberOfElements + 3) \/ 4 * 3 + numberOfBlocks * 64 * elementSize\n        + MemoryLayout<UInt32>.size\n    else { return 0 }\n    precondition(blockSize % 4 == 0)\n    switch dataType {\n    case Int32(CCV_64F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (64 * elementSize + blockSize \/ 4 * 3) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: Double.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 64\n        let f64 = decodedBlock.assumingMemoryBound(to: Double.self)\n        var j = 0\n        if nI % 4 == 0 {\n          for i in stride(from: 0, to: nI, by: 4) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let i0 = Int(u0 >> 2)\n            let i1 = Int(((u0 & 3) << 4) | (u1 >> 4))\n            let i2 = Int(((u1 & 15) << 2) | (u2 >> 6))\n            let i3 = Int(u2 & 63)\n            f64[i] = palette[i0]\n            f64[i + 1] = palette[i1]\n            f64[i + 2] = palette[i2]\n            f64[i + 3] = palette[i3]\n            j += 3\n          }\n        } else {\n          for i in stride(from: 0, to: nI, by: 4) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let i0 = Int(u0 >> 2)\n            let i1 = Int(((u0 & 3) << 4) | (u1 >> 4))\n            let i2 = Int(((u1 & 15) << 2) | (u2 >> 6))\n            let i3 = Int(u2 & 63)\n            f64[i] = palette[i0]\n            if i + 1 < nI {\n              f64[i + 1] = palette[i1]\n            }\n            if i + 2 < nI {\n              f64[i + 2] = palette[i2]\n            }\n            if i + 3 < nI {\n              f64[i + 3] = palette[i3]\n            }\n            j += 3\n          }\n        }\n      }\n    case Int32(CCV_32F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (64 * elementSize + blockSize \/ 4 * 3) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: Float.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 64\n        let f32 = decodedBlock.assumingMemoryBound(to: Float.self)\n        var j = 0\n        if nI % 4 == 0 {\n          for i in stride(from: 0, to: nI, by: 4) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let i0 = Int(u0 >> 2)\n            let i1 = Int(((u0 & 3) << 4) | (u1 >> 4))\n            let i2 = Int(((u1 & 15) << 2) | (u2 >> 6))\n            let i3 = Int(u2 & 63)\n            f32[i] = palette[i0]\n            f32[i + 1] = palette[i1]\n            f32[i + 2] = palette[i2]\n            f32[i + 3] = palette[i3]\n            j += 3\n          }\n        } else {\n          for i in stride(from: 0, to: nI, by: 4) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let i0 = Int(u0 >> 2)\n            let i1 = Int(((u0 & 3) << 4) | (u1 >> 4))\n            let i2 = Int(((u1 & 15) << 2) | (u2 >> 6))\n            let i3 = Int(u2 & 63)\n            f32[i] = palette[i0]\n            if i + 1 < nI {\n              f32[i + 1] = palette[i1]\n            }\n            if i + 2 < nI {\n              f32[i + 2] = palette[i2]\n            }\n            if i + 3 < nI {\n              f32[i + 3] = palette[i3]\n            }\n            j += 3\n          }\n        }\n      }\n    case Int32(CCV_16F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (64 * elementSize + blockSize \/ 4 * 3) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: UInt16.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 64\n        let f16 = decodedBlock.assumingMemoryBound(to: UInt16.self)\n        var j = 0\n        if nI % 4 == 0 {\n          for i in stride(from: 0, to: nI, by: 4) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let i0 = Int(u0 >> 2)\n            let i1 = Int(((u0 & 3) << 4) | (u1 >> 4))\n            let i2 = Int(((u1 & 15) << 2) | (u2 >> 6))\n            let i3 = Int(u2 & 63)\n            f16[i] = palette[i0]\n            f16[i + 1] = palette[i1]\n            f16[i + 2] = palette[i2]\n            f16[i + 3] = palette[i3]\n            j += 3\n          }\n        } else {\n          for i in stride(from: 0, to: nI, by: 4) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let i0 = Int(u0 >> 2)\n            let i1 = Int(((u0 & 3) << 4) | (u1 >> 4))\n            let i2 = Int(((u1 & 15) << 2) | (u2 >> 6))\n            let i3 = Int(u2 & 63)\n            f16[i] = palette[i0]\n            if i + 1 < nI {\n              f16[i + 1] = palette[i1]\n            }\n            if i + 2 < nI {\n              f16[i + 2] = palette[i2]\n            }\n            if i + 3 < nI {\n              f16[i + 3] = palette[i3]\n            }\n            j += 3\n          }\n        }\n      }\n    default:\n      return 0\n    }\n    decodedSize[0] = elementSize * numberOfElements\n    return 1\n  }",
        "key.parsed_scope.end" : 690,
        "key.parsed_scope.start" : 690,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main9q6pDecode33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q7pEncode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 33460
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q7pEncode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 3889,
        "key.line" : 884,
        "key.modulename" : "main",
        "key.name" : "q7pEncode",
        "key.namelength" : 9,
        "key.nameoffset" : 33472,
        "key.offset" : 33468,
        "key.parsed_declaration" : "private let q7pEncode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize, identifier\n    in\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    guard let data = data, let dimensions = dimensions, var encoded = encoded,\n      let encodedSize = encodedSize, dimensionCount > 0\n    else { return 0 }\n    var elementSize: Int\n    switch dataType {\n    case Int32(CCV_64F):\n      elementSize = MemoryLayout<Double>.size\n    case Int32(CCV_32F):\n      elementSize = MemoryLayout<Float>.size\n    case Int32(CCV_16F):\n      elementSize = MemoryLayout<UInt16>.size\n    default:\n      return 0\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    let numberOfBlocks = (numberOfElements + 8191) \/ 8192\n    guard\n      (numberOfElements + 7) \/ 8 * 7 + numberOfBlocks * 128 * elementSize\n        + MemoryLayout<UInt32>.size\n        < encodedSize[0]\n    else { return 0 }\n    encoded.storeBytes(of: UInt32(8192), as: UInt32.self)\n    encoded += MemoryLayout<UInt32>.size\n    DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n      let indices = UnsafeMutablePointer<Int32>.allocate(capacity: min(8192, numberOfElements))\n      let centroids = UnsafeMutablePointer<Double>.allocate(capacity: 128)\n      let nI = min(8192, numberOfElements - blockIdx * 8192)\n      var input = ccv_dense_matrix(\n        1, Int32(nI), dataType | Int32(CCV_C1),\n        UnsafeMutableRawPointer(mutating: data + 8192 * elementSize * blockIdx), 0)\n      ccv_kmeans1d(&input, 128, indices, centroids)\n      let encodedBlock = encoded + (128 * elementSize + 7168) * blockIdx\n      switch dataType {\n      case Int32(CCV_64F):\n        \/\/ Write centroids directly to the output.\n        memcpy(encodedBlock, centroids, elementSize * 128)\n      case Int32(CCV_32F):\n        let f32 = encodedBlock.assumingMemoryBound(to: Float32.self)\n        for i in 0..<128 {\n          f32[i] = Float(centroids[i])\n        }\n      case Int32(CCV_16F):\n        let f32 = UnsafeMutableRawPointer(centroids).assumingMemoryBound(to: Float32.self)\n        for i in 0..<128 {\n          f32[i] = Float(centroids[i])\n        }\n        ccv_float_to_half_precision(f32, encodedBlock.assumingMemoryBound(to: UInt16.self), 128)\n      default:\n        return\n      }\n      let u8 = encodedBlock.assumingMemoryBound(to: UInt8.self) + 128 * elementSize\n      var j = 0\n      for i in stride(from: 0, to: nI, by: 8) {\n        let i0 = UInt8(indices[i])\n        let i1 = i + 1 < nI ? UInt8(indices[i + 1]) : 0\n        let i2 = i + 2 < nI ? UInt8(indices[i + 2]) : 0\n        let i3 = i + 3 < nI ? UInt8(indices[i + 3]) : 0\n        let i4 = i + 4 < nI ? UInt8(indices[i + 4]) : 0\n        let i5 = i + 5 < nI ? UInt8(indices[i + 5]) : 0\n        let i6 = i + 6 < nI ? UInt8(indices[i + 6]) : 0\n        let i7 = i + 7 < nI ? UInt8(indices[i + 7]) : 0\n        let u0 = (i0 << 1) | (i1 >> 6)\n        let u1 = (i1 << 2) | (i2 >> 5)\n        let u2 = (i2 << 3) | (i3 >> 4)\n        let u3 = (i3 << 4) | (i4 >> 3)\n        let u4 = (i4 << 5) | (i5 >> 2)\n        let u5 = (i5 << 6) | (i6 >> 1)\n        let u6 = (i6 << 7) | i7\n        u8[j] = u0\n        u8[j + 1] = u1\n        u8[j + 2] = u2\n        u8[j + 3] = u3\n        u8[j + 4] = u4\n        u8[j + 5] = u5\n        u8[j + 6] = u6\n        j += 7\n      }\n      centroids.deallocate()\n      indices.deallocate()\n    }\n    identifier?[0] = 0x8a1e7b\n    encodedSize[0] =\n      (numberOfElements + 7) \/ 8 * 7 + numberOfBlocks * 128 * elementSize\n      + MemoryLayout<UInt32>.size\n    return 1\n  }",
        "key.parsed_scope.end" : 884,
        "key.parsed_scope.start" : 884,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main9q7pEncode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q7pDecode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 37359
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q7pDecode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 10728,
        "key.line" : 983,
        "key.modulename" : "main",
        "key.name" : "q7pDecode",
        "key.namelength" : 9,
        "key.nameoffset" : 37371,
        "key.offset" : 37367,
        "key.parsed_declaration" : "private let q7pDecode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard identifier == 0x8a1e7b else { return 0 }\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    if tensorOut!.pointee == nil {\n      tensorOut!.pointee = ccv_nnc_tensor_new(nil, params, 0)\n    }\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    guard var data = data, let dimensions = dimensions, let decoded = decoded ?? tensorData,\n      let decodedSize = decodedSize, dimensionCount > 0\n    else { return 0 }\n    let elementSize: Int\n    switch dataType {\n    case Int32(CCV_64F):\n      elementSize = MemoryLayout<Double>.size\n    case Int32(CCV_32F):\n      elementSize = MemoryLayout<Float>.size\n    case Int32(CCV_16F):\n      elementSize = MemoryLayout<UInt16>.size\n    default:\n      return 0\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    numberOfElements = min(decodedSize[0] \/ elementSize, numberOfElements)\n    guard dataSize > MemoryLayout<UInt32>.size else { return 0 }\n    let blockSize = Int(data.load(as: UInt32.self))\n    data += MemoryLayout<UInt32>.size\n    let numberOfBlocks = (numberOfElements + blockSize - 1) \/ blockSize\n    guard\n      dataSize >= (numberOfElements + 7) \/ 8 * 7 + numberOfBlocks * 128 * elementSize\n        + MemoryLayout<UInt32>.size\n    else { return 0 }\n    precondition(blockSize % 8 == 0)\n    switch dataType {\n    case Int32(CCV_64F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (128 * elementSize + blockSize \/ 8 * 7) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: Double.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 128\n        let f64 = decodedBlock.assumingMemoryBound(to: Double.self)\n        var j = 0\n        if nI % 8 == 0 {\n          for i in stride(from: 0, to: nI, by: 8) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let u3 = u8[j + 3]\n            let u4 = u8[j + 4]\n            let u5 = u8[j + 5]\n            let u6 = u8[j + 6]\n            let i0 = Int(u0 >> 1)\n            let i1 = Int(((u0 & 1) << 6) | (u1 >> 2))\n            let i2 = Int(((u1 & 3) << 5) | (u2 >> 3))\n            let i3 = Int(((u2 & 7) << 4) | (u3 >> 4))\n            let i4 = Int(((u3 & 15) << 3) | (u4 >> 5))\n            let i5 = Int(((u4 & 31) << 2) | (u5 >> 6))\n            let i6 = Int(((u5 & 63) << 1) | (u6 >> 7))\n            let i7 = Int(u6 & 127)\n            f64[i] = palette[i0]\n            f64[i + 1] = palette[i1]\n            f64[i + 2] = palette[i2]\n            f64[i + 3] = palette[i3]\n            f64[i + 4] = palette[i4]\n            f64[i + 5] = palette[i5]\n            f64[i + 6] = palette[i6]\n            f64[i + 7] = palette[i7]\n            j += 7\n          }\n        } else {\n          for i in stride(from: 0, to: nI, by: 8) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let u3 = u8[j + 3]\n            let u4 = u8[j + 4]\n            let u5 = u8[j + 5]\n            let u6 = u8[j + 6]\n            let i0 = Int(u0 >> 1)\n            let i1 = Int(((u0 & 1) << 6) | (u1 >> 2))\n            let i2 = Int(((u1 & 3) << 5) | (u2 >> 3))\n            let i3 = Int(((u2 & 7) << 4) | (u3 >> 4))\n            let i4 = Int(((u3 & 15) << 3) | (u4 >> 5))\n            let i5 = Int(((u4 & 31) << 2) | (u5 >> 6))\n            let i6 = Int(((u5 & 63) << 1) | (u6 >> 7))\n            let i7 = Int(u6 & 127)\n            f64[i] = palette[i0]\n            if i + 1 < nI {\n              f64[i + 1] = palette[i1]\n            }\n            if i + 2 < nI {\n              f64[i + 2] = palette[i2]\n            }\n            if i + 3 < nI {\n              f64[i + 3] = palette[i3]\n            }\n            if i + 4 < nI {\n              f64[i + 4] = palette[i4]\n            }\n            if i + 5 < nI {\n              f64[i + 5] = palette[i5]\n            }\n            if i + 6 < nI {\n              f64[i + 6] = palette[i6]\n            }\n            if i + 7 < nI {\n              f64[i + 7] = palette[i7]\n            }\n            j += 7\n          }\n        }\n      }\n    case Int32(CCV_32F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (128 * elementSize + blockSize \/ 8 * 7) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: Float.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 128\n        let f32 = decodedBlock.assumingMemoryBound(to: Float.self)\n        var j = 0\n        if nI % 8 == 0 {\n          for i in stride(from: 0, to: nI, by: 8) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let u3 = u8[j + 3]\n            let u4 = u8[j + 4]\n            let u5 = u8[j + 5]\n            let u6 = u8[j + 6]\n            let i0 = Int(u0 >> 1)\n            let i1 = Int(((u0 & 1) << 6) | (u1 >> 2))\n            let i2 = Int(((u1 & 3) << 5) | (u2 >> 3))\n            let i3 = Int(((u2 & 7) << 4) | (u3 >> 4))\n            let i4 = Int(((u3 & 15) << 3) | (u4 >> 5))\n            let i5 = Int(((u4 & 31) << 2) | (u5 >> 6))\n            let i6 = Int(((u5 & 63) << 1) | (u6 >> 7))\n            let i7 = Int(u6 & 127)\n            f32[i] = palette[i0]\n            f32[i + 1] = palette[i1]\n            f32[i + 2] = palette[i2]\n            f32[i + 3] = palette[i3]\n            f32[i + 4] = palette[i4]\n            f32[i + 5] = palette[i5]\n            f32[i + 6] = palette[i6]\n            f32[i + 7] = palette[i7]\n            j += 7\n          }\n        } else {\n          for i in stride(from: 0, to: nI, by: 8) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let u3 = u8[j + 3]\n            let u4 = u8[j + 4]\n            let u5 = u8[j + 5]\n            let u6 = u8[j + 6]\n            let i0 = Int(u0 >> 1)\n            let i1 = Int(((u0 & 1) << 6) | (u1 >> 2))\n            let i2 = Int(((u1 & 3) << 5) | (u2 >> 3))\n            let i3 = Int(((u2 & 7) << 4) | (u3 >> 4))\n            let i4 = Int(((u3 & 15) << 3) | (u4 >> 5))\n            let i5 = Int(((u4 & 31) << 2) | (u5 >> 6))\n            let i6 = Int(((u5 & 63) << 1) | (u6 >> 7))\n            let i7 = Int(u6 & 127)\n            f32[i] = palette[i0]\n            if i + 1 < nI {\n              f32[i + 1] = palette[i1]\n            }\n            if i + 2 < nI {\n              f32[i + 2] = palette[i2]\n            }\n            if i + 3 < nI {\n              f32[i + 3] = palette[i3]\n            }\n            if i + 4 < nI {\n              f32[i + 4] = palette[i4]\n            }\n            if i + 5 < nI {\n              f32[i + 5] = palette[i5]\n            }\n            if i + 6 < nI {\n              f32[i + 6] = palette[i6]\n            }\n            if i + 7 < nI {\n              f32[i + 7] = palette[i7]\n            }\n            j += 7\n          }\n        }\n      }\n    case Int32(CCV_16F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (128 * elementSize + blockSize \/ 8 * 7) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: UInt16.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 128\n        let f16 = decodedBlock.assumingMemoryBound(to: UInt16.self)\n        var j = 0\n        if nI % 8 == 0 {\n          for i in stride(from: 0, to: nI, by: 8) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let u3 = u8[j + 3]\n            let u4 = u8[j + 4]\n            let u5 = u8[j + 5]\n            let u6 = u8[j + 6]\n            let i0 = Int(u0 >> 1)\n            let i1 = Int(((u0 & 1) << 6) | (u1 >> 2))\n            let i2 = Int(((u1 & 3) << 5) | (u2 >> 3))\n            let i3 = Int(((u2 & 7) << 4) | (u3 >> 4))\n            let i4 = Int(((u3 & 15) << 3) | (u4 >> 5))\n            let i5 = Int(((u4 & 31) << 2) | (u5 >> 6))\n            let i6 = Int(((u5 & 63) << 1) | (u6 >> 7))\n            let i7 = Int(u6 & 127)\n            f16[i] = palette[i0]\n            f16[i + 1] = palette[i1]\n            f16[i + 2] = palette[i2]\n            f16[i + 3] = palette[i3]\n            f16[i + 4] = palette[i4]\n            f16[i + 5] = palette[i5]\n            f16[i + 6] = palette[i6]\n            f16[i + 7] = palette[i7]\n            j += 7\n          }\n        } else {\n          for i in stride(from: 0, to: nI, by: 8) {\n            let u0 = u8[j]\n            let u1 = u8[j + 1]\n            let u2 = u8[j + 2]\n            let u3 = u8[j + 3]\n            let u4 = u8[j + 4]\n            let u5 = u8[j + 5]\n            let u6 = u8[j + 6]\n            let i0 = Int(u0 >> 1)\n            let i1 = Int(((u0 & 1) << 6) | (u1 >> 2))\n            let i2 = Int(((u1 & 3) << 5) | (u2 >> 3))\n            let i3 = Int(((u2 & 7) << 4) | (u3 >> 4))\n            let i4 = Int(((u3 & 15) << 3) | (u4 >> 5))\n            let i5 = Int(((u4 & 31) << 2) | (u5 >> 6))\n            let i6 = Int(((u5 & 63) << 1) | (u6 >> 7))\n            let i7 = Int(u6 & 127)\n            f16[i] = palette[i0]\n            if i + 1 < nI {\n              f16[i + 1] = palette[i1]\n            }\n            if i + 2 < nI {\n              f16[i + 2] = palette[i2]\n            }\n            if i + 3 < nI {\n              f16[i + 3] = palette[i3]\n            }\n            if i + 4 < nI {\n              f16[i + 4] = palette[i4]\n            }\n            if i + 5 < nI {\n              f16[i + 5] = palette[i5]\n            }\n            if i + 6 < nI {\n              f16[i + 6] = palette[i6]\n            }\n            if i + 7 < nI {\n              f16[i + 7] = palette[i7]\n            }\n            j += 7\n          }\n        }\n      }\n    default:\n      return 0\n    }\n    decodedSize[0] = elementSize * numberOfElements\n    return 1\n  }",
        "key.parsed_scope.end" : 983,
        "key.parsed_scope.start" : 983,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main9q7pDecode33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q8pEncode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 48119
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q8pEncode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 2978,
        "key.line" : 1273,
        "key.modulename" : "main",
        "key.name" : "q8pEncode",
        "key.namelength" : 9,
        "key.nameoffset" : 48131,
        "key.offset" : 48127,
        "key.parsed_declaration" : "private let q8pEncode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize, identifier\n    in\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    guard let data = data, let dimensions = dimensions, var encoded = encoded,\n      let encodedSize = encodedSize, dimensionCount > 0\n    else { return 0 }\n    var elementSize: Int\n    switch dataType {\n    case Int32(CCV_64F):\n      elementSize = MemoryLayout<Double>.size\n    case Int32(CCV_32F):\n      elementSize = MemoryLayout<Float>.size\n    case Int32(CCV_16F):\n      elementSize = MemoryLayout<UInt16>.size\n    default:\n      return 0\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    let numberOfBlocks = (numberOfElements + 16_383) \/ 16_384\n    guard numberOfElements + 256 * elementSize + MemoryLayout<UInt32>.size < encodedSize[0] else {\n      return 0\n    }\n    encoded.storeBytes(of: UInt32(16_384), as: UInt32.self)\n    encoded += MemoryLayout<UInt32>.size\n    DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n      let indices = UnsafeMutablePointer<Int32>.allocate(capacity: min(16_384, numberOfElements))\n      let centroids = UnsafeMutablePointer<Double>.allocate(capacity: 256)\n      let nI = min(16_384, numberOfElements - blockIdx * 16_384)\n      var input = ccv_dense_matrix(\n        1, Int32(nI), dataType | Int32(CCV_C1),\n        UnsafeMutableRawPointer(mutating: data + 16_384 * elementSize * blockIdx), 0)\n      ccv_kmeans1d(&input, 256, indices, centroids)\n      let encodedBlock = encoded + (256 * elementSize + 16_384) * blockIdx\n      switch dataType {\n      case Int32(CCV_64F):\n        \/\/ Write centroids directly to the output.\n        memcpy(encodedBlock, centroids, elementSize * 256)\n      case Int32(CCV_32F):\n        let f32 = encodedBlock.assumingMemoryBound(to: Float32.self)\n        for i in 0..<256 {\n          f32[i] = Float(centroids[i])\n        }\n      case Int32(CCV_16F):\n        let f32 = UnsafeMutableRawPointer(centroids).assumingMemoryBound(to: Float32.self)\n        for i in 0..<256 {\n          f32[i] = Float(centroids[i])\n        }\n        ccv_float_to_half_precision(\n          f32, encodedBlock.assumingMemoryBound(to: UInt16.self), 256)\n      default:\n        return\n      }\n      let u8 = encodedBlock.assumingMemoryBound(to: UInt8.self) + 256 * elementSize\n      for i in 0..<nI {\n        u8[i] = UInt8(indices[i])\n      }\n      centroids.deallocate()\n      indices.deallocate()\n    }\n    identifier?[0] = 0x8a1e8b\n    encodedSize[0] =\n      numberOfElements + numberOfBlocks * 256 * elementSize + MemoryLayout<UInt32>.size\n    return 1\n  }",
        "key.parsed_scope.end" : 1273,
        "key.parsed_scope.start" : 1273,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main9q8pEncode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q8pDecode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 51107
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q8pDecode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 3832,
        "key.line" : 1347,
        "key.modulename" : "main",
        "key.name" : "q8pDecode",
        "key.namelength" : 9,
        "key.nameoffset" : 51119,
        "key.offset" : 51115,
        "key.parsed_declaration" : "private let q8pDecode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard identifier == 0x8a1e8b else { return 0 }\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    if tensorOut!.pointee == nil {\n      tensorOut!.pointee = ccv_nnc_tensor_new(nil, params, 0)\n    }\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    guard var data = data, let dimensions = dimensions, let decoded = decoded ?? tensorData,\n      let decodedSize = decodedSize, dimensionCount > 0\n    else { return 0 }\n    let elementSize: Int\n    switch dataType {\n    case Int32(CCV_64F):\n      elementSize = MemoryLayout<Double>.size\n    case Int32(CCV_32F):\n      elementSize = MemoryLayout<Float>.size\n    case Int32(CCV_16F):\n      elementSize = MemoryLayout<UInt16>.size\n    default:\n      return 0\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    numberOfElements = min(decodedSize[0] \/ elementSize, numberOfElements)\n    guard dataSize > MemoryLayout<UInt32>.size else { return 0 }\n    let blockSize = Int(data.load(as: UInt32.self))\n    data += MemoryLayout<UInt32>.size\n    let numberOfBlocks = (numberOfElements + blockSize - 1) \/ blockSize\n    guard\n      dataSize >= numberOfElements + numberOfBlocks * 256 * elementSize + MemoryLayout<UInt32>.size\n    else { return 0 }\n    switch dataType {\n    case Int32(CCV_64F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (256 * elementSize + blockSize) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: Double.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 256\n        let f64 = decodedBlock.assumingMemoryBound(to: Double.self)\n        for i in 0..<nI {\n          f64[i] = palette[Int(u8[i])]\n        }\n      }\n    case Int32(CCV_32F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (256 * elementSize + blockSize) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: Float.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 256\n        let f32 = decodedBlock.assumingMemoryBound(to: Float.self)\n        for i in 0..<nI {\n          f32[i] = palette[Int(u8[i])]\n        }\n      }\n    case Int32(CCV_16F):\n      DispatchQueue.concurrentPerform(iterations: numberOfBlocks) { blockIdx in\n        let nI = min(blockSize, numberOfElements - blockIdx * blockSize)\n        let dataBlock = data + (256 * elementSize + blockSize) * blockIdx\n        let decodedBlock = decoded + blockSize * elementSize * blockIdx\n        let palette = dataBlock.assumingMemoryBound(to: UInt16.self)\n        let u8 = dataBlock.assumingMemoryBound(to: UInt8.self) + elementSize * 256\n        let f16 = decodedBlock.assumingMemoryBound(to: UInt16.self)\n        for i in 0..<nI {\n          f16[i] = palette[Int(u8[i])]\n        }\n      }\n    default:\n      return 0\n    }\n    decodedSize[0] = elementSize * numberOfElements\n    return 1\n  }",
        "key.parsed_scope.end" : 1347,
        "key.parsed_scope.start" : 1347,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main9q8pDecode33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let fpzipEncode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 54949
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fpzipEncode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 2637,
        "key.line" : 1433,
        "key.modulename" : "main",
        "key.name" : "fpzipEncode",
        "key.namelength" : 11,
        "key.nameoffset" : 54961,
        "key.offset" : 54957,
        "key.parsed_declaration" : "private let fpzipEncode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize, identifier\n    in\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    guard let data = data, let dimensions = dimensions, let encoded = encoded,\n      let encodedSize = encodedSize, dimensionCount > 0\n    else { return 0 }\n    guard let fpz = fpzip_write_to_buffer(encoded, encodedSize[0]) else { return 0 }\n    defer { fpzip_write_close(fpz) }\n    fpz.pointee.type = Int32(FPZIP_TYPE_FLOAT)\n    switch dataType {\n    case Int32(CCV_64F):\n      fpz.pointee.type = Int32(FPZIP_TYPE_DOUBLE)\n      fpz.pointee.prec = 64\n    case Int32(CCV_32F):\n      fpz.pointee.type = Int32(FPZIP_TYPE_FLOAT)\n      fpz.pointee.prec = 32\n    case Int32(CCV_16F):\n      fpz.pointee.type = Int32(FPZIP_TYPE_FLOAT)\n      fpz.pointee.prec = 19  \/\/ Since we have to retain all exponetial components (i.e. 8, in Float16, that is 5), we need to specify a precision at least 19.\n    default:\n      return 0\n    }\n    fpz.pointee.nx = dimensions[Int(dimensionCount) - 1]\n    fpz.pointee.ny = dimensionCount >= 2 ? dimensions[Int(dimensionCount) - 2] : 1\n    fpz.pointee.nz = dimensionCount >= 3 ? dimensions[Int(dimensionCount) - 3] : 1\n    if dimensionCount == 4 {\n      fpz.pointee.nf = dimensions[0]\n    } else if dimensionCount > 4 {\n      var remainingCount = dimensions[Int(dimensionCount) - 4]\n      for i in 4..<Int(dimensionCount) {\n        remainingCount *= dimensions[Int(dimensionCount) - i - 1]\n      }\n      fpz.pointee.nf = remainingCount\n    }\n    fpzip_write_header(fpz)\n    var inputData = data\n    let f32: UnsafeMutablePointer<Float32>?\n    if dataType == Int32(CCV_16F) {\n      \/\/ Need to do the conversion\n      let len =\n        Int(fpz.pointee.nx) * Int(fpz.pointee.ny) * Int(fpz.pointee.nz) * Int(fpz.pointee.nf)\n      let f32p = UnsafeMutablePointer<Float32>.allocate(capacity: len)\n      ccv_half_precision_to_float(\n        UnsafeMutableRawPointer(mutating: data).assumingMemoryBound(to: UInt16.self), f32p, len)\n      inputData = UnsafeRawPointer(f32p)\n      f32 = f32p\n    } else {\n      f32 = nil\n    }\n    let outbytes = fpzip_write(fpz, inputData)\n    if let f32 = f32 {\n      f32.deallocate()\n    }\n    guard outbytes > 0 && outbytes <= dataSize else { return 0 }\n    identifier?[0] = 0xf7217\n    encodedSize[0] = outbytes\n    return 1\n  }",
        "key.parsed_scope.end" : 1433,
        "key.parsed_scope.start" : 1433,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main11fpzipEncode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let fpzipDecode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 57596
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fpzipDecode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 3164,
        "key.line" : 1498,
        "key.modulename" : "main",
        "key.name" : "fpzipDecode",
        "key.namelength" : 11,
        "key.nameoffset" : 57608,
        "key.offset" : 57604,
        "key.parsed_declaration" : "private let fpzipDecode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard identifier == 0xf7217 else { return 0 }\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    if tensorOut!.pointee == nil {\n      tensorOut!.pointee = ccv_nnc_tensor_new(nil, params, 0)\n    }\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    guard let data = data, let dimensions = dimensions, let decoded = decoded ?? tensorData,\n      let decodedSize = decodedSize, dimensionCount > 0\n    else { return 0 }\n    guard let fpz = fpzip_read_from_buffer(data) else { return 0 }\n    defer { fpzip_read_close(fpz) }\n    guard fpzip_read_header(fpz) != 0 else { return 0 }\n    let truncatedCount: Int\n    let truncatedLength: Int\n    let elementSize: Int\n    switch dataType {\n    case Int32(CCV_64F):\n      guard fpz.pointee.type == Int32(FPZIP_TYPE_DOUBLE) else { return 0 }\n      elementSize = MemoryLayout<Double>.size\n      truncatedCount = decodedSize[0] \/ MemoryLayout<Double>.size\n      truncatedLength = truncatedCount * MemoryLayout<Double>.size\n    case Int32(CCV_32F):\n      guard fpz.pointee.type == Int32(FPZIP_TYPE_FLOAT) else { return 0 }\n      elementSize = MemoryLayout<Float>.size\n      truncatedCount = decodedSize[0] \/ MemoryLayout<Float>.size\n      truncatedLength = truncatedCount * MemoryLayout<Float>.size\n    case Int32(CCV_16F):\n      guard fpz.pointee.type == Int32(FPZIP_TYPE_FLOAT) else { return 0 }\n      elementSize = MemoryLayout<Float>.size\n      truncatedCount = decodedSize[0] \/ MemoryLayout<UInt16>.size\n      truncatedLength = truncatedCount * MemoryLayout<UInt16>.size\n    default:\n      return 0\n    }\n    let len = Int(fpz.pointee.nx) * Int(fpz.pointee.ny) * Int(fpz.pointee.nz) * Int(fpz.pointee.nf)\n    if decodedSize[0] < elementSize * len {\n      let buffer = UnsafeMutableRawPointer.allocate(\n        byteCount: elementSize * len, alignment: elementSize)\n      defer { buffer.deallocate() }\n      guard fpzip_read(fpz, buffer) != 0 else { return 0 }\n      if dataType == Int32(CCV_16F) {\n        ccv_float_to_half_precision(\n          buffer.assumingMemoryBound(to: Float.self), buffer.assumingMemoryBound(to: UInt16.self),\n          truncatedCount)\n      }\n      memcpy(decoded, buffer, truncatedLength)\n      decodedSize[0] = truncatedLength\n      return 1\n    } else {\n      \/\/ Decode directly, and then we do conversion, if it is CCV_16F.\n      guard fpzip_read(fpz, decoded) != 0 else { return 0 }\n      if dataType == Int32(CCV_16F) {\n        ccv_float_to_half_precision(\n          decoded.assumingMemoryBound(to: Float.self), decoded.assumingMemoryBound(to: UInt16.self),\n          len)\n      }\n      decodedSize[0] = elementSize * len\n    }\n    return 1\n  }",
        "key.parsed_scope.end" : 1498,
        "key.parsed_scope.start" : 1498,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main11fpzipDecode33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let zipEncode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 60770
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>zipEncode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 669,
        "key.line" : 1569,
        "key.modulename" : "main",
        "key.name" : "zipEncode",
        "key.namelength" : 9,
        "key.nameoffset" : 60782,
        "key.offset" : 60778,
        "key.parsed_declaration" : "private let zipEncode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n    identifier\n    in\n    guard let data = data, let dimensions = dimensions, let encoded = encoded,\n      let encodedSize = encodedSize, dimensionCount > 0\n    else { return 0 }\n    guard zip(data: data, dataSize: dataSize, zippedData: encoded, zippedDataSize: encodedSize)\n    else {\n      return 0\n    }\n    identifier?[0] = 0x217\n    return 1\n  }",
        "key.parsed_scope.end" : 1569,
        "key.parsed_scope.start" : 1569,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main9zipEncode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let zipDecode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 61449
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>zipDecode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 990,
        "key.line" : 1588,
        "key.modulename" : "main",
        "key.name" : "zipDecode",
        "key.namelength" : 9,
        "key.nameoffset" : 61461,
        "key.offset" : 61457,
        "key.parsed_declaration" : "private let zipDecode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard identifier == 0x217 else { return 0 }\n    if tensorOut!.pointee == nil {\n      tensorOut!.pointee = ccv_nnc_tensor_new(nil, params, 0)\n    }\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    guard let data = data, let dimensions = dimensions, let decoded = decoded ?? tensorData,\n      let decodedSize = decodedSize, dimensionCount > 0\n    else { return 0 }\n    guard\n      unzip(data: data, dataSize: dataSize, unzippedData: decoded, unzippedDataSize: decodedSize)\n    else { return 0 }\n    return 1\n  }",
        "key.parsed_scope.end" : 1588,
        "key.parsed_scope.start" : 1588,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main9zipDecode33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>func truncatedBits(_ number: <Type usr=\"s:s6UInt16V\">UInt16<\/Type>, bitCount: <Type usr=\"s:s6UInt16V\">UInt16<\/Type>) -&gt; <Type usr=\"s:s6UInt16V\">UInt16<\/Type><\/Declaration>",
        "key.bodylength" : 328,
        "key.bodyoffset" : 62515,
        "key.column" : 6,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>truncatedBits<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>number<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:s6UInt16V\">UInt16<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>bitCount<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:s6UInt16V\">UInt16<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s6UInt16V\">UInt16<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 395,
        "key.line" : 1611,
        "key.modulename" : "main",
        "key.name" : "truncatedBits(_:bitCount:)",
        "key.namelength" : 49,
        "key.nameoffset" : 62454,
        "key.offset" : 62449,
        "key.parsed_declaration" : "func truncatedBits(_ number: UInt16, bitCount: UInt16) -> UInt16",
        "key.parsed_scope.end" : 1621,
        "key.parsed_scope.start" : 1611,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>let mask: <Type usr=\"s:s6UInt16V\">UInt16<\/Type><\/Declaration>",
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>mask<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s6UInt16V\">UInt16<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 38,
            "key.line" : 1613,
            "key.modulename" : "main",
            "key.name" : "mask",
            "key.namelength" : 4,
            "key.nameoffset" : 62566,
            "key.offset" : 62562,
            "key.parsed_declaration" : "let mask: UInt16 = (1 << bitCount) - 1",
            "key.parsed_scope.end" : 1613,
            "key.parsed_scope.start" : 1613,
            "key.typename" : "UInt16",
            "key.typeusr" : "$ss6UInt16VD",
            "key.usr" : "s:4main13truncatedBits_8bitCounts6UInt16VAE_AEtF4maskL_AEvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let discard: <Type usr=\"s:s6UInt16V\">UInt16<\/Type><\/Declaration>",
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>discard<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s6UInt16V\">UInt16<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 27,
            "key.line" : 1614,
            "key.modulename" : "main",
            "key.name" : "discard",
            "key.namelength" : 7,
            "key.nameoffset" : 62607,
            "key.offset" : 62603,
            "key.parsed_declaration" : "let discard = number & mask",
            "key.parsed_scope.end" : 1614,
            "key.parsed_scope.start" : 1614,
            "key.typename" : "UInt16",
            "key.typeusr" : "$ss6UInt16VD",
            "key.usr" : "s:4main13truncatedBits_8bitCounts6UInt16VAE_AEtF7discardL_AEvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let threshold: <Type usr=\"s:s6UInt16V\">UInt16<\/Type><\/Declaration>",
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>threshold<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s6UInt16V\">UInt16<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 43,
            "key.line" : 1615,
            "key.modulename" : "main",
            "key.name" : "threshold",
            "key.namelength" : 9,
            "key.nameoffset" : 62637,
            "key.offset" : 62633,
            "key.parsed_declaration" : "let threshold: UInt16 = 1 << (bitCount - 1)",
            "key.parsed_scope.end" : 1615,
            "key.parsed_scope.start" : 1615,
            "key.typename" : "UInt16",
            "key.typeusr" : "$ss6UInt16VD",
            "key.usr" : "s:4main13truncatedBits_8bitCounts6UInt16VAE_AEtF9thresholdL_AEvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var shifted: <Type usr=\"s:s6UInt16V\">UInt16<\/Type><\/Declaration>",
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>shifted<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s6UInt16V\">UInt16<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 32,
            "key.line" : 1616,
            "key.modulename" : "main",
            "key.name" : "shifted",
            "key.namelength" : 7,
            "key.nameoffset" : 62683,
            "key.offset" : 62679,
            "key.parsed_declaration" : "var shifted = number >> bitCount",
            "key.parsed_scope.end" : 1616,
            "key.parsed_scope.start" : 1616,
            "key.typename" : "UInt16",
            "key.typeusr" : "$ss6UInt16VD",
            "key.usr" : "s:4main13truncatedBits_8bitCounts6UInt16VAE_AEtF7shiftedL_AEvp"
          }
        ],
        "key.typename" : "(UInt16, UInt16) -> UInt16",
        "key.typeusr" : "$s_8bitCounts6UInt16VAC_ACtcD",
        "key.usr" : "s:4main13truncatedBits_8bitCounts6UInt16VAE_AEtF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let ezm7Encode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 63264
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>ezm7Encode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 2286,
        "key.line" : 1629,
        "key.modulename" : "main",
        "key.name" : "ezm7Encode",
        "key.namelength" : 10,
        "key.nameoffset" : 63276,
        "key.offset" : 63272,
        "key.parsed_declaration" : "private let ezm7Encode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n    identifier\n    in\n    guard let data = data, let dimensions = dimensions, let encoded = encoded,\n      let encodedSize = encodedSize, dimensionCount > 0\n    else { return 0 }\n    guard dataType == Int32(CCV_16F) else { return 0 }\n    var floatCount = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      floatCount *= Int(dimensions[i])\n    }\n    let floatBytesBuffer = data.assumingMemoryBound(to: UInt16.self)\n    let floatsWithoutExp = UnsafeMutablePointer<UInt8>.allocate(capacity: floatCount)\n    let exponents = UnsafeMutablePointer<UInt8>.allocate(capacity: floatCount)\n    defer {\n      exponents.deallocate()\n      floatsWithoutExp.deallocate()\n    }\n    for i in 0..<floatCount {\n      let floatBytes = floatBytesBuffer[i]\n      let exponent = UInt8((floatBytes >> 10) & ((1 << 5) - 1))\n      let signBit = UInt8(floatBytes >> 15)\n      let mantissa = floatBytes & ((1 << 10) - 1)\n      var truncatedMantissa = UInt8(truncatedBits(mantissa, bitCount: 3))\n      if (truncatedMantissa & (1 << 7)) != 0 {\n        \/\/ If rounding would cause overflow, just round down instead\n        truncatedMantissa = UInt8(mantissa >> 3)\n      }\n      exponents[i] = UInt8(exponent)\n      floatsWithoutExp[i] = (signBit << 7) | truncatedMantissa\n    }\n    guard encodedSize[0] > 4 else { return 0 }\n    var zippedDataSize = encodedSize[0] - 4\n    guard\n      zip(\n        data: exponents,\n        dataSize: floatCount,\n        zippedData: encoded.advanced(by: 4),\n        zippedDataSize: &zippedDataSize)\n    else { return 0 }\n    encoded.assumingMemoryBound(to: Int32.self)[0] = Int32(zippedDataSize)\n    guard 4 + zippedDataSize + floatCount <= encodedSize[0] else { return 0 }\n    memcpy(encoded.advanced(by: 4 + zippedDataSize), floatsWithoutExp, floatCount)\n    identifier?[0] = 0x511\n    encodedSize[0] =\n      4 \/* for compressed exponents size *\/\n      + zippedDataSize \/* exponents *\/\n      + floatCount \/* floats without exponent *\/\n    return 1\n  }",
        "key.parsed_scope.end" : 1629,
        "key.parsed_scope.start" : 1629,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main10ezm7Encode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let ezm7Decode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 65560
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>ezm7Decode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 2157,
        "key.line" : 1685,
        "key.modulename" : "main",
        "key.name" : "ezm7Decode",
        "key.namelength" : 10,
        "key.nameoffset" : 65572,
        "key.offset" : 65568,
        "key.parsed_declaration" : "private let ezm7Decode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard dataType == Int32(CCV_16F) else { return 0 }\n    guard identifier == 0x511 else { return 0 }\n    if tensorOut!.pointee == nil {\n      tensorOut!.pointee = ccv_nnc_tensor_new(nil, params, 0)\n    }\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    guard let data = data, let dimensions = dimensions, let decoded = decoded ?? tensorData,\n      let decodedSize = decodedSize, dimensionCount > 0\n    else { return 0 }\n    var floatCount = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      floatCount *= Int(dimensions[i])\n    }\n    floatCount = min(floatCount, decodedSize[0] \/ 2)\n    let exponentZipSize = Int(data.assumingMemoryBound(to: Int32.self)[0])\n    guard dataSize >= 4 + exponentZipSize + floatCount else { return 0 }\n    let exponentZipData = data.advanced(by: MemoryLayout<Int32>.size)\n    let exponentBuffer = UnsafeMutablePointer<UInt8>.allocate(capacity: floatCount)\n    defer { exponentBuffer.deallocate() }\n    var unzippedDataSize = floatCount\n    guard\n      unzip(\n        data: exponentZipData,\n        dataSize: exponentZipSize,\n        unzippedData: exponentBuffer,\n        unzippedDataSize: &unzippedDataSize)\n    else { return 0 }\n    let floatsWithoutExp = exponentZipData.advanced(by: exponentZipSize).assumingMemoryBound(\n      to: UInt8.self)\n    let decodedAsInts = decoded.assumingMemoryBound(to: UInt16.self)\n    for i in 0..<floatCount {\n      let floatWithoutExp = UInt16(floatsWithoutExp[i])\n      let signBit = floatWithoutExp >> 7\n      let mantissa = (floatWithoutExp & 0x7f) << 3\n      let exponent = UInt16(exponentBuffer[i])\n      decodedAsInts[i] = (signBit << 15) | (exponent << 10) | mantissa\n    }\n\n    return 1\n  }",
        "key.parsed_scope.end" : 1685,
        "key.parsed_scope.start" : 1685,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main10ezm7Decode33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.bodylength" : 303,
        "key.bodyoffset" : 67927,
        "key.internal_diagnostic" : "Unable to resolve cursor info.",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 453,
        "key.name" : "zip(data:dataSize:zippedData:zippedDataSize:)",
        "key.namelength" : 134,
        "key.nameoffset" : 67783,
        "key.offset" : 67778,
        "key.substructure" : [
          {
            "key.internal_diagnostic" : "Unable to resolve cursor info.",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 197,
            "key.name" : "outputSize",
            "key.namelength" : 10,
            "key.nameoffset" : 67936,
            "key.offset" : 67932
          }
        ],
        "key.typename" : "Bool"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 68235
          }
        ],
        "key.bodylength" : 942,
        "key.bodyoffset" : 68398,
        "key.internal_diagnostic" : "Unable to resolve cursor info.",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 1098,
        "key.name" : "unzip(data:dataSize:unzippedData:unzippedDataSize:)",
        "key.namelength" : 140,
        "key.nameoffset" : 68248,
        "key.offset" : 68243,
        "key.substructure" : [
          {
            "key.internal_diagnostic" : "Unable to resolve cursor info.",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 53,
            "key.name" : "nextIn",
            "key.namelength" : 6,
            "key.nameoffset" : 68407,
            "key.offset" : 68403
          },
          {
            "key.internal_diagnostic" : "Unable to resolve cursor info.",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 62,
            "key.name" : "nextOut",
            "key.namelength" : 7,
            "key.nameoffset" : 68465,
            "key.offset" : 68461
          },
          {
            "key.internal_diagnostic" : "Unable to resolve cursor info.",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 142,
            "key.name" : "stream",
            "key.namelength" : 6,
            "key.nameoffset" : 68532,
            "key.offset" : 68528
          },
          {
            "key.internal_diagnostic" : "Unable to resolve cursor info.",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 90,
            "key.name" : "status",
            "key.namelength" : 6,
            "key.nameoffset" : 68679,
            "key.offset" : 68675
          }
        ],
        "key.typename" : "Bool"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private func zip(data: <Type usr=\"s:SV\">UnsafeRawPointer<\/Type>, dataSize: <Type usr=\"s:Si\">Int<\/Type>, zippedData: <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>, zippedDataSize: <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 69352
          }
        ],
        "key.bodylength" : 1561,
        "key.bodyoffset" : 69509,
        "key.column" : 16,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>zip<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>data<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dataSize<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>zippedData<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>zippedDataSize<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 1711,
        "key.line" : 1776,
        "key.modulename" : "main",
        "key.name" : "zip(data:dataSize:zippedData:zippedDataSize:)",
        "key.namelength" : 134,
        "key.nameoffset" : 69365,
        "key.offset" : 69360,
        "key.parsed_declaration" : "private func zip(\n  data: UnsafeRawPointer, dataSize: Int, zippedData: UnsafeMutableRawPointer,\n  zippedDataSize: UnsafeMutablePointer<Int>\n) -> Bool",
        "key.parsed_scope.end" : 1814,
        "key.parsed_scope.start" : 1776,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s3zipys12Zip2SequenceVyxq_Gx_q_tSTRzSTR_r0_lF\">zip(_:_:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>var stream: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>stream<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 23,
            "key.line" : 1780,
            "key.modulename" : "main",
            "key.name" : "stream",
            "key.namelength" : 6,
            "key.nameoffset" : 69518,
            "key.offset" : 69514,
            "key.parsed_declaration" : "var stream = z_stream()",
            "key.parsed_scope.end" : 1780,
            "key.parsed_scope.start" : 1780,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main3zip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size10zippedData0mnL0SbSV_SiSvSpySiGtF6streamL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let streamSize: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>streamSize<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 51,
            "key.line" : 1781,
            "key.modulename" : "main",
            "key.name" : "streamSize",
            "key.namelength" : 10,
            "key.nameoffset" : 69546,
            "key.offset" : 69542,
            "key.parsed_declaration" : "let streamSize = Int32(MemoryLayout<z_stream>.size)",
            "key.parsed_scope.end" : 1781,
            "key.parsed_scope.start" : 1781,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main3zip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size10zippedData0mnL0SbSV_SiSvSpySiGtF06streamL0L_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let result: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>result<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 144,
            "key.line" : 1782,
            "key.modulename" : "main",
            "key.name" : "result",
            "key.namelength" : 6,
            "key.nameoffset" : 69602,
            "key.offset" : 69598,
            "key.parsed_declaration" : "let result = deflateInit2_(\n  &stream, Z_DEFAULT_COMPRESSION, Z_DEFLATED, -MAX_WBITS, 9, Z_DEFAULT_STRATEGY, ZLIB_VERSION,\n  streamSize)",
            "key.parsed_scope.end" : 1782,
            "key.parsed_scope.start" : 1782,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main3zip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size10zippedData0mnL0SbSV_SiSvSpySiGtF6resultL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let chunkSize: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>chunkSize<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 27,
            "key.line" : 1787,
            "key.modulename" : "main",
            "key.name" : "chunkSize",
            "key.namelength" : 9,
            "key.nameoffset" : 69832,
            "key.offset" : 69828,
            "key.parsed_declaration" : "let chunkSize = 0x8000_0000",
            "key.parsed_scope.end" : 1787,
            "key.parsed_scope.start" : 1787,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main3zip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size10zippedData0mnL0SbSV_SiSvSpySiGtF05chunkL0L_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>var availableSize: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>availableSize<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 28,
            "key.line" : 1788,
            "key.modulename" : "main",
            "key.name" : "availableSize",
            "key.namelength" : 13,
            "key.nameoffset" : 69864,
            "key.offset" : 69860,
            "key.parsed_declaration" : "var availableSize = dataSize",
            "key.parsed_scope.end" : 1788,
            "key.parsed_scope.start" : 1788,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main3zip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size10zippedData0mnL0SbSV_SiSvSpySiGtF09availableL0L_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>var outputSize: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>outputSize<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 18,
            "key.line" : 1789,
            "key.modulename" : "main",
            "key.name" : "outputSize",
            "key.namelength" : 10,
            "key.nameoffset" : 69897,
            "key.offset" : 69893,
            "key.parsed_declaration" : "var outputSize = 0",
            "key.parsed_scope.end" : 1789,
            "key.parsed_scope.start" : 1789,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main3zip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size10zippedData0mnL0SbSV_SiSvSpySiGtF06outputL0L_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>var availableOutputSize: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>availableOutputSize<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 43,
            "key.line" : 1790,
            "key.modulename" : "main",
            "key.name" : "availableOutputSize",
            "key.namelength" : 19,
            "key.nameoffset" : 69920,
            "key.offset" : 69916,
            "key.parsed_declaration" : "var availableOutputSize = zippedDataSize[0]",
            "key.parsed_scope.end" : 1790,
            "key.parsed_scope.start" : 1790,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main3zip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size10zippedData0mnL0SbSV_SiSvSpySiGtF015availableOutputL0L_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>var flush: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>flush<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 22,
            "key.line" : 1791,
            "key.modulename" : "main",
            "key.name" : "flush",
            "key.namelength" : 5,
            "key.nameoffset" : 69968,
            "key.offset" : 69964,
            "key.parsed_declaration" : "var flush = Z_NO_FLUSH",
            "key.parsed_scope.end" : 1791,
            "key.parsed_scope.start" : 1791,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main3zip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size10zippedData0mnL0SbSV_SiSvSpySiGtF5flushL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var nextIn: <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s5UInt8V\">UInt8<\/Type>&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>nextIn<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5UInt8V\">UInt8<\/ref.struct>&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 92,
            "key.line" : 1792,
            "key.modulename" : "main",
            "key.name" : "nextIn",
            "key.namelength" : 6,
            "key.nameoffset" : 69995,
            "key.offset" : 69991,
            "key.parsed_declaration" : "var nextIn = UnsafeMutablePointer<UInt8>(mutating: data.assumingMemoryBound(to: UInt8.self))",
            "key.parsed_scope.end" : 1792,
            "key.parsed_scope.start" : 1792,
            "key.typename" : "UnsafeMutablePointer<UInt8>",
            "key.typeusr" : "$sSpys5UInt8VGD",
            "key.usr" : "s:4main3zip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size10zippedData0mnL0SbSV_SiSvSpySiGtF6nextInL_Spys5UInt8VGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var nextOut: <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s5UInt8V\">UInt8<\/Type>&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>nextOut<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5UInt8V\">UInt8<\/ref.struct>&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 60,
            "key.line" : 1793,
            "key.modulename" : "main",
            "key.name" : "nextOut",
            "key.namelength" : 7,
            "key.nameoffset" : 70092,
            "key.offset" : 70088,
            "key.parsed_declaration" : "var nextOut = zippedData.assumingMemoryBound(to: UInt8.self)",
            "key.parsed_scope.end" : 1793,
            "key.parsed_scope.start" : 1793,
            "key.typename" : "UnsafeMutablePointer<UInt8>",
            "key.typeusr" : "$sSpys5UInt8VGD",
            "key.usr" : "s:4main3zip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size10zippedData0mnL0SbSV_SiSvSpySiGtF7nextOutL_Spys5UInt8VGvp"
          }
        ],
        "key.typename" : "(UnsafeRawPointer, Int, UnsafeMutableRawPointer, UnsafeMutablePointer<Int>) -> Bool",
        "key.typeusr" : "$s4data0A4Size10zippedData0cdB0SbSV_SiSvSpySiGtcD",
        "key.usr" : "s:4main3zip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size10zippedData0mnL0SbSV_SiSvSpySiGtF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private func unzip(data: <Type usr=\"s:SV\">UnsafeRawPointer<\/Type>, dataSize: <Type usr=\"s:Si\">Int<\/Type>, unzippedData: <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>, unzippedDataSize: <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 71075
          }
        ],
        "key.bodylength" : 1532,
        "key.bodyoffset" : 71238,
        "key.column" : 16,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>unzip<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>data<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dataSize<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>unzippedData<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>unzippedDataSize<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 1688,
        "key.line" : 1816,
        "key.modulename" : "main",
        "key.name" : "unzip(data:dataSize:unzippedData:unzippedDataSize:)",
        "key.namelength" : 140,
        "key.nameoffset" : 71088,
        "key.offset" : 71083,
        "key.parsed_declaration" : "private func unzip(\n  data: UnsafeRawPointer, dataSize: Int, unzippedData: UnsafeMutableRawPointer,\n  unzippedDataSize: UnsafeMutablePointer<Int>\n) -> Bool",
        "key.parsed_scope.end" : 1852,
        "key.parsed_scope.start" : 1816,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>var stream: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>stream<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 23,
            "key.line" : 1820,
            "key.modulename" : "main",
            "key.name" : "stream",
            "key.namelength" : 6,
            "key.nameoffset" : 71247,
            "key.offset" : 71243,
            "key.parsed_declaration" : "var stream = z_stream()",
            "key.parsed_scope.end" : 1820,
            "key.parsed_scope.start" : 1820,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main5unzip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size12unzippedData0mnL0SbSV_SiSvSpySiGtF6streamL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let streamSize: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>streamSize<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 51,
            "key.line" : 1821,
            "key.modulename" : "main",
            "key.name" : "streamSize",
            "key.namelength" : 10,
            "key.nameoffset" : 71275,
            "key.offset" : 71271,
            "key.parsed_declaration" : "let streamSize = Int32(MemoryLayout<z_stream>.size)",
            "key.parsed_scope.end" : 1821,
            "key.parsed_scope.start" : 1821,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main5unzip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size12unzippedData0mnL0SbSV_SiSvSpySiGtF06streamL0L_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var result: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>result<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 73,
            "key.line" : 1822,
            "key.modulename" : "main",
            "key.name" : "result",
            "key.namelength" : 6,
            "key.nameoffset" : 71331,
            "key.offset" : 71327,
            "key.parsed_declaration" : "var result = inflateInit2_(&stream, -MAX_WBITS, ZLIB_VERSION, streamSize)",
            "key.parsed_scope.end" : 1822,
            "key.parsed_scope.start" : 1822,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main5unzip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size12unzippedData0mnL0SbSV_SiSvSpySiGtF6resultL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let chunkSize: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>chunkSize<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 27,
            "key.line" : 1825,
            "key.modulename" : "main",
            "key.name" : "chunkSize",
            "key.namelength" : 9,
            "key.nameoffset" : 71490,
            "key.offset" : 71486,
            "key.parsed_declaration" : "let chunkSize = 0x8000_0000",
            "key.parsed_scope.end" : 1825,
            "key.parsed_scope.start" : 1825,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main5unzip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size12unzippedData0mnL0SbSV_SiSvSpySiGtF05chunkL0L_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>var availableSize: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>availableSize<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 28,
            "key.line" : 1826,
            "key.modulename" : "main",
            "key.name" : "availableSize",
            "key.namelength" : 13,
            "key.nameoffset" : 71522,
            "key.offset" : 71518,
            "key.parsed_declaration" : "var availableSize = dataSize",
            "key.parsed_scope.end" : 1826,
            "key.parsed_scope.start" : 1826,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main5unzip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size12unzippedData0mnL0SbSV_SiSvSpySiGtF09availableL0L_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>var outputSize: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>outputSize<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 18,
            "key.line" : 1827,
            "key.modulename" : "main",
            "key.name" : "outputSize",
            "key.namelength" : 10,
            "key.nameoffset" : 71555,
            "key.offset" : 71551,
            "key.parsed_declaration" : "var outputSize = 0",
            "key.parsed_scope.end" : 1827,
            "key.parsed_scope.start" : 1827,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main5unzip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size12unzippedData0mnL0SbSV_SiSvSpySiGtF06outputL0L_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>var availableOutputSize: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>availableOutputSize<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 45,
            "key.line" : 1828,
            "key.modulename" : "main",
            "key.name" : "availableOutputSize",
            "key.namelength" : 19,
            "key.nameoffset" : 71578,
            "key.offset" : 71574,
            "key.parsed_declaration" : "var availableOutputSize = unzippedDataSize[0]",
            "key.parsed_scope.end" : 1828,
            "key.parsed_scope.start" : 1828,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main5unzip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size12unzippedData0mnL0SbSV_SiSvSpySiGtF015availableOutputL0L_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>var nextIn: <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s5UInt8V\">UInt8<\/Type>&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>nextIn<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5UInt8V\">UInt8<\/ref.struct>&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 92,
            "key.line" : 1829,
            "key.modulename" : "main",
            "key.name" : "nextIn",
            "key.namelength" : 6,
            "key.nameoffset" : 71628,
            "key.offset" : 71624,
            "key.parsed_declaration" : "var nextIn = UnsafeMutablePointer<UInt8>(mutating: data.assumingMemoryBound(to: UInt8.self))",
            "key.parsed_scope.end" : 1829,
            "key.parsed_scope.start" : 1829,
            "key.typename" : "UnsafeMutablePointer<UInt8>",
            "key.typeusr" : "$sSpys5UInt8VGD",
            "key.usr" : "s:4main5unzip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size12unzippedData0mnL0SbSV_SiSvSpySiGtF6nextInL_Spys5UInt8VGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var nextOut: <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s5UInt8V\">UInt8<\/Type>&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>nextOut<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5UInt8V\">UInt8<\/ref.struct>&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 62,
            "key.line" : 1830,
            "key.modulename" : "main",
            "key.name" : "nextOut",
            "key.namelength" : 7,
            "key.nameoffset" : 71725,
            "key.offset" : 71721,
            "key.parsed_declaration" : "var nextOut = unzippedData.assumingMemoryBound(to: UInt8.self)",
            "key.parsed_scope.end" : 1830,
            "key.parsed_scope.start" : 1830,
            "key.typename" : "UnsafeMutablePointer<UInt8>",
            "key.typeusr" : "$sSpys5UInt8VGD",
            "key.usr" : "s:4main5unzip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size12unzippedData0mnL0SbSV_SiSvSpySiGtF7nextOutL_Spys5UInt8VGvp"
          }
        ],
        "key.typename" : "(UnsafeRawPointer, Int, UnsafeMutableRawPointer, UnsafeMutablePointer<Int>) -> Bool",
        "key.typeusr" : "$s4data0A4Size12unzippedData0cdB0SbSV_SiSvSpySiGtcD",
        "key.usr" : "s:4main5unzip33_FB88E2357CC5890C59B91A970B0C008ELL4data0K4Size12unzippedData0mnL0SbSV_SiSvSpySiGtF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q4pAndEzm7Encode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 72780
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q4pAndEzm7Encode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 646,
        "key.line" : 1855,
        "key.modulename" : "main",
        "key.name" : "q4pAndEzm7Encode",
        "key.namelength" : 16,
        "key.nameoffset" : 72792,
        "key.offset" : 72788,
        "key.parsed_declaration" : "private let q4pAndEzm7Encode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize, identifier\n    in\n    guard\n      q4pEncode(\n        data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n        identifier) == 0\n    else { return 1 }\n    return ezm7Encode(\n      data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n      identifier)\n  }",
        "key.parsed_scope.end" : 1855,
        "key.parsed_scope.start" : 1855,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main16q4pAndEzm7Encode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q5pAndEzm7Encode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 73436
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q5pAndEzm7Encode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 646,
        "key.line" : 1872,
        "key.modulename" : "main",
        "key.name" : "q5pAndEzm7Encode",
        "key.namelength" : 16,
        "key.nameoffset" : 73448,
        "key.offset" : 73444,
        "key.parsed_declaration" : "private let q5pAndEzm7Encode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize, identifier\n    in\n    guard\n      q5pEncode(\n        data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n        identifier) == 0\n    else { return 1 }\n    return ezm7Encode(\n      data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n      identifier)\n  }",
        "key.parsed_scope.end" : 1872,
        "key.parsed_scope.start" : 1872,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main16q5pAndEzm7Encode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q6pAndEzm7Encode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 74092
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q6pAndEzm7Encode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 646,
        "key.line" : 1889,
        "key.modulename" : "main",
        "key.name" : "q6pAndEzm7Encode",
        "key.namelength" : 16,
        "key.nameoffset" : 74104,
        "key.offset" : 74100,
        "key.parsed_declaration" : "private let q6pAndEzm7Encode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize, identifier\n    in\n    guard\n      q6pEncode(\n        data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n        identifier) == 0\n    else { return 1 }\n    return ezm7Encode(\n      data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n      identifier)\n  }",
        "key.parsed_scope.end" : 1889,
        "key.parsed_scope.start" : 1889,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main16q6pAndEzm7Encode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q7pAndEzm7Encode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 74748
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q7pAndEzm7Encode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 646,
        "key.line" : 1906,
        "key.modulename" : "main",
        "key.name" : "q7pAndEzm7Encode",
        "key.namelength" : 16,
        "key.nameoffset" : 74760,
        "key.offset" : 74756,
        "key.parsed_declaration" : "private let q7pAndEzm7Encode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize, identifier\n    in\n    guard\n      q7pEncode(\n        data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n        identifier) == 0\n    else { return 1 }\n    return ezm7Encode(\n      data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n      identifier)\n  }",
        "key.parsed_scope.end" : 1906,
        "key.parsed_scope.start" : 1906,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main16q7pAndEzm7Encode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q8pAndEzm7Encode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 75404
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q8pAndEzm7Encode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 646,
        "key.line" : 1923,
        "key.modulename" : "main",
        "key.name" : "q8pAndEzm7Encode",
        "key.namelength" : 16,
        "key.nameoffset" : 75416,
        "key.offset" : 75412,
        "key.parsed_declaration" : "private let q8pAndEzm7Encode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize, identifier\n    in\n    guard\n      q8pEncode(\n        data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n        identifier) == 0\n    else { return 1 }\n    return ezm7Encode(\n      data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n      identifier)\n  }",
        "key.parsed_scope.end" : 1923,
        "key.parsed_scope.start" : 1923,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main16q8pAndEzm7Encode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let fpzipAndZipEncode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 76060
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fpzipAndZipEncode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 755,
        "key.line" : 1940,
        "key.modulename" : "main",
        "key.name" : "fpzipAndZipEncode",
        "key.namelength" : 17,
        "key.nameoffset" : 76072,
        "key.offset" : 76068,
        "key.parsed_declaration" : "private let fpzipAndZipEncode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize, identifier\n    in\n    \/\/ Floating point to use fpzip\n    if dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F) {\n      return fpzipEncode(\n        data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n        identifier)\n    }\n    return zipEncode(\n      data, dataSize, dataType, dimensions, dimensionCount, context, encoded, encodedSize,\n      identifier)\n  }",
        "key.parsed_scope.end" : 1940,
        "key.parsed_scope.start" : 1940,
        "key.typename" : "@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32",
        "key.typeusr" : "$sys5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCD",
        "key.usr" : "s:4main17fpzipAndZipEncode33_FB88E2357CC5890C59B91A970B0C008ELLys5Int32VSVSg_SiAESPyAEGSgAESvSgAISpySiGSgSpys6UInt32VGSgtXCvp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q4pDecodeJit: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 76825
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q4pDecodeJit<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 2276,
        "key.line" : 1958,
        "key.modulename" : "main",
        "key.name" : "q4pDecodeJit",
        "key.namelength" : 12,
        "key.nameoffset" : 76837,
        "key.offset" : 76833,
        "key.parsed_declaration" : "private let q4pDecodeJit:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard identifier == 0x8a1e4b else { return 0 }\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    guard var data = data, let dimensions = dimensions, let decodedSize = decodedSize,\n      dimensionCount > 0\n    else { return 0 }\n    guard dataSize > MemoryLayout<UInt32>.size else { return 0 }\n    let blockSize = Int(data.load(as: UInt32.self))\n    guard tensorOut!.pointee == nil else {\n      return q4pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    guard\n      TensorShape(dims: params.dim).reduce(1, *) == numberOfElements\n        && (numberOfElements % blockSize) == 0\n    else {\n      return q4pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    let palettizeParams = ccv_nnc_tensor_palettize(params, 4, Int32(blockSize))\n    let decodedDataSize = ccv_nnc_tensor_data_size_without_padding(palettizeParams)\n    guard\n      dataSize >= MemoryLayout<UInt32>.size + decodedDataSize && decodedSize[0] >= decodedDataSize\n    else {\n      return q4pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    tensorOut!.pointee = ccv_nnc_tensor_new(nil, palettizeParams, 0)\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    let decoded = decoded ?? tensorData!\n    data += MemoryLayout<UInt32>.size\n    memcpy(decoded, data, decodedDataSize)\n    decodedSize[0] = decodedDataSize\n    return 1\n  }",
        "key.parsed_scope.end" : 1958,
        "key.parsed_scope.start" : 1958,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main12q4pDecodeJit33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q5pDecodeJit: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 79111
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q5pDecodeJit<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 2276,
        "key.line" : 2010,
        "key.modulename" : "main",
        "key.name" : "q5pDecodeJit",
        "key.namelength" : 12,
        "key.nameoffset" : 79123,
        "key.offset" : 79119,
        "key.parsed_declaration" : "private let q5pDecodeJit:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard identifier == 0x8a1e5b else { return 0 }\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    guard var data = data, let dimensions = dimensions, let decodedSize = decodedSize,\n      dimensionCount > 0\n    else { return 0 }\n    guard dataSize > MemoryLayout<UInt32>.size else { return 0 }\n    let blockSize = Int(data.load(as: UInt32.self))\n    guard tensorOut!.pointee == nil else {\n      return q5pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    guard\n      TensorShape(dims: params.dim).reduce(1, *) == numberOfElements\n        && (numberOfElements % blockSize) == 0\n    else {\n      return q5pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    let palettizeParams = ccv_nnc_tensor_palettize(params, 5, Int32(blockSize))\n    let decodedDataSize = ccv_nnc_tensor_data_size_without_padding(palettizeParams)\n    guard\n      dataSize >= MemoryLayout<UInt32>.size + decodedDataSize && decodedSize[0] >= decodedDataSize\n    else {\n      return q5pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    tensorOut!.pointee = ccv_nnc_tensor_new(nil, palettizeParams, 0)\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    let decoded = decoded ?? tensorData!\n    data += MemoryLayout<UInt32>.size\n    memcpy(decoded, data, decodedDataSize)\n    decodedSize[0] = decodedDataSize\n    return 1\n  }",
        "key.parsed_scope.end" : 2010,
        "key.parsed_scope.start" : 2010,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main12q5pDecodeJit33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q6pDecodeJit: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 81397
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q6pDecodeJit<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 2276,
        "key.line" : 2062,
        "key.modulename" : "main",
        "key.name" : "q6pDecodeJit",
        "key.namelength" : 12,
        "key.nameoffset" : 81409,
        "key.offset" : 81405,
        "key.parsed_declaration" : "private let q6pDecodeJit:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard identifier == 0x8a1e6b else { return 0 }\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    guard var data = data, let dimensions = dimensions, let decodedSize = decodedSize,\n      dimensionCount > 0\n    else { return 0 }\n    guard dataSize > MemoryLayout<UInt32>.size else { return 0 }\n    let blockSize = Int(data.load(as: UInt32.self))\n    guard tensorOut!.pointee == nil else {\n      return q6pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    guard\n      TensorShape(dims: params.dim).reduce(1, *) == numberOfElements\n        && (numberOfElements % blockSize) == 0\n    else {\n      return q6pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    let palettizeParams = ccv_nnc_tensor_palettize(params, 6, Int32(blockSize))\n    let decodedDataSize = ccv_nnc_tensor_data_size_without_padding(palettizeParams)\n    guard\n      dataSize >= MemoryLayout<UInt32>.size + decodedDataSize && decodedSize[0] >= decodedDataSize\n    else {\n      return q6pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    tensorOut!.pointee = ccv_nnc_tensor_new(nil, palettizeParams, 0)\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    let decoded = decoded ?? tensorData!\n    data += MemoryLayout<UInt32>.size\n    memcpy(decoded, data, decodedDataSize)\n    decodedSize[0] = decodedDataSize\n    return 1\n  }",
        "key.parsed_scope.end" : 2062,
        "key.parsed_scope.start" : 2062,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main12q6pDecodeJit33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q7pDecodeJit: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 83683
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q7pDecodeJit<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 2276,
        "key.line" : 2114,
        "key.modulename" : "main",
        "key.name" : "q7pDecodeJit",
        "key.namelength" : 12,
        "key.nameoffset" : 83695,
        "key.offset" : 83691,
        "key.parsed_declaration" : "private let q7pDecodeJit:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard identifier == 0x8a1e7b else { return 0 }\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    guard var data = data, let dimensions = dimensions, let decodedSize = decodedSize,\n      dimensionCount > 0\n    else { return 0 }\n    guard dataSize > MemoryLayout<UInt32>.size else { return 0 }\n    let blockSize = Int(data.load(as: UInt32.self))\n    guard tensorOut!.pointee == nil else {\n      return q7pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    guard\n      TensorShape(dims: params.dim).reduce(1, *) == numberOfElements\n        && (numberOfElements % blockSize) == 0\n    else {\n      return q7pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    let palettizeParams = ccv_nnc_tensor_palettize(params, 7, Int32(blockSize))\n    let decodedDataSize = ccv_nnc_tensor_data_size_without_padding(palettizeParams)\n    guard\n      dataSize >= MemoryLayout<UInt32>.size + decodedDataSize && decodedSize[0] >= decodedDataSize\n    else {\n      return q7pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    tensorOut!.pointee = ccv_nnc_tensor_new(nil, palettizeParams, 0)\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    let decoded = decoded ?? tensorData!\n    data += MemoryLayout<UInt32>.size\n    memcpy(decoded, data, decodedDataSize)\n    decodedSize[0] = decodedDataSize\n    return 1\n  }",
        "key.parsed_scope.end" : 2114,
        "key.parsed_scope.start" : 2114,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main12q7pDecodeJit33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let q8pDecodeJit: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 85969
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q8pDecodeJit<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 2276,
        "key.line" : 2166,
        "key.modulename" : "main",
        "key.name" : "q8pDecodeJit",
        "key.namelength" : 12,
        "key.nameoffset" : 85981,
        "key.offset" : 85977,
        "key.parsed_declaration" : "private let q8pDecodeJit:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    guard identifier == 0x8a1e8b else { return 0 }\n    guard dataType == Int32(CCV_64F) || dataType == Int32(CCV_32F) || dataType == Int32(CCV_16F)\n    else { return 0 }\n    guard var data = data, let dimensions = dimensions, let decodedSize = decodedSize,\n      dimensionCount > 0\n    else { return 0 }\n    guard dataSize > MemoryLayout<UInt32>.size else { return 0 }\n    let blockSize = Int(data.load(as: UInt32.self))\n    guard tensorOut!.pointee == nil else {\n      return q8pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    var numberOfElements = Int(dimensions[0])\n    for i in 1..<Int(dimensionCount) {\n      numberOfElements *= Int(dimensions[i])\n    }\n    guard\n      TensorShape(dims: params.dim).reduce(1, *) == numberOfElements\n        && (numberOfElements % blockSize) == 0\n    else {\n      return q8pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    let palettizeParams = ccv_nnc_tensor_palettize(params, 8, Int32(blockSize))\n    let decodedDataSize = ccv_nnc_tensor_data_size_without_padding(palettizeParams)\n    guard\n      dataSize >= MemoryLayout<UInt32>.size + decodedDataSize && decodedSize[0] >= decodedDataSize\n    else {\n      return q8pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    }\n    tensorOut!.pointee = ccv_nnc_tensor_new(nil, palettizeParams, 0)\n    let tensorData = tensorOut?.pointee?.pointee.data.u8.map { UnsafeMutableRawPointer($0) }\n    let decoded = decoded ?? tensorData!\n    data += MemoryLayout<UInt32>.size\n    memcpy(decoded, data, decodedDataSize)\n    decodedSize[0] = decodedDataSize\n    return 1\n  }",
        "key.parsed_scope.end" : 2166,
        "key.parsed_scope.start" : 2166,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main12q8pDecodeJit33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let uDecodeJit: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 88255
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>uDecodeJit<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 1902,
        "key.line" : 2218,
        "key.modulename" : "main",
        "key.name" : "uDecodeJit",
        "key.namelength" : 10,
        "key.nameoffset" : 88267,
        "key.offset" : 88263,
        "key.parsed_declaration" : "private let uDecodeJit:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    switch identifier {\n    case 0xf7217:\n      return fpzipDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x217:\n      return zipDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x511:\n      return ezm7Decode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x8a1e4b:\n      return q4pDecodeJit(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x8a1e5b:\n      return q5pDecodeJit(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x8a1e6b:\n      return q6pDecodeJit(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x8a1e7b:\n      return q7pDecodeJit(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x8a1e8b:\n      return q8pDecodeJit(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    default:\n      return 0\n    }\n  }",
        "key.parsed_scope.end" : 2218,
        "key.parsed_scope.start" : 2218,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main10uDecodeJit33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let uDecode: @convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 90167
          }
        ],
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>uDecode<\/decl.name>: <decl.var.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 1884,
        "key.line" : 2265,
        "key.modulename" : "main",
        "key.name" : "uDecode",
        "key.namelength" : 7,
        "key.nameoffset" : 90179,
        "key.offset" : 90175,
        "key.parsed_declaration" : "private let uDecode:\n  @convention(c) (\n    UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32, UnsafeMutableRawPointer?,\n    ccv_nnc_tensor_param_t, UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n    UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n  ) -> Int32 = {\n    data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params, tensorOut,\n    decoded, decodedSize\n    in\n    switch identifier {\n    case 0xf7217:\n      return fpzipDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x217:\n      return zipDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x511:\n      return ezm7Decode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x8a1e4b:\n      return q4pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x8a1e5b:\n      return q5pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x8a1e6b:\n      return q6pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x8a1e7b:\n      return q7pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    case 0x8a1e8b:\n      return q8pDecode(\n        data, dataSize, dataType, dimensions, dimensionCount, identifier, context, params,\n        tensorOut, decoded, decodedSize)\n    default:\n      return 0\n    }\n  }",
        "key.parsed_scope.end" : 2265,
        "key.parsed_scope.start" : 2265,
        "key.typename" : "<<error type>>",
        "key.typeusr" : "$sXeD",
        "key.usr" : "s:4main7uDecode33_FB88E2357CC5890C59B91A970B0C008ELLXevp"
      },
      {
        "key.annotated_decl" : "<Declaration>public final class DynamicGraph<\/Declaration>",
        "key.bodylength" : 21927,
        "key.bodyoffset" : 92085,
        "key.column" : 20,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 20,
        "key.doc.declaration" : "public final class DynamicGraph",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/DynamicGraph.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/DynamicGraph.swift\" line=\"5\" column=\"20\"><Name>DynamicGraph<\/Name><USR>s:4main12DynamicGraphC<\/USR><Declaration>public final class DynamicGraph<\/Declaration><CommentParts><Abstract><Para>A dynamic graph is a workspace for computations. All tensor variables can be tracked from a dynamic graph.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 5,
        "key.doc.name" : "DynamicGraph",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/DynamicGraph.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>DynamicGraph<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 21952,
        "key.line" : 5,
        "key.modulename" : "main",
        "key.name" : "DynamicGraph",
        "key.namelength" : 12,
        "key.nameoffset" : 92071,
        "key.offset" : 92061,
        "key.parsed_declaration" : "extension DynamicGraph",
        "key.parsed_scope.end" : 2895,
        "key.parsed_scope.start" : 2312,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>final class _Store<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.final",
                "key.length" : 5,
                "key.offset" : 92089
              }
            ],
            "key.bodylength" : 618,
            "key.bodyoffset" : 92109,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>_Store<\/decl.name><\/decl.class>",
            "key.kind" : "source.lang.swift.decl.class",
            "key.length" : 633,
            "key.line" : 2314,
            "key.modulename" : "main",
            "key.name" : "_Store",
            "key.namelength" : 6,
            "key.nameoffset" : 92101,
            "key.offset" : 92095,
            "key.parsed_declaration" : "final class _Store",
            "key.parsed_scope.end" : 2329,
            "key.parsed_scope.start" : 2314,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.internal",
                "key.annotated_decl" : "<Declaration>let sqlite: <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>sqlite<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
                "key.kind" : "source.lang.swift.decl.var.instance",
                "key.length" : 35,
                "key.line" : 2315,
                "key.modulename" : "main",
                "key.name" : "sqlite",
                "key.namelength" : 6,
                "key.nameoffset" : 92118,
                "key.offset" : 92114,
                "key.parsed_declaration" : "let sqlite: UnsafeMutableRawPointer",
                "key.parsed_scope.end" : 2315,
                "key.parsed_scope.start" : 2315,
                "key.typename" : "UnsafeMutableRawPointer",
                "key.typeusr" : "$sSvD",
                "key.usr" : "s:4main12DynamicGraphC6_StoreC6sqliteSvvp"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.internal",
                "key.annotated_decl" : "<Declaration>let flags: <Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV8OpenFlagV\">OpenFlag<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>flags<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV8OpenFlagV\">OpenFlag<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
                "key.kind" : "source.lang.swift.decl.var.instance",
                "key.length" : 25,
                "key.line" : 2316,
                "key.modulename" : "main",
                "key.name" : "flags",
                "key.namelength" : 5,
                "key.nameoffset" : 92158,
                "key.offset" : 92154,
                "key.parsed_declaration" : "let flags: Store.OpenFlag",
                "key.parsed_scope.end" : 2316,
                "key.parsed_scope.start" : 2316,
                "key.typename" : "DynamicGraph.Store.OpenFlag",
                "key.typeusr" : "$s4main12DynamicGraphC5StoreV8OpenFlagVD",
                "key.usr" : "s:4main12DynamicGraphC6_StoreC5flagsAC0D0V8OpenFlagVvp"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.internal",
                "key.annotated_decl" : "<Declaration>init(sqlite: <Type usr=\"s:s13OpaquePointerV\">OpaquePointer<\/Type>, flags: <Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV8OpenFlagV\">OpenFlag<\/Type>)<\/Declaration>",
                "key.bodylength" : 82,
                "key.bodyoffset" : 92236,
                "key.column" : 5,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>sqlite<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:s13OpaquePointerV\">OpaquePointer<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV8OpenFlagV\">OpenFlag<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 135,
                "key.line" : 2317,
                "key.modulename" : "main",
                "key.name" : "init(sqlite:flags:)",
                "key.namelength" : 50,
                "key.nameoffset" : 92184,
                "key.offset" : 92184,
                "key.parsed_declaration" : "init(sqlite: OpaquePointer, flags: Store.OpenFlag)",
                "key.parsed_scope.end" : 2320,
                "key.parsed_scope.start" : 2317,
                "key.substructure" : [

                ],
                "key.typename" : "(DynamicGraph._Store.Type) -> (OpaquePointer, DynamicGraph.Store.OpenFlag) -> DynamicGraph._Store",
                "key.typeusr" : "$s6sqlite5flags4main12DynamicGraphC6_StoreCs13OpaquePointerV_AE0F0V8OpenFlagVtcD",
                "key.usr" : "s:4main12DynamicGraphC6_StoreC6sqlite5flagsAEs13OpaquePointerV_AC0D0V8OpenFlagVtcfc"
              },
              {
                "key.annotated_decl" : "<Declaration>deinit<\/Declaration>",
                "key.bodylength" : 391,
                "key.bodyoffset" : 92332,
                "key.column" : 5,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.destructor><syntaxtype.keyword>deinit<\/syntaxtype.keyword><\/decl.function.destructor>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 400,
                "key.line" : 2321,
                "key.modulename" : "main",
                "key.name" : "deinit",
                "key.namelength" : 6,
                "key.nameoffset" : 92324,
                "key.offset" : 92324,
                "key.parsed_declaration" : "deinit",
                "key.parsed_scope.end" : 2328,
                "key.parsed_scope.start" : 2321,
                "key.substructure" : [

                ],
                "key.typename" : "(DynamicGraph._Store) -> () -> ()",
                "key.typeusr" : "$syycD",
                "key.usr" : "s:4main12DynamicGraphC6_StoreCfd"
              }
            ],
            "key.typename" : "DynamicGraph._Store.Type",
            "key.typeusr" : "$s4main12DynamicGraphC6_StoreCmD",
            "key.usr" : "s:4main12DynamicGraphC6_StoreC"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public struct Store<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 92784
              }
            ],
            "key.bodylength" : 19828,
            "key.bodyoffset" : 92805,
            "key.column" : 17,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 17,
            "key.doc.comment" : "A key-value based parameter store.",
            "key.doc.declaration" : "public struct Store",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2334\" column=\"17\"><Name>Store<\/Name><USR>s:4main12DynamicGraphC5StoreV<\/USR><Declaration>public struct Store<\/Declaration><CommentParts><Abstract><Para>A key-value based parameter store.<\/Para><\/Abstract><\/CommentParts><\/Class>",
            "key.doc.line" : 2334,
            "key.doc.name" : "Store",
            "key.doc.type" : "Class",
            "key.doclength" : 49,
            "key.docoffset" : 92732,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Store<\/decl.name><\/decl.struct>",
            "key.kind" : "source.lang.swift.decl.struct",
            "key.length" : 19843,
            "key.line" : 2334,
            "key.modulename" : "main",
            "key.name" : "Store",
            "key.namelength" : 5,
            "key.nameoffset" : 92798,
            "key.offset" : 92791,
            "key.parsed_declaration" : "public struct Store",
            "key.parsed_scope.end" : 2859,
            "key.parsed_scope.start" : 2334,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public struct <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.OpenFlag : <Type usr=\"s:s9OptionSetP\">OptionSet<\/Type><\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 92810
                  }
                ],
                "key.bodylength" : 245,
                "key.bodyoffset" : 92845,
                "key.column" : 19,
                "key.decl_lang" : "source.lang.swift",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 9,
                    "key.offset" : 92834
                  }
                ],
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<decl.name>OpenFlag<\/decl.name> : <ref.protocol usr=\"s:s9OptionSetP\">OptionSet<\/ref.protocol><\/decl.struct>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "OptionSet"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.struct",
                "key.length" : 274,
                "key.line" : 2335,
                "key.modulename" : "main",
                "key.name" : "OpenFlag",
                "key.namelength" : 8,
                "key.nameoffset" : 92824,
                "key.offset" : 92817,
                "key.parsed_declaration" : "public struct OpenFlag: OptionSet",
                "key.parsed_scope.end" : 2342,
                "key.parsed_scope.start" : 2335,
                "key.substructure" : [
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public let rawValue: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 92852
                      }
                    ],
                    "key.column" : 18,
                    "key.decl_lang" : "source.lang.swift",
                    "key.doc.declaration" : "var rawValue: Self.RawValue { get }",
                    "key.doc.discussion" : [
                      {
                        "Para" : "A new instance initialized with `rawValue` will be equivalent to this instance. For example:"
                      },
                      {
                        "CodeListing" : ""
                      },
                      {
                        "Note" : ""
                      }
                    ],
                    "key.doc.full_as_xml" : "<Other><Name>rawValue<\/Name><USR>s:SY8rawValue03RawB0Qzvp<\/USR><Declaration>var rawValue: Self.RawValue { get }<\/Declaration><CommentParts><Abstract><Para>The corresponding value of the raw type.<\/Para><\/Abstract><Discussion><Para>A new instance initialized with <codeVoice>rawValue<\/codeVoice> will be equivalent to this instance. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[enum PaperSize: String {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    case A4, A5, Letter, Legal]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let selectedSize = PaperSize.Letter]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(selectedSize.rawValue)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Letter\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"true\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Note><Para>This documentation comment was inherited from <codeVoice>RawRepresentable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
                    "key.doc.name" : "rawValue",
                    "key.doc.type" : "Other",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>rawValue<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
                    "key.kind" : "source.lang.swift.decl.var.instance",
                    "key.length" : 17,
                    "key.line" : 2336,
                    "key.modulename" : "main",
                    "key.name" : "rawValue",
                    "key.namelength" : 8,
                    "key.nameoffset" : 92863,
                    "key.offset" : 92859,
                    "key.overrides" : [
                      {
                        "key.usr" : "s:SY8rawValue03RawB0Qzvp"
                      }
                    ],
                    "key.parsed_declaration" : "public let rawValue: Int",
                    "key.parsed_scope.end" : 2336,
                    "key.parsed_scope.start" : 2336,
                    "key.typename" : "Int",
                    "key.typeusr" : "$sSiD",
                    "key.usr" : "s:SY8rawValue03RawB0Qzvp"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public init(rawValue: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 92883
                      }
                    ],
                    "key.bodylength" : 40,
                    "key.bodyoffset" : 92911,
                    "key.column" : 14,
                    "key.decl_lang" : "source.lang.swift",
                    "key.doc.declaration" : "init(rawValue: Self.RawValue)",
                    "key.doc.discussion" : [
                      {
                        "Para" : "This initializer always succeeds, even if the value passed as `rawValue` exceeds the static properties declared as part of the option set. This example creates an instance of `ShippingOptions` with a raw value beyond the highest element, with a bit mask that effectively contains all the declared static members."
                      },
                      {
                        "CodeListing" : ""
                      },
                      {
                        "Note" : ""
                      }
                    ],
                    "key.doc.full_as_xml" : "<Function><Name>init(rawValue:)<\/Name><USR>s:s9OptionSetP8rawValuex03RawD0Qz_tcfc<\/USR><Declaration>init(rawValue: Self.RawValue)<\/Declaration><CommentParts><Abstract><Para>Creates a new option set from the given raw value.<\/Para><\/Abstract><Parameters><Parameter><Name>rawValue<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The raw value of the option set to create. Each bit of <codeVoice>rawValue<\/codeVoice> potentially represents an element of the option set, though raw values may include bits that are not defined as distinct values of the <codeVoice>OptionSet<\/codeVoice> type.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>This initializer always succeeds, even if the value passed as <codeVoice>rawValue<\/codeVoice> exceeds the static properties declared as part of the option set. This example creates an instance of <codeVoice>ShippingOptions<\/codeVoice> with a raw value beyond the highest element, with a bit mask that effectively contains all the declared static members.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let extraOptions = ShippingOptions(rawValue: 255)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(extraOptions.isStrictSuperset(of: .all))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"true\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Note><Para>This documentation comment was inherited from <codeVoice>OptionSet<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
                    "key.doc.name" : "init(rawValue:)",
                    "key.doc.parameters" : [
                      {
                        "discussion" : [
                          {
                            "Para" : "The raw value of the option set to create. Each bit of `rawValue` potentially represents an element of the option set, though raw values may include bits that are not defined as distinct values of the `OptionSet` type."
                          }
                        ],
                        "name" : "rawValue"
                      }
                    ],
                    "key.doc.type" : "Function",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>rawValue<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
                    "key.kind" : "source.lang.swift.decl.function.method.instance",
                    "key.length" : 62,
                    "key.line" : 2337,
                    "key.modulename" : "main",
                    "key.name" : "init(rawValue:)",
                    "key.namelength" : 19,
                    "key.nameoffset" : 92890,
                    "key.offset" : 92890,
                    "key.overrides" : [
                      {
                        "key.usr" : "s:s9OptionSetP8rawValuex03RawD0Qz_tcfc"
                      },
                      {
                        "key.usr" : "s:SY8rawValuexSg03RawB0Qz_tcfc"
                      }
                    ],
                    "key.parsed_declaration" : "public init(rawValue: Int)",
                    "key.parsed_scope.end" : 2339,
                    "key.parsed_scope.start" : 2337,
                    "key.substructure" : [

                    ],
                    "key.typename" : "(DynamicGraph.Store.OpenFlag.Type) -> (Int) -> DynamicGraph.Store.OpenFlag",
                    "key.typeusr" : "$s8rawValue4main12DynamicGraphC5StoreV8OpenFlagVSi_tcD",
                    "key.usr" : "s:s9OptionSetP8rawValuex03RawD0Qz_tcfc"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public static let truncateWhenClose: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV8OpenFlagV\">OpenFlag<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 92959
                      }
                    ],
                    "key.column" : 25,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>truncateWhenClose<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV8OpenFlagV\">OpenFlag<\/ref.struct><\/decl.var.type><\/decl.var.static>",
                    "key.kind" : "source.lang.swift.decl.var.static",
                    "key.length" : 57,
                    "key.line" : 2340,
                    "key.modulename" : "main",
                    "key.name" : "truncateWhenClose",
                    "key.namelength" : 17,
                    "key.nameoffset" : 92977,
                    "key.offset" : 92966,
                    "key.parsed_declaration" : "public static let truncateWhenClose = OpenFlag(rawValue: 1 << 0)",
                    "key.parsed_scope.end" : 2340,
                    "key.parsed_scope.start" : 2340,
                    "key.typename" : "DynamicGraph.Store.OpenFlag",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV8OpenFlagVD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV8OpenFlagV17truncateWhenCloseAGvpZ"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public static let readOnly: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV8OpenFlagV\">OpenFlag<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 93030
                      }
                    ],
                    "key.column" : 25,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>readOnly<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV8OpenFlagV\">OpenFlag<\/ref.struct><\/decl.var.type><\/decl.var.static>",
                    "key.kind" : "source.lang.swift.decl.var.static",
                    "key.length" : 48,
                    "key.line" : 2341,
                    "key.modulename" : "main",
                    "key.name" : "readOnly",
                    "key.namelength" : 8,
                    "key.nameoffset" : 93048,
                    "key.offset" : 93037,
                    "key.parsed_declaration" : "public static let readOnly = OpenFlag(rawValue: 1 << 1)",
                    "key.parsed_scope.end" : 2341,
                    "key.parsed_scope.start" : 2341,
                    "key.typename" : "DynamicGraph.Store.OpenFlag",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV8OpenFlagVD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV8OpenFlagV8readOnlyAGvpZ"
                  }
                ],
                "key.typename" : "DynamicGraph.Store.OpenFlag.Type",
                "key.typeusr" : "$s4main12DynamicGraphC5StoreV8OpenFlagVmD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV8OpenFlagV"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public struct <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.Codec : <Type usr=\"s:s9OptionSetP\">OptionSet<\/Type><\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 93096
                  }
                ],
                "key.bodylength" : 3901,
                "key.bodyoffset" : 93128,
                "key.column" : 19,
                "key.decl_lang" : "source.lang.swift",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 9,
                    "key.offset" : 93117
                  }
                ],
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<decl.name>Codec<\/decl.name> : <ref.protocol usr=\"s:s9OptionSetP\">OptionSet<\/ref.protocol><\/decl.struct>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "OptionSet"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.struct",
                "key.length" : 3927,
                "key.line" : 2343,
                "key.modulename" : "main",
                "key.name" : "Codec",
                "key.namelength" : 5,
                "key.nameoffset" : 93110,
                "key.offset" : 93103,
                "key.parsed_declaration" : "public struct Codec: OptionSet",
                "key.parsed_scope.end" : 2443,
                "key.parsed_scope.start" : 2343,
                "key.substructure" : [
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public let rawValue: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 93135
                      }
                    ],
                    "key.column" : 18,
                    "key.decl_lang" : "source.lang.swift",
                    "key.doc.declaration" : "var rawValue: Self.RawValue { get }",
                    "key.doc.discussion" : [
                      {
                        "Para" : "A new instance initialized with `rawValue` will be equivalent to this instance. For example:"
                      },
                      {
                        "CodeListing" : ""
                      },
                      {
                        "Note" : ""
                      }
                    ],
                    "key.doc.full_as_xml" : "<Other><Name>rawValue<\/Name><USR>s:SY8rawValue03RawB0Qzvp<\/USR><Declaration>var rawValue: Self.RawValue { get }<\/Declaration><CommentParts><Abstract><Para>The corresponding value of the raw type.<\/Para><\/Abstract><Discussion><Para>A new instance initialized with <codeVoice>rawValue<\/codeVoice> will be equivalent to this instance. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[enum PaperSize: String {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    case A4, A5, Letter, Legal]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let selectedSize = PaperSize.Letter]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(selectedSize.rawValue)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Letter\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"true\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Note><Para>This documentation comment was inherited from <codeVoice>RawRepresentable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
                    "key.doc.name" : "rawValue",
                    "key.doc.type" : "Other",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>rawValue<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
                    "key.kind" : "source.lang.swift.decl.var.instance",
                    "key.length" : 17,
                    "key.line" : 2344,
                    "key.modulename" : "main",
                    "key.name" : "rawValue",
                    "key.namelength" : 8,
                    "key.nameoffset" : 93146,
                    "key.offset" : 93142,
                    "key.overrides" : [
                      {
                        "key.usr" : "s:SY8rawValue03RawB0Qzvp"
                      }
                    ],
                    "key.parsed_declaration" : "public let rawValue: Int",
                    "key.parsed_scope.end" : 2344,
                    "key.parsed_scope.start" : 2344,
                    "key.typename" : "Int",
                    "key.typeusr" : "$sSiD",
                    "key.usr" : "s:SY8rawValue03RawB0Qzvp"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public init(rawValue: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 93166
                      }
                    ],
                    "key.bodylength" : 40,
                    "key.bodyoffset" : 93194,
                    "key.column" : 14,
                    "key.decl_lang" : "source.lang.swift",
                    "key.doc.declaration" : "init(rawValue: Self.RawValue)",
                    "key.doc.discussion" : [
                      {
                        "Para" : "This initializer always succeeds, even if the value passed as `rawValue` exceeds the static properties declared as part of the option set. This example creates an instance of `ShippingOptions` with a raw value beyond the highest element, with a bit mask that effectively contains all the declared static members."
                      },
                      {
                        "CodeListing" : ""
                      },
                      {
                        "Note" : ""
                      }
                    ],
                    "key.doc.full_as_xml" : "<Function><Name>init(rawValue:)<\/Name><USR>s:s9OptionSetP8rawValuex03RawD0Qz_tcfc<\/USR><Declaration>init(rawValue: Self.RawValue)<\/Declaration><CommentParts><Abstract><Para>Creates a new option set from the given raw value.<\/Para><\/Abstract><Parameters><Parameter><Name>rawValue<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The raw value of the option set to create. Each bit of <codeVoice>rawValue<\/codeVoice> potentially represents an element of the option set, though raw values may include bits that are not defined as distinct values of the <codeVoice>OptionSet<\/codeVoice> type.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>This initializer always succeeds, even if the value passed as <codeVoice>rawValue<\/codeVoice> exceeds the static properties declared as part of the option set. This example creates an instance of <codeVoice>ShippingOptions<\/codeVoice> with a raw value beyond the highest element, with a bit mask that effectively contains all the declared static members.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let extraOptions = ShippingOptions(rawValue: 255)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(extraOptions.isStrictSuperset(of: .all))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"true\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Note><Para>This documentation comment was inherited from <codeVoice>OptionSet<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
                    "key.doc.name" : "init(rawValue:)",
                    "key.doc.parameters" : [
                      {
                        "discussion" : [
                          {
                            "Para" : "The raw value of the option set to create. Each bit of `rawValue` potentially represents an element of the option set, though raw values may include bits that are not defined as distinct values of the `OptionSet` type."
                          }
                        ],
                        "name" : "rawValue"
                      }
                    ],
                    "key.doc.type" : "Function",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>rawValue<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
                    "key.kind" : "source.lang.swift.decl.function.method.instance",
                    "key.length" : 62,
                    "key.line" : 2345,
                    "key.modulename" : "main",
                    "key.name" : "init(rawValue:)",
                    "key.namelength" : 19,
                    "key.nameoffset" : 93173,
                    "key.offset" : 93173,
                    "key.overrides" : [
                      {
                        "key.usr" : "s:s9OptionSetP8rawValuex03RawD0Qz_tcfc"
                      },
                      {
                        "key.usr" : "s:SY8rawValuexSg03RawB0Qz_tcfc"
                      }
                    ],
                    "key.parsed_declaration" : "public init(rawValue: Int)",
                    "key.parsed_scope.end" : 2347,
                    "key.parsed_scope.start" : 2345,
                    "key.substructure" : [

                    ],
                    "key.typename" : "(DynamicGraph.Store.Codec.Type) -> (Int) -> DynamicGraph.Store.Codec",
                    "key.typeusr" : "$s8rawValue4main12DynamicGraphC5StoreV5CodecVSi_tcD",
                    "key.usr" : "s:s9OptionSetP8rawValuex03RawD0Qz_tcfc"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public static let fpzip: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 93242
                      }
                    ],
                    "key.column" : 25,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>fpzip<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.type><\/decl.var.static>",
                    "key.kind" : "source.lang.swift.decl.var.static",
                    "key.length" : 42,
                    "key.line" : 2348,
                    "key.modulename" : "main",
                    "key.name" : "fpzip",
                    "key.namelength" : 5,
                    "key.nameoffset" : 93260,
                    "key.offset" : 93249,
                    "key.parsed_declaration" : "public static let fpzip = Codec(rawValue: 1 << 0)",
                    "key.parsed_scope.end" : 2348,
                    "key.parsed_scope.start" : 2348,
                    "key.typename" : "DynamicGraph.Store.Codec",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV5CodecVD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV5fpzipAGvpZ"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public static let zip: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 93298
                      }
                    ],
                    "key.column" : 25,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>zip<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.type><\/decl.var.static>",
                    "key.kind" : "source.lang.swift.decl.var.static",
                    "key.length" : 40,
                    "key.line" : 2349,
                    "key.modulename" : "main",
                    "key.name" : "zip",
                    "key.namelength" : 3,
                    "key.nameoffset" : 93316,
                    "key.offset" : 93305,
                    "key.parsed_declaration" : "public static let zip = Codec(rawValue: 1 << 1)",
                    "key.parsed_scope.end" : 2349,
                    "key.parsed_scope.start" : 2349,
                    "key.typename" : "DynamicGraph.Store.Codec",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV5CodecVD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV3zipAGvpZ"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public static let ezm7: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 93352
                      }
                    ],
                    "key.column" : 25,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>ezm7<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.type><\/decl.var.static>",
                    "key.kind" : "source.lang.swift.decl.var.static",
                    "key.length" : 41,
                    "key.line" : 2350,
                    "key.modulename" : "main",
                    "key.name" : "ezm7",
                    "key.namelength" : 4,
                    "key.nameoffset" : 93370,
                    "key.offset" : 93359,
                    "key.parsed_declaration" : "public static let ezm7 = Codec(rawValue: 1 << 2)",
                    "key.parsed_scope.end" : 2350,
                    "key.parsed_scope.start" : 2350,
                    "key.typename" : "DynamicGraph.Store.Codec",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV5CodecVD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV4ezm7AGvpZ"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public static let q4p: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 93407
                      }
                    ],
                    "key.column" : 25,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q4p<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.type><\/decl.var.static>",
                    "key.kind" : "source.lang.swift.decl.var.static",
                    "key.length" : 40,
                    "key.line" : 2351,
                    "key.modulename" : "main",
                    "key.name" : "q4p",
                    "key.namelength" : 3,
                    "key.nameoffset" : 93425,
                    "key.offset" : 93414,
                    "key.parsed_declaration" : "public static let q4p = Codec(rawValue: 1 << 3)",
                    "key.parsed_scope.end" : 2351,
                    "key.parsed_scope.start" : 2351,
                    "key.typename" : "DynamicGraph.Store.Codec",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV5CodecVD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV3q4pAGvpZ"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public static let q5p: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 93461
                      }
                    ],
                    "key.column" : 25,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q5p<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.type><\/decl.var.static>",
                    "key.kind" : "source.lang.swift.decl.var.static",
                    "key.length" : 40,
                    "key.line" : 2352,
                    "key.modulename" : "main",
                    "key.name" : "q5p",
                    "key.namelength" : 3,
                    "key.nameoffset" : 93479,
                    "key.offset" : 93468,
                    "key.parsed_declaration" : "public static let q5p = Codec(rawValue: 1 << 4)",
                    "key.parsed_scope.end" : 2352,
                    "key.parsed_scope.start" : 2352,
                    "key.typename" : "DynamicGraph.Store.Codec",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV5CodecVD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV3q5pAGvpZ"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public static let q6p: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 93515
                      }
                    ],
                    "key.column" : 25,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q6p<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.type><\/decl.var.static>",
                    "key.kind" : "source.lang.swift.decl.var.static",
                    "key.length" : 40,
                    "key.line" : 2353,
                    "key.modulename" : "main",
                    "key.name" : "q6p",
                    "key.namelength" : 3,
                    "key.nameoffset" : 93533,
                    "key.offset" : 93522,
                    "key.parsed_declaration" : "public static let q6p = Codec(rawValue: 1 << 5)",
                    "key.parsed_scope.end" : 2353,
                    "key.parsed_scope.start" : 2353,
                    "key.typename" : "DynamicGraph.Store.Codec",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV5CodecVD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV3q6pAGvpZ"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public static let q7p: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 93569
                      }
                    ],
                    "key.column" : 25,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q7p<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.type><\/decl.var.static>",
                    "key.kind" : "source.lang.swift.decl.var.static",
                    "key.length" : 40,
                    "key.line" : 2354,
                    "key.modulename" : "main",
                    "key.name" : "q7p",
                    "key.namelength" : 3,
                    "key.nameoffset" : 93587,
                    "key.offset" : 93576,
                    "key.parsed_declaration" : "public static let q7p = Codec(rawValue: 1 << 6)",
                    "key.parsed_scope.end" : 2354,
                    "key.parsed_scope.start" : 2354,
                    "key.typename" : "DynamicGraph.Store.Codec",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV5CodecVD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV3q7pAGvpZ"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public static let q8p: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 93623
                      }
                    ],
                    "key.column" : 25,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>q8p<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.type><\/decl.var.static>",
                    "key.kind" : "source.lang.swift.decl.var.static",
                    "key.length" : 40,
                    "key.line" : 2355,
                    "key.modulename" : "main",
                    "key.name" : "q8p",
                    "key.namelength" : 3,
                    "key.nameoffset" : 93641,
                    "key.offset" : 93630,
                    "key.parsed_declaration" : "public static let q8p = Codec(rawValue: 1 << 7)",
                    "key.parsed_scope.end" : 2355,
                    "key.parsed_scope.start" : 2355,
                    "key.typename" : "DynamicGraph.Store.Codec",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV5CodecVD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV3q8pAGvpZ"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>public static let jit: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type><\/Declaration>",
                    "key.attributes" : [
                      {
                        "key.attribute" : "source.decl.attribute.public",
                        "key.length" : 6,
                        "key.offset" : 93677
                      }
                    ],
                    "key.column" : 25,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>jit<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.type><\/decl.var.static>",
                    "key.kind" : "source.lang.swift.decl.var.static",
                    "key.length" : 40,
                    "key.line" : 2356,
                    "key.modulename" : "main",
                    "key.name" : "jit",
                    "key.namelength" : 3,
                    "key.nameoffset" : 93695,
                    "key.offset" : 93684,
                    "key.parsed_declaration" : "public static let jit = Codec(rawValue: 1 << 8)",
                    "key.parsed_scope.end" : 2356,
                    "key.parsed_scope.start" : 2356,
                    "key.typename" : "DynamicGraph.Store.Codec",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV5CodecVD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV3jitAGvpZ"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.internal",
                    "key.annotated_decl" : "<Declaration>var encode: (@convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:s6UInt32V\">UInt32<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type>)? { get }<\/Declaration>",
                    "key.bodylength" : 2057,
                    "key.bodyoffset" : 94014,
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>encode<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/tuple.element.type><\/tuple.element>)<\/tuple>?<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
                    "key.kind" : "source.lang.swift.decl.var.instance",
                    "key.length" : 2341,
                    "key.line" : 2357,
                    "key.modulename" : "main",
                    "key.name" : "encode",
                    "key.namelength" : 6,
                    "key.nameoffset" : 93735,
                    "key.offset" : 93731,
                    "key.parsed_declaration" : "var encode:\n  (\n    @convention(c) (\n      UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?,\n      UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?\n    ) -> Int32\n  )?",
                    "key.parsed_scope.end" : 2407,
                    "key.parsed_scope.start" : 2357,
                    "key.typename" : "(@convention(c) (UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<UInt32>?) -> Int32)?",
                    "key.typeusr" : "$ss5Int32VSVSg_SiABSPyABGSgABSvSgAFSpySiGSgSpys6UInt32VGSgtXCSgD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV6encodes5Int32VSVSg_SiAJSPyAJGSgAJSvSgANSpySiGSgSpys6UInt32VGSgtXCSgvp"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.internal",
                    "key.annotated_decl" : "<Declaration>var decode: (@convention(c) (<Type usr=\"s:SV\">UnsafeRawPointer<\/Type>?, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s5Int32V\">Int32<\/Type>&gt;?, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s6UInt32V\">UInt32<\/Type>, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, ccv_nnc_tensor_param_t, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?, <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>?, <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;?) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type>)? { get }<\/Declaration>",
                    "key.bodylength" : 572,
                    "key.bodyoffset" : 96451,
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>decode<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@convention<\/syntaxtype.attribute.name>(c)<\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SV\">UnsafeRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:s6UInt32V\">UInt32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/tuple.element.type><\/tuple.element>)<\/tuple>?<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
                    "key.kind" : "source.lang.swift.decl.var.instance",
                    "key.length" : 945,
                    "key.line" : 2408,
                    "key.modulename" : "main",
                    "key.name" : "decode",
                    "key.namelength" : 6,
                    "key.nameoffset" : 96083,
                    "key.offset" : 96079,
                    "key.parsed_declaration" : "var decode:\n  (\n    @convention(c) (\n      UnsafeRawPointer?, Int, Int32, UnsafePointer<Int32>?, Int32, UInt32,\n      UnsafeMutableRawPointer?, ccv_nnc_tensor_param_t,\n      UnsafeMutablePointer<UnsafeMutablePointer<ccv_nnc_tensor_t>?>?,\n      UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?\n    ) -> Int32\n  )?",
                    "key.parsed_scope.end" : 2442,
                    "key.parsed_scope.start" : 2408,
                    "key.typename" : "<<error type>>",
                    "key.typeusr" : "$sXeD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV6decodeXevp"
                  },
                  {
                    "key.annotated_decl" : "<Declaration>let isJit: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
                    "key.column" : 13,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>isJit<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 26,
                    "key.line" : 2421,
                    "key.modulename" : "main",
                    "key.name" : "isJit",
                    "key.namelength" : 5,
                    "key.nameoffset" : 96525,
                    "key.offset" : 96521,
                    "key.parsed_declaration" : "let isJit = contains(.jit)",
                    "key.parsed_scope.end" : 2421,
                    "key.parsed_scope.start" : 2421,
                    "key.typename" : "Bool",
                    "key.typeusr" : "$sSbD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV6decodeXevg5isJitL_Sbvp"
                  }
                ],
                "key.typename" : "DynamicGraph.Store.Codec.Type",
                "key.typeusr" : "$s4main12DynamicGraphC5StoreV5CodecVmD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV5CodecV"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>private let graph: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type><\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.private",
                    "key.length" : 7,
                    "key.offset" : 97035
                  }
                ],
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>graph<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class><\/decl.var.type><\/decl.var.instance>",
                "key.kind" : "source.lang.swift.decl.var.instance",
                "key.length" : 23,
                "key.line" : 2444,
                "key.modulename" : "main",
                "key.name" : "graph",
                "key.namelength" : 5,
                "key.nameoffset" : 97047,
                "key.offset" : 97043,
                "key.parsed_declaration" : "private let graph: DynamicGraph",
                "key.parsed_scope.end" : 2444,
                "key.parsed_scope.start" : 2444,
                "key.typename" : "DynamicGraph",
                "key.typeusr" : "$s4main12DynamicGraphCD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV5graph33_FB88E2357CC5890C59B91A970B0C008ELLACvp"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>private let store: <Type usr=\"s:4main12DynamicGraphC6_StoreC\">_Store<\/Type><\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.private",
                    "key.length" : 7,
                    "key.offset" : 97071
                  }
                ],
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>store<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC6_StoreC\">_Store<\/ref.class><\/decl.var.type><\/decl.var.instance>",
                "key.kind" : "source.lang.swift.decl.var.instance",
                "key.length" : 17,
                "key.line" : 2445,
                "key.modulename" : "main",
                "key.name" : "store",
                "key.namelength" : 5,
                "key.nameoffset" : 97083,
                "key.offset" : 97079,
                "key.parsed_declaration" : "private let store: _Store",
                "key.parsed_scope.end" : 2445,
                "key.parsed_scope.start" : 2445,
                "key.typename" : "DynamicGraph._Store",
                "key.typeusr" : "$s4main12DynamicGraphC6_StoreCD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV5store33_FB88E2357CC5890C59B91A970B0C008ELLAC01_D0Cvp"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public func read(_ key: <Type usr=\"s:SS\">String<\/Type>, codec: <Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type> = []) -&gt; NNC.AnyTensor?<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 97247
                  }
                ],
                "key.bodylength" : 554,
                "key.bodyoffset" : 97317,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 17,
                "key.doc.comment" : " Read a type-erased tensor from the store.\n\n - Parameter key: The key corresponding to that particular tensor.",
                "key.doc.declaration" : "public func read(_ key: String, codec: Codec = []) -> NNC.AnyTensor?",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2452\" column=\"17\"><Name>read(_:codec:)<\/Name><USR>s:4main12DynamicGraphC5StoreV4readyXeXeF<\/USR><Declaration>public func read(_ key: String, codec: Codec = []) -&gt; NNC.AnyTensor?<\/Declaration><CommentParts><Abstract><Para>Read a type-erased tensor from the store.<\/Para><\/Abstract><Parameters><Parameter><Name>key<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The key corresponding to that particular tensor.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
                "key.doc.line" : 2452,
                "key.doc.name" : "read(_:codec:)",
                "key.doc.parameters" : [
                  {
                    "discussion" : [
                      {
                        "Para" : "The key corresponding to that particular tensor."
                      }
                    ],
                    "name" : "key"
                  }
                ],
                "key.doc.type" : "Function",
                "key.doclength" : 140,
                "key.docoffset" : 97102,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>read<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>codec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.parameter.type> = []<\/decl.var.parameter>) -&gt; <decl.function.returntype>NNC.AnyTensor?<\/decl.function.returntype><\/decl.function.method.instance>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 618,
                "key.line" : 2452,
                "key.modulename" : "main",
                "key.name" : "read(_:codec:)",
                "key.namelength" : 38,
                "key.nameoffset" : 97259,
                "key.offset" : 97254,
                "key.parsed_declaration" : "public func read(_ key: String, codec: Codec = []) -> NNC.AnyTensor?",
                "key.parsed_scope.end" : 2465,
                "key.parsed_scope.start" : 2452,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read4likeAC9AnyTensorCSgSS_tF\">read(like:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read_8variable5codecSbSS_AA0bC4_Any_pAE5CodecVtF\">read(_:variable:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA5ModelCAE5CodecVAE0I12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0O5ShapeVtcSgtF\">read(_: String, model: Model, codec: Codec = [], reader: ((String, DataType, TensorFormat, TensorShape) -&gt; ModelReaderResult)? = nil)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA15AnyModelBuilderCAE5CodecVAE0J12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0Q5ShapeVtcSgtF\">read(_: String, model: AnyModelBuilder, codec: Codec = [], reader: ((String, DataType, TensorFormat, TensorShape) -&gt; ModelReaderResult)? = nil)<\/RelatedName>"
                  }
                ],
                "key.substructure" : [
                  {
                    "key.annotated_decl" : "<Declaration>var underlying: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>underlying<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 61,
                    "key.line" : 2453,
                    "key.modulename" : "main",
                    "key.name" : "underlying",
                    "key.namelength" : 10,
                    "key.nameoffset" : 97328,
                    "key.offset" : 97324,
                    "key.parsed_declaration" : "var underlying: UnsafeMutablePointer<ccv_nnc_tensor_t>? = nil",
                    "key.parsed_scope.end" : 2453,
                    "key.parsed_scope.start" : 2453,
                    "key.typename" : "<<error type>>",
                    "key.typeusr" : "$sXeD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV4readyXeXeF10underlyingL_Xevp"
                  },
                  {
                    "key.annotated_decl" : "<Declaration>let result: <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>result<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 17,
                    "key.line" : 2454,
                    "key.modulename" : "main",
                    "key.name" : "result",
                    "key.namelength" : 6,
                    "key.nameoffset" : 97396,
                    "key.offset" : 97392,
                    "key.parsed_declaration" : "let result: Int32",
                    "key.parsed_scope.end" : 2454,
                    "key.parsed_scope.start" : 2454,
                    "key.typename" : "Int32",
                    "key.typeusr" : "$ss5Int32VD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV4readyXeXeF6resultL_s5Int32Vvp"
                  },
                  {
                    "key.annotated_decl" : "<Declaration>let anyTensor: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>anyTensor<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 45,
                    "key.line" : 2463,
                    "key.modulename" : "main",
                    "key.name" : "anyTensor",
                    "key.namelength" : 9,
                    "key.nameoffset" : 97788,
                    "key.offset" : 97784,
                    "key.parsed_declaration" : "let anyTensor = AnyTensorStorage(underlying!)",
                    "key.parsed_scope.end" : 2463,
                    "key.parsed_scope.start" : 2463,
                    "key.typename" : "<<error type>>",
                    "key.typeusr" : "$sXeD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV4readyXeXeF9anyTensorL_Xevp"
                  }
                ],
                "key.typename" : "(DynamicGraph.Store) -> (String, DynamicGraph.Store.Codec) -> <<error type>>",
                "key.typeusr" : "$syXeXecD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV4readyXeXeF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public func read(like key: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:4main12DynamicGraphC9AnyTensorC\">AnyTensor<\/Type>?<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 98026
                  }
                ],
                "key.bodylength" : 477,
                "key.bodyoffset" : 98076,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 17,
                "key.doc.comment" : " Read only shape of a tensor from the store.\n\n - Parameter like: The key corresponding to that particular tensor.",
                "key.doc.declaration" : "public func read(like key: String) -> AnyTensor?",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2472\" column=\"17\"><Name>read(like:)<\/Name><USR>s:4main12DynamicGraphC5StoreV4read4likeAC9AnyTensorCSgSS_tF<\/USR><Declaration>public func read(like key: String) -&gt; AnyTensor?<\/Declaration><CommentParts><Abstract><Para>Read only shape of a tensor from the store.<\/Para><\/Abstract><Parameters><Parameter><Name>like<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The key corresponding to that particular tensor.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
                "key.doc.line" : 2472,
                "key.doc.name" : "read(like:)",
                "key.doc.parameters" : [
                  {
                    "discussion" : [
                      {
                        "Para" : "The key corresponding to that particular tensor."
                      }
                    ],
                    "name" : "like"
                  }
                ],
                "key.doc.type" : "Function",
                "key.doclength" : 143,
                "key.docoffset" : 97878,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>read<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>like<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"s:4main12DynamicGraphC9AnyTensorC\">AnyTensor<\/ref.class>?<\/decl.function.returntype><\/decl.function.method.instance>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 521,
                "key.line" : 2472,
                "key.modulename" : "main",
                "key.name" : "read(like:)",
                "key.namelength" : 22,
                "key.nameoffset" : 98038,
                "key.offset" : 98033,
                "key.parsed_declaration" : "public func read(like key: String) -> AnyTensor?",
                "key.parsed_scope.end" : 2483,
                "key.parsed_scope.start" : 2472,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4readyXeXeF\">read(_:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read_8variable5codecSbSS_AA0bC4_Any_pAE5CodecVtF\">read(_:variable:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA5ModelCAE5CodecVAE0I12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0O5ShapeVtcSgtF\">read(_: String, model: Model, codec: Codec = [], reader: ((String, DataType, TensorFormat, TensorShape) -&gt; ModelReaderResult)? = nil)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA15AnyModelBuilderCAE5CodecVAE0J12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0Q5ShapeVtcSgtF\">read(_: String, model: AnyModelBuilder, codec: Codec = [], reader: ((String, DataType, TensorFormat, TensorShape) -&gt; ModelReaderResult)? = nil)<\/RelatedName>"
                  }
                ],
                "key.substructure" : [
                  {
                    "key.annotated_decl" : "<Declaration>var underlying: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>underlying<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 61,
                    "key.line" : 2473,
                    "key.modulename" : "main",
                    "key.name" : "underlying",
                    "key.namelength" : 10,
                    "key.nameoffset" : 98087,
                    "key.offset" : 98083,
                    "key.parsed_declaration" : "var underlying: UnsafeMutablePointer<ccv_nnc_tensor_t>? = nil",
                    "key.parsed_scope.end" : 2473,
                    "key.parsed_scope.start" : 2473,
                    "key.typename" : "<<error type>>",
                    "key.typeusr" : "$sXeD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV4read4likeAC9AnyTensorCSgSS_tF10underlyingL_Xevp"
                  },
                  {
                    "key.annotated_decl" : "<Declaration>let _tensor: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>_tensor<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 87,
                    "key.line" : 2479,
                    "key.modulename" : "main",
                    "key.name" : "_tensor",
                    "key.namelength" : 7,
                    "key.nameoffset" : 98347,
                    "key.offset" : 98343,
                    "key.parsed_declaration" : "let _tensor = ccv_nnc_tensor_variable_new_impl(graph.cGraph, underlying!.pointee.info)!",
                    "key.parsed_scope.end" : 2479,
                    "key.parsed_scope.start" : 2479,
                    "key.typename" : "<<error type>>",
                    "key.typeusr" : "$sXeD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV4read4likeAC9AnyTensorCSgSS_tF7_tensorL_Xevp"
                  },
                  {
                    "key.annotated_decl" : "<Declaration>let tensor: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>tensor<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 53,
                    "key.line" : 2481,
                    "key.modulename" : "main",
                    "key.name" : "tensor",
                    "key.namelength" : 6,
                    "key.nameoffset" : 98479,
                    "key.offset" : 98475,
                    "key.parsed_declaration" : "let tensor = AnyTensor(graph: graph, tensor: _tensor)",
                    "key.parsed_scope.end" : 2481,
                    "key.parsed_scope.start" : 2481,
                    "key.typename" : "<<error type>>",
                    "key.typeusr" : "$sXeD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV4read4likeAC9AnyTensorCSgSS_tF6tensorL_Xevp"
                  }
                ],
                "key.typename" : "(DynamicGraph.Store) -> (String) -> DynamicGraph.AnyTensor?",
                "key.typeusr" : "$s4like4main12DynamicGraphC9AnyTensorCSgSS_tcD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV4read4likeAC9AnyTensorCSgSS_tF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public func codec(for key: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type>?<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 98822
                  }
                ],
                "key.bodylength" : 1089,
                "key.bodyoffset" : 98868,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 17,
                "key.doc.comment" : " Retrieve codec for a particular key. It must be a tensor to make sense of this.\n\n - Parameters:\n   - key: The key corresponding to a particular tensor.\n - Returns the codec, if the tensor doesn't exist, return nil.",
                "key.doc.declaration" : "public func codec(for key: String) -> Codec?",
                "key.doc.discussion" : [
                  {
                    "List-Bullet" : ""
                  }
                ],
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2492\" column=\"17\"><Name>codec(for:)<\/Name><USR>s:4main12DynamicGraphC5StoreV5codec3forAE5CodecVSgSS_tF<\/USR><Declaration>public func codec(for key: String) -&gt; Codec?<\/Declaration><CommentParts><Abstract><Para>Retrieve codec for a particular key. It must be a tensor to make sense of this.<\/Para><\/Abstract><Parameters><Parameter><Name>key<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The key corresponding to a particular tensor.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><List-Bullet><Item><Para>Returns the codec, if the tensor doesn’t exist, return nil.<\/Para><\/Item><\/List-Bullet><\/Discussion><\/CommentParts><\/Function>",
                "key.doc.line" : 2492,
                "key.doc.name" : "codec(for:)",
                "key.doc.parameters" : [
                  {
                    "discussion" : [
                      {
                        "Para" : "The key corresponding to a particular tensor."
                      }
                    ],
                    "name" : "key"
                  }
                ],
                "key.doc.type" : "Function",
                "key.doclength" : 257,
                "key.docoffset" : 98560,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>codec<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>for<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.instance>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 1129,
                "key.line" : 2492,
                "key.modulename" : "main",
                "key.name" : "codec(for:)",
                "key.namelength" : 22,
                "key.nameoffset" : 98834,
                "key.offset" : 98829,
                "key.parsed_declaration" : "public func codec(for key: String) -> Codec?",
                "key.parsed_scope.end" : 2529,
                "key.parsed_scope.start" : 2492,
                "key.substructure" : [
                  {
                    "key.annotated_decl" : "<Declaration>var selectCodec: <Type usr=\"s:s13OpaquePointerV\">OpaquePointer<\/Type>?<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>selectCodec<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s13OpaquePointerV\">OpaquePointer<\/ref.struct>?<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 37,
                    "key.line" : 2493,
                    "key.modulename" : "main",
                    "key.name" : "selectCodec",
                    "key.namelength" : 11,
                    "key.nameoffset" : 98879,
                    "key.offset" : 98875,
                    "key.parsed_declaration" : "var selectCodec: OpaquePointer? = nil",
                    "key.parsed_scope.end" : 2493,
                    "key.parsed_scope.start" : 2493,
                    "key.typename" : "OpaquePointer?",
                    "key.typeusr" : "$ss13OpaquePointerVSgD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5codec3forAE5CodecVSgSS_tF06selectG0L_s13OpaquePointerVSgvp"
                  },
                  {
                    "key.annotated_decl" : "<Declaration>let SQLITE_TRANSIENT: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>SQLITE_TRANSIENT<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 110,
                    "key.line" : 2497,
                    "key.modulename" : "main",
                    "key.name" : "SQLITE_TRANSIENT",
                    "key.namelength" : 16,
                    "key.nameoffset" : 99058,
                    "key.offset" : 99054,
                    "key.parsed_declaration" : "let SQLITE_TRANSIENT = unsafeBitCast(\n  OpaquePointer(bitPattern: -1), to: sqlite3_destructor_type.self)",
                    "key.parsed_scope.end" : 2497,
                    "key.parsed_scope.start" : 2497,
                    "key.typename" : "<<error type>>",
                    "key.typeusr" : "$sXeD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5codec3forAE5CodecVSgSS_tF16SQLITE_TRANSIENTL_Xevp"
                  },
                  {
                    "key.annotated_decl" : "<Declaration>let codec: <Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type>?<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>codec<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct>?<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 17,
                    "key.line" : 2500,
                    "key.modulename" : "main",
                    "key.name" : "codec",
                    "key.namelength" : 5,
                    "key.nameoffset" : 99242,
                    "key.offset" : 99238,
                    "key.parsed_declaration" : "let codec: Codec?",
                    "key.parsed_scope.end" : 2500,
                    "key.parsed_scope.start" : 2500,
                    "key.typename" : "DynamicGraph.Store.Codec?",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV5CodecVSgD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5codec3forAE5CodecVSgSS_tFAFL_AJvp"
                  }
                ],
                "key.typename" : "(DynamicGraph.Store) -> (String) -> DynamicGraph.Store.Codec?",
                "key.typeusr" : "$s3for4main12DynamicGraphC5StoreV5CodecVSgSS_tcD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV5codec3forAE5CodecVSgSS_tF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>@discardableResult public func read(_ key: <Type usr=\"s:SS\">String<\/Type>, variable: <Type usr=\"s:4main16DynamicGraph_AnyP\">DynamicGraph_Any<\/Type>, codec: <Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type> = []) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 100312
                  },
                  {
                    "key.attribute" : "source.decl.attribute.discardableResult",
                    "key.length" : 18,
                    "key.offset" : 100289
                  }
                ],
                "key.bodylength" : 2071,
                "key.bodyoffset" : 100400,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 17,
                "key.doc.comment" : " Read a tensor from the store into tensor variable from dynamic graph.\n\n - Parameters:\n   - key: The key corresponding to that particular tensor.\n   - variable: The tensor variable to be initialized with.\n - Returns whether we successfully initialized the tensor variable.",
                "key.doc.declaration" : "public func read(_ key: String, variable: DynamicGraph_Any, codec: Codec = []) -> Bool",
                "key.doc.discussion" : [
                  {
                    "List-Bullet" : ""
                  }
                ],
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2540\" column=\"17\"><Name>read(_:variable:codec:)<\/Name><USR>s:4main12DynamicGraphC5StoreV4read_8variable5codecSbSS_AA0bC4_Any_pAE5CodecVtF<\/USR><Declaration>public func read(_ key: String, variable: DynamicGraph_Any, codec: Codec = []) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Read a tensor from the store into tensor variable from dynamic graph.<\/Para><\/Abstract><Parameters><Parameter><Name>key<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The key corresponding to that particular tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>variable<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The tensor variable to be initialized with.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><List-Bullet><Item><Para>Returns whether we successfully initialized the tensor variable.<\/Para><\/Item><\/List-Bullet><\/Discussion><\/CommentParts><\/Function>",
                "key.doc.line" : 2540,
                "key.doc.name" : "read(_:variable:codec:)",
                "key.doc.parameters" : [
                  {
                    "discussion" : [
                      {
                        "Para" : "The key corresponding to that particular tensor."
                      }
                    ],
                    "name" : "key"
                  },
                  {
                    "discussion" : [
                      {
                        "Para" : "The tensor variable to be initialized with."
                      }
                    ],
                    "name" : "variable"
                  }
                ],
                "key.doc.type" : "Function",
                "key.doclength" : 320,
                "key.docoffset" : 99964,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@discardableResult<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>read<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>variable<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.protocol usr=\"s:4main16DynamicGraph_AnyP\">DynamicGraph_Any<\/ref.protocol><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>codec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.parameter.type> = []<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 2153,
                "key.line" : 2540,
                "key.modulename" : "main",
                "key.name" : "read(_:variable:codec:)",
                "key.namelength" : 66,
                "key.nameoffset" : 100324,
                "key.offset" : 100319,
                "key.parsed_declaration" : "public func read(_ key: String, variable: DynamicGraph_Any, codec: Codec = []) -> Bool",
                "key.parsed_scope.end" : 2591,
                "key.parsed_scope.start" : 2540,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4readyXeXeF\">read(_:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read4likeAC9AnyTensorCSgSS_tF\">read(like:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA5ModelCAE5CodecVAE0I12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0O5ShapeVtcSgtF\">read(_: String, model: Model, codec: Codec = [], reader: ((String, DataType, TensorFormat, TensorShape) -&gt; ModelReaderResult)? = nil)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA15AnyModelBuilderCAE5CodecVAE0J12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0Q5ShapeVtcSgtF\">read(_: String, model: AnyModelBuilder, codec: Codec = [], reader: ((String, DataType, TensorFormat, TensorShape) -&gt; ModelReaderResult)? = nil)<\/RelatedName>"
                  }
                ],
                "key.substructure" : [

                ],
                "key.typename" : "(DynamicGraph.Store) -> (String, DynamicGraph_Any, DynamicGraph.Store.Codec) -> Bool",
                "key.typeusr" : "$s_8variable5codecSbSS_4main16DynamicGraph_Any_pAC0dE0C5StoreV5CodecVtcD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV4read_8variable5codecSbSS_AA0bC4_Any_pAE5CodecVtF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public enum <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.ModelReaderResult<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 102477
                  }
                ],
                "key.bodylength" : 231,
                "key.bodyoffset" : 102508,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<decl.name>ModelReaderResult<\/decl.name><\/decl.enum>",
                "key.kind" : "source.lang.swift.decl.enum",
                "key.length" : 256,
                "key.line" : 2592,
                "key.modulename" : "main",
                "key.name" : "ModelReaderResult",
                "key.namelength" : 17,
                "key.nameoffset" : 102489,
                "key.offset" : 102484,
                "key.parsed_declaration" : "public enum ModelReaderResult",
                "key.parsed_scope.end" : 2599,
                "key.parsed_scope.start" : 2592,
                "key.substructure" : [
                  {
                    "key.kind" : "source.lang.swift.decl.enumcase",
                    "key.length" : 23,
                    "key.offset" : 102573,
                    "key.substructure" : [
                      {
                        "key.accessibility" : "source.lang.swift.accessibility.public",
                        "key.annotated_decl" : "<Declaration>case `continue`(<Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
                        "key.column" : 12,
                        "key.decl_lang" : "source.lang.swift",
                        "key.doc.column" : 12,
                        "key.doc.comment" : "Continue to load parameter with the given name.",
                        "key.doc.declaration" : "",
                        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2594\" column=\"12\"><Name>continue(_:)<\/Name><USR>s:4main12DynamicGraphC5StoreV17ModelReaderResultO8continueyAGSScAGmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Continue to load parameter with the given name.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                        "key.doc.line" : 2594,
                        "key.doc.name" : "continue(_:)",
                        "key.doc.type" : "Other",
                        "key.doclength" : 52,
                        "key.docoffset" : 102515,
                        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                        "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>`continue`<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                        "key.kind" : "source.lang.swift.decl.enumelement",
                        "key.length" : 18,
                        "key.line" : 2594,
                        "key.modulename" : "main",
                        "key.name" : "continue(_:)",
                        "key.namelength" : 18,
                        "key.nameoffset" : 102578,
                        "key.offset" : 102578,
                        "key.parsed_declaration" : "case `continue`(String)",
                        "key.parsed_scope.end" : 2594,
                        "key.parsed_scope.start" : 2594,
                        "key.substructure" : [

                        ],
                        "key.typename" : "(DynamicGraph.Store.ModelReaderResult.Type) -> (String) -> DynamicGraph.Store.ModelReaderResult",
                        "key.typeusr" : "$sy4main12DynamicGraphC5StoreV17ModelReaderResultOSScAGmcD",
                        "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelReaderResultO8continueyAGSScAGmF"
                      }
                    ]
                  },
                  {
                    "key.kind" : "source.lang.swift.decl.enumcase",
                    "key.length" : 25,
                    "key.offset" : 102664,
                    "key.substructure" : [
                      {
                        "key.accessibility" : "source.lang.swift.accessibility.public",
                        "key.annotated_decl" : "<Declaration>case final(NNC.AnyTensor)<\/Declaration>",
                        "key.column" : 12,
                        "key.decl_lang" : "source.lang.swift",
                        "key.doc.column" : 12,
                        "key.doc.comment" : "The parameter is loaded, no futher operation need.",
                        "key.doc.declaration" : "",
                        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2596\" column=\"12\"><Name>final(_:)<\/Name><USR>s:4main12DynamicGraphC5StoreV17ModelReaderResultO5final33_FB88E2357CC5890C59B91A970B0C008ELLXeF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>The parameter is loaded, no futher operation need.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                        "key.doc.line" : 2596,
                        "key.doc.name" : "final(_:)",
                        "key.doc.type" : "Other",
                        "key.doclength" : 55,
                        "key.docoffset" : 102603,
                        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                        "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>final<\/decl.name>(<decl.var.parameter><decl.var.parameter.type>NNC.AnyTensor<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                        "key.kind" : "source.lang.swift.decl.enumelement",
                        "key.length" : 20,
                        "key.line" : 2596,
                        "key.modulename" : "main",
                        "key.name" : "final(_:)",
                        "key.namelength" : 20,
                        "key.nameoffset" : 102669,
                        "key.offset" : 102669,
                        "key.parsed_declaration" : "case final(NNC.AnyTensor)",
                        "key.parsed_scope.end" : 2596,
                        "key.parsed_scope.start" : 2596,
                        "key.substructure" : [

                        ],
                        "key.typename" : "(DynamicGraph.Store.ModelReaderResult.Type) -> (<<error type>>) -> DynamicGraph.Store.ModelReaderResult",
                        "key.typeusr" : "$sXeD",
                        "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelReaderResultO5final33_FB88E2357CC5890C59B91A970B0C008ELLXeF"
                      }
                    ]
                  },
                  {
                    "key.kind" : "source.lang.swift.decl.enumcase",
                    "key.length" : 9,
                    "key.offset" : 102725,
                    "key.substructure" : [
                      {
                        "key.accessibility" : "source.lang.swift.accessibility.public",
                        "key.annotated_decl" : "<Declaration>case fail<\/Declaration>",
                        "key.column" : 12,
                        "key.decl_lang" : "source.lang.swift",
                        "key.doc.column" : 12,
                        "key.doc.comment" : "Nothing is loaded.",
                        "key.doc.declaration" : "",
                        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2598\" column=\"12\"><Name>fail<\/Name><USR>s:4main12DynamicGraphC5StoreV17ModelReaderResultO4failyA2GmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Nothing is loaded.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                        "key.doc.line" : 2598,
                        "key.doc.name" : "fail",
                        "key.doc.type" : "Other",
                        "key.doclength" : 23,
                        "key.docoffset" : 102696,
                        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                        "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>fail<\/decl.name><\/decl.enumelement>",
                        "key.kind" : "source.lang.swift.decl.enumelement",
                        "key.length" : 4,
                        "key.line" : 2598,
                        "key.modulename" : "main",
                        "key.name" : "fail",
                        "key.namelength" : 4,
                        "key.nameoffset" : 102730,
                        "key.offset" : 102730,
                        "key.parsed_declaration" : "case fail",
                        "key.parsed_scope.end" : 2598,
                        "key.parsed_scope.start" : 2598,
                        "key.typename" : "(DynamicGraph.Store.ModelReaderResult.Type) -> DynamicGraph.Store.ModelReaderResult",
                        "key.typeusr" : "$sy4main12DynamicGraphC5StoreV17ModelReaderResultOAGmcD",
                        "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelReaderResultO4failyA2GmF"
                      }
                    ]
                  }
                ],
                "key.typename" : "DynamicGraph.Store.ModelReaderResult.Type",
                "key.typeusr" : "$s4main12DynamicGraphC5StoreV17ModelReaderResultOmD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelReaderResultO"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.internal",
                "key.annotated_decl" : "<Declaration>class <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.ModelReaderHelper<\/Declaration>",
                "key.bodylength" : 354,
                "key.bodyoffset" : 102770,
                "key.column" : 11,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>class<\/syntaxtype.keyword> <ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<decl.name>ModelReaderHelper<\/decl.name><\/decl.class>",
                "key.kind" : "source.lang.swift.decl.class",
                "key.length" : 380,
                "key.line" : 2600,
                "key.modulename" : "main",
                "key.name" : "ModelReaderHelper",
                "key.namelength" : 17,
                "key.nameoffset" : 102751,
                "key.offset" : 102745,
                "key.parsed_declaration" : "class ModelReaderHelper",
                "key.parsed_scope.end" : 2610,
                "key.parsed_scope.start" : 2600,
                "key.substructure" : [
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.internal",
                    "key.annotated_decl" : "<Declaration>let reader: (<Type usr=\"s:SS\">String<\/Type>, <Type usr=\"s:4main8DataTypeO\">DataType<\/Type>, <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>) -&gt; <Type usr=\"s:4main12DynamicGraphC5StoreV17ModelReaderResultO\">ModelReaderResult<\/Type><\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>reader<\/decl.name>: <decl.var.type>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main12DynamicGraphC5StoreV17ModelReaderResultO\">ModelReaderResult<\/ref.enum><\/decl.function.returntype><\/decl.var.type><\/decl.var.instance>",
                    "key.kind" : "source.lang.swift.decl.var.instance",
                    "key.length" : 78,
                    "key.line" : 2601,
                    "key.modulename" : "main",
                    "key.name" : "reader",
                    "key.namelength" : 6,
                    "key.nameoffset" : 102781,
                    "key.offset" : 102777,
                    "key.parsed_declaration" : "let reader: (String, DataType, TensorFormat, TensorShape) -> ModelReaderResult",
                    "key.parsed_scope.end" : 2601,
                    "key.parsed_scope.start" : 2601,
                    "key.typename" : "(String, DataType, TensorFormat, TensorShape) -> DynamicGraph.Store.ModelReaderResult",
                    "key.typeusr" : "$sy4main12DynamicGraphC5StoreV17ModelReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0J5ShapeVtcD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelReaderHelperC6readeryAE0eF6ResultOSS_AA8DataTypeOAA12TensorFormatOAA0L5ShapeVtcvp"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.internal",
                    "key.annotated_decl" : "<Declaration>let sqlite: <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type><\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>sqlite<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
                    "key.kind" : "source.lang.swift.decl.var.instance",
                    "key.length" : 35,
                    "key.line" : 2602,
                    "key.modulename" : "main",
                    "key.name" : "sqlite",
                    "key.namelength" : 6,
                    "key.nameoffset" : 102866,
                    "key.offset" : 102862,
                    "key.parsed_declaration" : "let sqlite: UnsafeMutableRawPointer",
                    "key.parsed_scope.end" : 2602,
                    "key.parsed_scope.start" : 2602,
                    "key.typename" : "UnsafeMutableRawPointer",
                    "key.typeusr" : "$sSvD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelReaderHelperC6sqliteSvvp"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.internal",
                    "key.annotated_decl" : "<Declaration>init(reader: @escaping (<Type usr=\"s:SS\">String<\/Type>, <Type usr=\"s:4main8DataTypeO\">DataType<\/Type>, <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>) -&gt; <Type usr=\"s:4main12DynamicGraphC5StoreV17ModelReaderResultO\">ModelReaderResult<\/Type>, sqlite: <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>)<\/Declaration>",
                    "key.bodylength" : 65,
                    "key.bodyoffset" : 103053,
                    "key.column" : 7,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>reader<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@escaping<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main12DynamicGraphC5StoreV17ModelReaderResultO\">ModelReaderResult<\/ref.enum><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>sqlite<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
                    "key.kind" : "source.lang.swift.decl.function.method.instance",
                    "key.length" : 215,
                    "key.line" : 2603,
                    "key.modulename" : "main",
                    "key.name" : "init(reader:sqlite:)",
                    "key.namelength" : 147,
                    "key.nameoffset" : 102904,
                    "key.offset" : 102904,
                    "key.parsed_declaration" : "init(\n  reader: @escaping (String, DataType, TensorFormat, TensorShape) -> ModelReaderResult,\n  sqlite: UnsafeMutableRawPointer\n)",
                    "key.parsed_scope.end" : 2609,
                    "key.parsed_scope.start" : 2603,
                    "key.substructure" : [

                    ],
                    "key.typename" : "(DynamicGraph.Store.ModelReaderHelper.Type) -> (@escaping (String, DataType, TensorFormat, TensorShape) -> DynamicGraph.Store.ModelReaderResult, UnsafeMutableRawPointer) -> DynamicGraph.Store.ModelReaderHelper",
                    "key.typeusr" : "$s6reader6sqlite4main12DynamicGraphC5StoreV17ModelReaderHelperCAG0gH6ResultOSS_AC8DataTypeOAC12TensorFormatOAC0M5ShapeVtc_SvtcD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelReaderHelperC6reader6sqliteAgE0eF6ResultOSS_AA8DataTypeOAA12TensorFormatOAA0M5ShapeVtc_Svtcfc"
                  }
                ],
                "key.typename" : "DynamicGraph.Store.ModelReaderHelper.Type",
                "key.typeusr" : "$s4main12DynamicGraphC5StoreV17ModelReaderHelperCmD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelReaderHelperC"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public func read(_ key: <Type usr=\"s:SS\">String<\/Type>, model: <Type usr=\"s:4main5ModelC\">Model<\/Type>, codec: <Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type> = [], reader: ((<Type usr=\"s:SS\">String<\/Type>, <Type usr=\"s:4main8DataTypeO\">DataType<\/Type>, <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>) -&gt; <Type usr=\"s:4main12DynamicGraphC5StoreV17ModelReaderResultO\">ModelReaderResult<\/Type>)? = nil)<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 103452
                  }
                ],
                "key.bodylength" : 2138,
                "key.bodyoffset" : 103621,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 17,
                "key.doc.comment" : " Read parameters into a given model.\n\n - Parameters:\n   - key: The key corresponding to a particular model.\n   - model: The model to be initialized with parameters from a given key.\n   - reader: You can customize your reader to load parameter with a different name etc.",
                "key.doc.declaration" : "public func read(_ key: String, model: Model, codec: Codec = [], reader: ((String, DataType, TensorFormat, TensorShape) -> ModelReaderResult)? = nil)",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2619\" column=\"17\"><Name>read(_:model:codec:reader:)<\/Name><USR>s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA5ModelCAE5CodecVAE0I12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0O5ShapeVtcSgtF<\/USR><Declaration>public func read(_ key: String, model: Model, codec: Codec = [], reader: ((String, DataType, TensorFormat, TensorShape) -&gt; ModelReaderResult)? = nil)<\/Declaration><CommentParts><Abstract><Para>Read parameters into a given model.<\/Para><\/Abstract><Parameters><Parameter><Name>key<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The key corresponding to a particular model.<\/Para><\/Discussion><\/Parameter><Parameter><Name>model<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The model to be initialized with parameters from a given key.<\/Para><\/Discussion><\/Parameter><Parameter><Name>reader<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>You can customize your reader to load parameter with a different name etc.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
                "key.doc.line" : 2619,
                "key.doc.name" : "read(_:model:codec:reader:)",
                "key.doc.parameters" : [
                  {
                    "discussion" : [
                      {
                        "Para" : "The key corresponding to a particular model."
                      }
                    ],
                    "name" : "key"
                  },
                  {
                    "discussion" : [
                      {
                        "Para" : "The model to be initialized with parameters from a given key."
                      }
                    ],
                    "name" : "model"
                  },
                  {
                    "discussion" : [
                      {
                        "Para" : "You can customize your reader to load parameter with a different name etc."
                      }
                    ],
                    "name" : "reader"
                  }
                ],
                "key.doc.type" : "Function",
                "key.doclength" : 317,
                "key.docoffset" : 103130,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>read<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>model<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:4main5ModelC\">Model<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>codec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>reader<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><tuple>(<tuple.element><tuple.element.type>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main12DynamicGraphC5StoreV17ModelReaderResultO\">ModelReaderResult<\/ref.enum><\/decl.function.returntype><\/tuple.element.type><\/tuple.element>)<\/tuple>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>)<\/decl.function.method.instance>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 2301,
                "key.line" : 2619,
                "key.modulename" : "main",
                "key.name" : "read(_:model:codec:reader:)",
                "key.namelength" : 155,
                "key.nameoffset" : 103464,
                "key.offset" : 103459,
                "key.parsed_declaration" : "public func read(\n  _ key: String, model: Model, codec: Codec = [],\n  reader: ((String, DataType, TensorFormat, TensorShape) -> ModelReaderResult)? = nil\n)",
                "key.parsed_scope.end" : 2670,
                "key.parsed_scope.start" : 2619,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4readyXeXeF\">read(_:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read4likeAC9AnyTensorCSgSS_tF\">read(like:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read_8variable5codecSbSS_AA0bC4_Any_pAE5CodecVtF\">read(_:variable:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA15AnyModelBuilderCAE5CodecVAE0J12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0Q5ShapeVtcSgtF\">read(_: String, model: AnyModelBuilder, codec: Codec = [], reader: ((String, DataType, TensorFormat, TensorShape) -&gt; ModelReaderResult)? = nil)<\/RelatedName>"
                  }
                ],
                "key.substructure" : [
                  {
                    "key.annotated_decl" : "<Declaration>let readerHelper: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV17ModelReaderHelperC\">ModelReaderHelper<\/Type><\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>readerHelper<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.class usr=\"s:4main12DynamicGraphC5StoreV17ModelReaderHelperC\">ModelReaderHelper<\/ref.class><\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 74,
                    "key.line" : 2633,
                    "key.modulename" : "main",
                    "key.name" : "readerHelper",
                    "key.namelength" : 12,
                    "key.nameoffset" : 103979,
                    "key.offset" : 103975,
                    "key.parsed_declaration" : "let readerHelper = ModelReaderHelper(reader: reader, sqlite: store.sqlite)",
                    "key.parsed_scope.end" : 2633,
                    "key.parsed_scope.start" : 2633,
                    "key.typename" : "DynamicGraph.Store.ModelReaderHelper",
                    "key.typeusr" : "$s4main12DynamicGraphC5StoreV17ModelReaderHelperCD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA5ModelCAE5CodecVAE0I12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0O5ShapeVtcSgtF0H6HelperL_AE0ikR0Cvp"
                  },
                  {
                    "key.annotated_decl" : "<Declaration>let unmanaged: <Type usr=\"s:s9UnmanagedV\">Unmanaged<\/Type>&lt;<Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV17ModelReaderHelperC\">ModelReaderHelper<\/Type>&gt;<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>unmanaged<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s9UnmanagedV\">Unmanaged<\/ref.struct>&lt;<ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.class usr=\"s:4main12DynamicGraphC5StoreV17ModelReaderHelperC\">ModelReaderHelper<\/ref.class>&gt;<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 52,
                    "key.line" : 2660,
                    "key.modulename" : "main",
                    "key.name" : "unmanaged",
                    "key.namelength" : 9,
                    "key.nameoffset" : 105341,
                    "key.offset" : 105337,
                    "key.parsed_declaration" : "let unmanaged = Unmanaged.passRetained(readerHelper)",
                    "key.parsed_scope.end" : 2660,
                    "key.parsed_scope.start" : 2660,
                    "key.typename" : "Unmanaged<DynamicGraph.Store.ModelReaderHelper>",
                    "key.typeusr" : "$ss9UnmanagedVy4main12DynamicGraphC5StoreV17ModelReaderHelperCGD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA5ModelCAE5CodecVAE0I12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0O5ShapeVtcSgtF9unmanagedL_s9UnmanagedVyAE0iK6HelperCGvp"
                  }
                ],
                "key.typename" : "(DynamicGraph.Store) -> (String, Model, DynamicGraph.Store.Codec, ((String, DataType, TensorFormat, TensorShape) -> DynamicGraph.Store.ModelReaderResult)?) -> ()",
                "key.typeusr" : "$s_5model5codec6readerySS_4main5ModelCAD12DynamicGraphC5StoreV5CodecVAJ0E12ReaderResultOSS_AD8DataTypeOAD12TensorFormatOAD0N5ShapeVtcSgtcD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA5ModelCAE5CodecVAE0I12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0O5ShapeVtcSgtF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public func read(_ key: <Type usr=\"s:SS\">String<\/Type>, model: <Type usr=\"s:4main15AnyModelBuilderC\">AnyModelBuilder<\/Type>, codec: <Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type> = [], reader: ((<Type usr=\"s:SS\">String<\/Type>, <Type usr=\"s:4main8DataTypeO\">DataType<\/Type>, <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>) -&gt; <Type usr=\"s:4main12DynamicGraphC5StoreV17ModelReaderResultO\">ModelReaderResult<\/Type>)? = nil)<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 106103
                  }
                ],
                "key.bodylength" : 70,
                "key.bodyoffset" : 106282,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 17,
                "key.doc.comment" : " Read parameters into a given model builder.\n\n - Parameters:\n   - key: The key corresponding to a particular model.\n   - model: The model builder to be initialized with parameters from a given key.\n   - reader: You can customize your reader to load parameter with a different name etc.",
                "key.doc.declaration" : "public func read(_ key: String, model: AnyModelBuilder, codec: Codec = [], reader: ((String, DataType, TensorFormat, TensorShape) -> ModelReaderResult)? = nil)",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2679\" column=\"17\"><Name>read(_:model:codec:reader:)<\/Name><USR>s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA15AnyModelBuilderCAE5CodecVAE0J12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0Q5ShapeVtcSgtF<\/USR><Declaration>public func read(_ key: String, model: AnyModelBuilder, codec: Codec = [], reader: ((String, DataType, TensorFormat, TensorShape) -&gt; ModelReaderResult)? = nil)<\/Declaration><CommentParts><Abstract><Para>Read parameters into a given model builder.<\/Para><\/Abstract><Parameters><Parameter><Name>key<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The key corresponding to a particular model.<\/Para><\/Discussion><\/Parameter><Parameter><Name>model<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The model builder to be initialized with parameters from a given key.<\/Para><\/Discussion><\/Parameter><Parameter><Name>reader<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>You can customize your reader to load parameter with a different name etc.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
                "key.doc.line" : 2679,
                "key.doc.name" : "read(_:model:codec:reader:)",
                "key.doc.parameters" : [
                  {
                    "discussion" : [
                      {
                        "Para" : "The key corresponding to a particular model."
                      }
                    ],
                    "name" : "key"
                  },
                  {
                    "discussion" : [
                      {
                        "Para" : "The model builder to be initialized with parameters from a given key."
                      }
                    ],
                    "name" : "model"
                  },
                  {
                    "discussion" : [
                      {
                        "Para" : "You can customize your reader to load parameter with a different name etc."
                      }
                    ],
                    "name" : "reader"
                  }
                ],
                "key.doc.type" : "Function",
                "key.doclength" : 333,
                "key.docoffset" : 105765,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>read<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>model<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:4main15AnyModelBuilderC\">AnyModelBuilder<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>codec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>reader<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><tuple>(<tuple.element><tuple.element.type>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main12DynamicGraphC5StoreV17ModelReaderResultO\">ModelReaderResult<\/ref.enum><\/decl.function.returntype><\/tuple.element.type><\/tuple.element>)<\/tuple>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>)<\/decl.function.method.instance>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 243,
                "key.line" : 2679,
                "key.modulename" : "main",
                "key.name" : "read(_:model:codec:reader:)",
                "key.namelength" : 165,
                "key.nameoffset" : 106115,
                "key.offset" : 106110,
                "key.parsed_declaration" : "public func read(\n  _ key: String, model: AnyModelBuilder, codec: Codec = [],\n  reader: ((String, DataType, TensorFormat, TensorShape) -> ModelReaderResult)? = nil\n)",
                "key.parsed_scope.end" : 2684,
                "key.parsed_scope.start" : 2679,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4readyXeXeF\">read(_:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read4likeAC9AnyTensorCSgSS_tF\">read(like:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read_8variable5codecSbSS_AA0bC4_Any_pAE5CodecVtF\">read(_:variable:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA5ModelCAE5CodecVAE0I12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0O5ShapeVtcSgtF\">read(_: String, model: Model, codec: Codec = [], reader: ((String, DataType, TensorFormat, TensorShape) -&gt; ModelReaderResult)? = nil)<\/RelatedName>"
                  }
                ],
                "key.substructure" : [

                ],
                "key.typename" : "(DynamicGraph.Store) -> (String, AnyModelBuilder, DynamicGraph.Store.Codec, ((String, DataType, TensorFormat, TensorShape) -> DynamicGraph.Store.ModelReaderResult)?) -> ()",
                "key.typeusr" : "$s_5model5codec6readerySS_4main15AnyModelBuilderCAD12DynamicGraphC5StoreV5CodecVAJ0F12ReaderResultOSS_AD8DataTypeOAD12TensorFormatOAD0P5ShapeVtcSgtcD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV4read_5model5codec6readerySS_AA15AnyModelBuilderCAE5CodecVAE0J12ReaderResultOSS_AA8DataTypeOAA12TensorFormatOAA0Q5ShapeVtcSgtF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public func write(_ key: <Type usr=\"s:SS\">String<\/Type>, tensor: NNC.AnyTensor, codec: <Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type> = [])<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 106548
                  }
                ],
                "key.bodylength" : 282,
                "key.bodyoffset" : 106624,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 17,
                "key.doc.comment" : " Write a tensor to the store.\n\n - Parameters:\n   - key: The key corresponding to a particular tensor.\n   - tensor: The tensor to be persisted.",
                "key.doc.declaration" : "public func write(_ key: String, tensor: NNC.AnyTensor, codec: Codec = [])",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2693\" column=\"17\"><Name>write(_:tensor:codec:)<\/Name><USR>s:4main12DynamicGraphC5StoreV5writeyXeXeF<\/USR><Declaration>public func write(_ key: String, tensor: NNC.AnyTensor, codec: Codec = [])<\/Declaration><CommentParts><Abstract><Para>Write a tensor to the store.<\/Para><\/Abstract><Parameters><Parameter><Name>key<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The key corresponding to a particular tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>tensor<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The tensor to be persisted.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
                "key.doc.line" : 2693,
                "key.doc.name" : "write(_:tensor:codec:)",
                "key.doc.parameters" : [
                  {
                    "discussion" : [
                      {
                        "Para" : "The key corresponding to a particular tensor."
                      }
                    ],
                    "name" : "key"
                  },
                  {
                    "discussion" : [
                      {
                        "Para" : "The tensor to be persisted."
                      }
                    ],
                    "name" : "tensor"
                  }
                ],
                "key.doc.type" : "Function",
                "key.doclength" : 184,
                "key.docoffset" : 106359,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>write<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>tensor<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>NNC.AnyTensor<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>codec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.parameter.type> = []<\/decl.var.parameter>)<\/decl.function.method.instance>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 352,
                "key.line" : 2693,
                "key.modulename" : "main",
                "key.name" : "write(_:tensor:codec:)",
                "key.namelength" : 62,
                "key.nameoffset" : 106560,
                "key.offset" : 106555,
                "key.parsed_declaration" : "public func write(_ key: String, tensor: NNC.AnyTensor, codec: Codec = [])",
                "key.parsed_scope.end" : 2701,
                "key.parsed_scope.start" : 2693,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV5write_8variable5codecySS_AA0bC4_Any_pAE5CodecVtF\">write(_:variable:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV5writeyXeXeF\">write(_: String, model: Model, codec: Codec = [], writer: ((String, NNC.AnyTensor) -&gt; ModelWriterResult)? = nil)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV5writeyXeXeF\">write(_: String, model: AnyModelBuilder, codec: Codec = [], writer: ((String, NNC.AnyTensor) -&gt; ModelWriterResult)? = nil)<\/RelatedName>"
                  }
                ],
                "key.substructure" : [

                ],
                "key.typename" : "(DynamicGraph.Store) -> (String, <<error type>>, DynamicGraph.Store.Codec) -> ()",
                "key.typeusr" : "$syXeXecD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV5writeyXeXeF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public func write(_ key: <Type usr=\"s:SS\">String<\/Type>, variable: <Type usr=\"s:4main16DynamicGraph_AnyP\">DynamicGraph_Any<\/Type>, codec: <Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type> = [])<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 107121
                  }
                ],
                "key.bodylength" : 770,
                "key.bodyoffset" : 107202,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 17,
                "key.doc.comment" : " Write a tensor variable to the store.\n\n - Parameters:\n   - key: The key corresponding to a particular tensor.\n   - variable: The tensor variable to be persisted.",
                "key.doc.declaration" : "public func write(_ key: String, variable: DynamicGraph_Any, codec: Codec = [])",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2709\" column=\"17\"><Name>write(_:variable:codec:)<\/Name><USR>s:4main12DynamicGraphC5StoreV5write_8variable5codecySS_AA0bC4_Any_pAE5CodecVtF<\/USR><Declaration>public func write(_ key: String, variable: DynamicGraph_Any, codec: Codec = [])<\/Declaration><CommentParts><Abstract><Para>Write a tensor variable to the store.<\/Para><\/Abstract><Parameters><Parameter><Name>key<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The key corresponding to a particular tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>variable<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The tensor variable to be persisted.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
                "key.doc.line" : 2709,
                "key.doc.name" : "write(_:variable:codec:)",
                "key.doc.parameters" : [
                  {
                    "discussion" : [
                      {
                        "Para" : "The key corresponding to a particular tensor."
                      }
                    ],
                    "name" : "key"
                  },
                  {
                    "discussion" : [
                      {
                        "Para" : "The tensor variable to be persisted."
                      }
                    ],
                    "name" : "variable"
                  }
                ],
                "key.doc.type" : "Function",
                "key.doclength" : 204,
                "key.docoffset" : 106912,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>write<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>variable<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.protocol usr=\"s:4main16DynamicGraph_AnyP\">DynamicGraph_Any<\/ref.protocol><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>codec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.parameter.type> = []<\/decl.var.parameter>)<\/decl.function.method.instance>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 845,
                "key.line" : 2709,
                "key.modulename" : "main",
                "key.name" : "write(_:variable:codec:)",
                "key.namelength" : 67,
                "key.nameoffset" : 107133,
                "key.offset" : 107128,
                "key.parsed_declaration" : "public func write(_ key: String, variable: DynamicGraph_Any, codec: Codec = [])",
                "key.parsed_scope.end" : 2730,
                "key.parsed_scope.start" : 2709,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV5writeyXeXeF\">write(_:tensor:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV5writeyXeXeF\">write(_: String, model: Model, codec: Codec = [], writer: ((String, NNC.AnyTensor) -&gt; ModelWriterResult)? = nil)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV5writeyXeXeF\">write(_: String, model: AnyModelBuilder, codec: Codec = [], writer: ((String, NNC.AnyTensor) -&gt; ModelWriterResult)? = nil)<\/RelatedName>"
                  }
                ],
                "key.substructure" : [

                ],
                "key.typename" : "(DynamicGraph.Store) -> (String, DynamicGraph_Any, DynamicGraph.Store.Codec) -> ()",
                "key.typeusr" : "$s_8variable5codecySS_4main16DynamicGraph_Any_pAC0dE0C5StoreV5CodecVtcD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV5write_8variable5codecySS_AA0bC4_Any_pAE5CodecVtF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public enum <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.ModelWriterResult<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 107978
                  }
                ],
                "key.bodylength" : 139,
                "key.bodyoffset" : 108009,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<decl.name>ModelWriterResult<\/decl.name><\/decl.enum>",
                "key.kind" : "source.lang.swift.decl.enum",
                "key.length" : 164,
                "key.line" : 2731,
                "key.modulename" : "main",
                "key.name" : "ModelWriterResult",
                "key.namelength" : 17,
                "key.nameoffset" : 107990,
                "key.offset" : 107985,
                "key.parsed_declaration" : "public enum ModelWriterResult",
                "key.parsed_scope.end" : 2736,
                "key.parsed_scope.start" : 2731,
                "key.substructure" : [
                  {
                    "key.kind" : "source.lang.swift.decl.enumcase",
                    "key.length" : 23,
                    "key.offset" : 108076,
                    "key.substructure" : [
                      {
                        "key.accessibility" : "source.lang.swift.accessibility.public",
                        "key.annotated_decl" : "<Declaration>case `continue`(<Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
                        "key.column" : 12,
                        "key.decl_lang" : "source.lang.swift",
                        "key.doc.column" : 12,
                        "key.doc.comment" : "Continue to write the tensor with the given name.",
                        "key.doc.declaration" : "",
                        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2733\" column=\"12\"><Name>continue(_:)<\/Name><USR>s:4main12DynamicGraphC5StoreV17ModelWriterResultO8continueyAGSScAGmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Continue to write the tensor with the given name.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                        "key.doc.line" : 2733,
                        "key.doc.name" : "continue(_:)",
                        "key.doc.type" : "Other",
                        "key.doclength" : 54,
                        "key.docoffset" : 108016,
                        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                        "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>`continue`<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                        "key.kind" : "source.lang.swift.decl.enumelement",
                        "key.length" : 18,
                        "key.line" : 2733,
                        "key.modulename" : "main",
                        "key.name" : "continue(_:)",
                        "key.namelength" : 18,
                        "key.nameoffset" : 108081,
                        "key.offset" : 108081,
                        "key.parsed_declaration" : "case `continue`(String)",
                        "key.parsed_scope.end" : 2733,
                        "key.parsed_scope.start" : 2733,
                        "key.substructure" : [

                        ],
                        "key.typename" : "(DynamicGraph.Store.ModelWriterResult.Type) -> (String) -> DynamicGraph.Store.ModelWriterResult",
                        "key.typeusr" : "$sy4main12DynamicGraphC5StoreV17ModelWriterResultOSScAGmcD",
                        "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelWriterResultO8continueyAGSScAGmF"
                      }
                    ]
                  },
                  {
                    "key.kind" : "source.lang.swift.decl.enumcase",
                    "key.length" : 9,
                    "key.offset" : 108134,
                    "key.substructure" : [
                      {
                        "key.accessibility" : "source.lang.swift.accessibility.public",
                        "key.annotated_decl" : "<Declaration>case skip<\/Declaration>",
                        "key.column" : 12,
                        "key.decl_lang" : "source.lang.swift",
                        "key.doc.column" : 12,
                        "key.doc.comment" : "Nothing to write.",
                        "key.doc.declaration" : "",
                        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2735\" column=\"12\"><Name>skip<\/Name><USR>s:4main12DynamicGraphC5StoreV17ModelWriterResultO4skipyA2GmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Nothing to write.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                        "key.doc.line" : 2735,
                        "key.doc.name" : "skip",
                        "key.doc.type" : "Other",
                        "key.doclength" : 22,
                        "key.docoffset" : 108106,
                        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                        "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>skip<\/decl.name><\/decl.enumelement>",
                        "key.kind" : "source.lang.swift.decl.enumelement",
                        "key.length" : 4,
                        "key.line" : 2735,
                        "key.modulename" : "main",
                        "key.name" : "skip",
                        "key.namelength" : 4,
                        "key.nameoffset" : 108139,
                        "key.offset" : 108139,
                        "key.parsed_declaration" : "case skip",
                        "key.parsed_scope.end" : 2735,
                        "key.parsed_scope.start" : 2735,
                        "key.typename" : "(DynamicGraph.Store.ModelWriterResult.Type) -> DynamicGraph.Store.ModelWriterResult",
                        "key.typeusr" : "$sy4main12DynamicGraphC5StoreV17ModelWriterResultOAGmcD",
                        "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelWriterResultO4skipyA2GmF"
                      }
                    ]
                  }
                ],
                "key.typename" : "DynamicGraph.Store.ModelWriterResult.Type",
                "key.typeusr" : "$s4main12DynamicGraphC5StoreV17ModelWriterResultOmD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelWriterResultO"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.internal",
                "key.annotated_decl" : "<Declaration>class <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.ModelWriterHelper<\/Declaration>",
                "key.bodylength" : 310,
                "key.bodyoffset" : 108179,
                "key.column" : 11,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>class<\/syntaxtype.keyword> <ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<decl.name>ModelWriterHelper<\/decl.name><\/decl.class>",
                "key.kind" : "source.lang.swift.decl.class",
                "key.length" : 336,
                "key.line" : 2737,
                "key.modulename" : "main",
                "key.name" : "ModelWriterHelper",
                "key.namelength" : 17,
                "key.nameoffset" : 108160,
                "key.offset" : 108154,
                "key.parsed_declaration" : "class ModelWriterHelper",
                "key.parsed_scope.end" : 2747,
                "key.parsed_scope.start" : 2737,
                "key.substructure" : [
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.internal",
                    "key.annotated_decl" : "<Declaration>let writer: (<Type usr=\"s:SS\">String<\/Type>, NNC.AnyTensor) -&gt; <Type usr=\"s:4main12DynamicGraphC5StoreV17ModelWriterResultO\">ModelWriterResult<\/Type><\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>writer<\/decl.name>: <decl.var.type>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>NNC.AnyTensor<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main12DynamicGraphC5StoreV17ModelWriterResultO\">ModelWriterResult<\/ref.enum><\/decl.function.returntype><\/decl.var.type><\/decl.var.instance>",
                    "key.kind" : "source.lang.swift.decl.var.instance",
                    "key.length" : 56,
                    "key.line" : 2738,
                    "key.modulename" : "main",
                    "key.name" : "writer",
                    "key.namelength" : 6,
                    "key.nameoffset" : 108190,
                    "key.offset" : 108186,
                    "key.parsed_declaration" : "let writer: (String, NNC.AnyTensor) -> ModelWriterResult",
                    "key.parsed_scope.end" : 2738,
                    "key.parsed_scope.start" : 2738,
                    "key.typename" : "<<error type>>",
                    "key.typeusr" : "$sXeD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelWriterHelperC6writerXevp"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.internal",
                    "key.annotated_decl" : "<Declaration>let sqlite: <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type><\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>sqlite<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
                    "key.kind" : "source.lang.swift.decl.var.instance",
                    "key.length" : 35,
                    "key.line" : 2739,
                    "key.modulename" : "main",
                    "key.name" : "sqlite",
                    "key.namelength" : 6,
                    "key.nameoffset" : 108253,
                    "key.offset" : 108249,
                    "key.parsed_declaration" : "let sqlite: UnsafeMutableRawPointer",
                    "key.parsed_scope.end" : 2739,
                    "key.parsed_scope.start" : 2739,
                    "key.typename" : "UnsafeMutableRawPointer",
                    "key.typeusr" : "$sSvD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelWriterHelperC6sqliteSvvp"
                  },
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.internal",
                    "key.annotated_decl" : "<Declaration>init(writer: @escaping (<Type usr=\"s:SS\">String<\/Type>, NNC.AnyTensor) -&gt; <Type usr=\"s:4main12DynamicGraphC5StoreV17ModelWriterResultO\">ModelWriterResult<\/Type>, sqlite: <Type usr=\"s:Sv\">UnsafeMutableRawPointer<\/Type>)<\/Declaration>",
                    "key.bodylength" : 65,
                    "key.bodyoffset" : 108418,
                    "key.column" : 7,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>writer<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@escaping<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>NNC.AnyTensor<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main12DynamicGraphC5StoreV17ModelWriterResultO\">ModelWriterResult<\/ref.enum><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>sqlite<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sv\">UnsafeMutableRawPointer<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
                    "key.kind" : "source.lang.swift.decl.function.method.instance",
                    "key.length" : 193,
                    "key.line" : 2740,
                    "key.modulename" : "main",
                    "key.name" : "init(writer:sqlite:)",
                    "key.namelength" : 125,
                    "key.nameoffset" : 108291,
                    "key.offset" : 108291,
                    "key.parsed_declaration" : "init(\n  writer: @escaping (String, NNC.AnyTensor) -> ModelWriterResult,\n  sqlite: UnsafeMutableRawPointer\n)",
                    "key.parsed_scope.end" : 2746,
                    "key.parsed_scope.start" : 2740,
                    "key.substructure" : [

                    ],
                    "key.typename" : "(DynamicGraph.Store.ModelWriterHelper.Type) -> (<<error type>>, UnsafeMutableRawPointer) -> DynamicGraph.Store.ModelWriterHelper",
                    "key.typeusr" : "$syXeXecD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelWriterHelperCyXeXecfc"
                  }
                ],
                "key.typename" : "DynamicGraph.Store.ModelWriterHelper.Type",
                "key.typeusr" : "$s4main12DynamicGraphC5StoreV17ModelWriterHelperCmD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV17ModelWriterHelperC"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public func write(_ key: <Type usr=\"s:SS\">String<\/Type>, model: <Type usr=\"s:4main5ModelC\">Model<\/Type>, codec: <Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type> = [], writer: ((<Type usr=\"s:SS\">String<\/Type>, NNC.AnyTensor) -&gt; <Type usr=\"s:4main12DynamicGraphC5StoreV17ModelWriterResultO\">ModelWriterResult<\/Type>)? = nil)<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 108810
                  }
                ],
                "key.bodylength" : 1681,
                "key.bodyoffset" : 108958,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 17,
                "key.doc.comment" : " Write a model to the store.\n\n - Parameters:\n   - key: The key corresponding to a particular model.\n   - model: The model where its parameters to be persisted.\n   - writer: You can customize your writer to writer parameter with a different name or skip entirely.",
                "key.doc.declaration" : "public func write(_ key: String, model: Model, codec: Codec = [], writer: ((String, NNC.AnyTensor) -> ModelWriterResult)? = nil)",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2756\" column=\"17\"><Name>write(_:model:codec:writer:)<\/Name><USR>s:4main12DynamicGraphC5StoreV5writeyXeXeF<\/USR><Declaration>public func write(_ key: String, model: Model, codec: Codec = [], writer: ((String, NNC.AnyTensor) -&gt; ModelWriterResult)? = nil)<\/Declaration><CommentParts><Abstract><Para>Write a model to the store.<\/Para><\/Abstract><Parameters><Parameter><Name>key<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The key corresponding to a particular model.<\/Para><\/Discussion><\/Parameter><Parameter><Name>model<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The model where its parameters to be persisted.<\/Para><\/Discussion><\/Parameter><Parameter><Name>writer<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>You can customize your writer to writer parameter with a different name or skip entirely.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
                "key.doc.line" : 2756,
                "key.doc.name" : "write(_:model:codec:writer:)",
                "key.doc.parameters" : [
                  {
                    "discussion" : [
                      {
                        "Para" : "The key corresponding to a particular model."
                      }
                    ],
                    "name" : "key"
                  },
                  {
                    "discussion" : [
                      {
                        "Para" : "The model where its parameters to be persisted."
                      }
                    ],
                    "name" : "model"
                  },
                  {
                    "discussion" : [
                      {
                        "Para" : "You can customize your writer to writer parameter with a different name or skip entirely."
                      }
                    ],
                    "name" : "writer"
                  }
                ],
                "key.doc.type" : "Function",
                "key.doclength" : 310,
                "key.docoffset" : 108495,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>write<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>model<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:4main5ModelC\">Model<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>codec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>writer<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><tuple>(<tuple.element><tuple.element.type>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>NNC.AnyTensor<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main12DynamicGraphC5StoreV17ModelWriterResultO\">ModelWriterResult<\/ref.enum><\/decl.function.returntype><\/tuple.element.type><\/tuple.element>)<\/tuple>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>)<\/decl.function.method.instance>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 1823,
                "key.line" : 2756,
                "key.modulename" : "main",
                "key.name" : "write(_:model:codec:writer:)",
                "key.namelength" : 134,
                "key.nameoffset" : 108822,
                "key.offset" : 108817,
                "key.parsed_declaration" : "public func write(\n  _ key: String, model: Model, codec: Codec = [],\n  writer: ((String, NNC.AnyTensor) -> ModelWriterResult)? = nil\n)",
                "key.parsed_scope.end" : 2800,
                "key.parsed_scope.start" : 2756,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV5writeyXeXeF\">write(_:tensor:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV5write_8variable5codecySS_AA0bC4_Any_pAE5CodecVtF\">write(_:variable:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV5writeyXeXeF\">write(_: String, model: AnyModelBuilder, codec: Codec = [], writer: ((String, NNC.AnyTensor) -&gt; ModelWriterResult)? = nil)<\/RelatedName>"
                  }
                ],
                "key.substructure" : [
                  {
                    "key.annotated_decl" : "<Declaration>let writerHelper: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>writerHelper<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 74,
                    "key.line" : 2770,
                    "key.modulename" : "main",
                    "key.name" : "writerHelper",
                    "key.namelength" : 12,
                    "key.nameoffset" : 109318,
                    "key.offset" : 109314,
                    "key.parsed_declaration" : "let writerHelper = ModelWriterHelper(writer: writer, sqlite: store.sqlite)",
                    "key.parsed_scope.end" : 2770,
                    "key.parsed_scope.start" : 2770,
                    "key.typename" : "<<error type>>",
                    "key.typeusr" : "$sXeD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5writeyXeXeF12writerHelperL_Xevp"
                  },
                  {
                    "key.annotated_decl" : "<Declaration>let unmanaged: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>unmanaged<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 52,
                    "key.line" : 2790,
                    "key.modulename" : "main",
                    "key.name" : "unmanaged",
                    "key.namelength" : 9,
                    "key.nameoffset" : 110219,
                    "key.offset" : 110215,
                    "key.parsed_declaration" : "let unmanaged = Unmanaged.passRetained(writerHelper)",
                    "key.parsed_scope.end" : 2790,
                    "key.parsed_scope.start" : 2790,
                    "key.typename" : "<<error type>>",
                    "key.typeusr" : "$sXeD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV5writeyXeXeF9unmanagedL_Xevp"
                  }
                ],
                "key.typename" : "(DynamicGraph.Store) -> (String, Model, DynamicGraph.Store.Codec, <<error type>>) -> ()",
                "key.typeusr" : "$syXeXecD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV5writeyXeXeF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public func write(_ key: <Type usr=\"s:SS\">String<\/Type>, model: <Type usr=\"s:4main15AnyModelBuilderC\">AnyModelBuilder<\/Type>, codec: <Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type> = [], writer: ((<Type usr=\"s:SS\">String<\/Type>, NNC.AnyTensor) -&gt; <Type usr=\"s:4main12DynamicGraphC5StoreV17ModelWriterResultO\">ModelWriterResult<\/Type>)? = nil)<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 110875
                  }
                ],
                "key.bodylength" : 73,
                "key.bodyoffset" : 111033,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 17,
                "key.doc.comment" : " Write a model builder to the store.\n\n - Parameters:\n   - key: The key corresponding to a particular model builder.\n   - model builder: The model where its parameters to be persisted.",
                "key.doc.declaration" : "public func write(_ key: String, model: AnyModelBuilder, codec: Codec = [], writer: ((String, NNC.AnyTensor) -> ModelWriterResult)? = nil)",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2808\" column=\"17\"><Name>write(_:model:codec:writer:)<\/Name><USR>s:4main12DynamicGraphC5StoreV5writeyXeXeF<\/USR><Declaration>public func write(_ key: String, model: AnyModelBuilder, codec: Codec = [], writer: ((String, NNC.AnyTensor) -&gt; ModelWriterResult)? = nil)<\/Declaration><CommentParts><Abstract><Para>Write a model builder to the store.<\/Para><\/Abstract><Parameters><Parameter><Name>key<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The key corresponding to a particular model builder.<\/Para><\/Discussion><\/Parameter><Parameter><Name>model builder<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The model where its parameters to be persisted.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
                "key.doc.line" : 2808,
                "key.doc.name" : "write(_:model:codec:writer:)",
                "key.doc.parameters" : [
                  {
                    "discussion" : [
                      {
                        "Para" : "The key corresponding to a particular model builder."
                      }
                    ],
                    "name" : "key"
                  },
                  {
                    "discussion" : [
                      {
                        "Para" : "The model where its parameters to be persisted."
                      }
                    ],
                    "name" : "model builder"
                  }
                ],
                "key.doc.type" : "Function",
                "key.doclength" : 225,
                "key.docoffset" : 110645,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>write<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>model<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:4main15AnyModelBuilderC\">AnyModelBuilder<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>codec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>writer<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><tuple>(<tuple.element><tuple.element.type>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>NNC.AnyTensor<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main12DynamicGraphC5StoreV17ModelWriterResultO\">ModelWriterResult<\/ref.enum><\/decl.function.returntype><\/tuple.element.type><\/tuple.element>)<\/tuple>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>)<\/decl.function.method.instance>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 225,
                "key.line" : 2808,
                "key.modulename" : "main",
                "key.name" : "write(_:model:codec:writer:)",
                "key.namelength" : 144,
                "key.nameoffset" : 110887,
                "key.offset" : 110882,
                "key.parsed_declaration" : "public func write(\n  _ key: String, model: AnyModelBuilder, codec: Codec = [],\n  writer: ((String, NNC.AnyTensor) -> ModelWriterResult)? = nil\n)",
                "key.parsed_scope.end" : 2813,
                "key.parsed_scope.start" : 2808,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV5writeyXeXeF\">write(_:tensor:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV5write_8variable5codecySS_AA0bC4_Any_pAE5CodecVtF\">write(_:variable:codec:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main12DynamicGraphC5StoreV5writeyXeXeF\">write(_: String, model: Model, codec: Codec = [], writer: ((String, NNC.AnyTensor) -&gt; ModelWriterResult)? = nil)<\/RelatedName>"
                  }
                ],
                "key.substructure" : [

                ],
                "key.typename" : "(DynamicGraph.Store) -> (String, AnyModelBuilder, DynamicGraph.Store.Codec, <<error type>>) -> ()",
                "key.typeusr" : "$syXeXecD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV5writeyXeXeF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.internal",
                "key.annotated_decl" : "<Declaration>init(_ store: <Type usr=\"s:4main12DynamicGraphC6_StoreC\">_Store<\/Type>, graph: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>)<\/Declaration>",
                "key.bodylength" : 55,
                "key.bodyoffset" : 111157,
                "key.column" : 5,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>store<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:4main12DynamicGraphC6_StoreC\">_Store<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>graph<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 100,
                "key.line" : 2815,
                "key.modulename" : "main",
                "key.name" : "init(_:graph:)",
                "key.namelength" : 42,
                "key.nameoffset" : 111113,
                "key.offset" : 111113,
                "key.parsed_declaration" : "init(_ store: _Store, graph: DynamicGraph)",
                "key.parsed_scope.end" : 2818,
                "key.parsed_scope.start" : 2815,
                "key.substructure" : [

                ],
                "key.typename" : "(DynamicGraph.Store.Type) -> (DynamicGraph._Store, DynamicGraph) -> DynamicGraph.Store",
                "key.typeusr" : "$s_5graph4main12DynamicGraphC5StoreVAD01_E0C_ADtcD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV_5graphAeC01_D0C_ACtcfc"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public var keys: [<Type usr=\"s:SS\">String<\/Type>] { get }<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 111355
                  }
                ],
                "key.bodylength" : 438,
                "key.bodyoffset" : 111382,
                "key.column" : 16,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 16,
                "key.doc.comment" : "Retrieve a list of all tensors in this file. This reads from the disk\nand could take some time to finish.",
                "key.doc.declaration" : "public var keys: [String] { get }",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2824\" column=\"16\"><Name>keys<\/Name><USR>s:4main12DynamicGraphC5StoreV4keysSaySSGvp<\/USR><Declaration>public var keys: [String] { get }<\/Declaration><CommentParts><Abstract><Para>Retrieve a list of all tensors in this file. This reads from the disk and could take some time to finish.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 2824,
                "key.doc.name" : "keys",
                "key.doc.type" : "Other",
                "key.doclength" : 131,
                "key.docoffset" : 111219,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>keys<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
                "key.kind" : "source.lang.swift.decl.var.instance",
                "key.length" : 459,
                "key.line" : 2824,
                "key.modulename" : "main",
                "key.name" : "keys",
                "key.namelength" : 4,
                "key.nameoffset" : 111366,
                "key.offset" : 111362,
                "key.parsed_declaration" : "public var keys: [String]",
                "key.parsed_scope.end" : 2835,
                "key.parsed_scope.start" : 2824,
                "key.typename" : "[String]",
                "key.typeusr" : "$sSaySSGD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV4keysSaySSGvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var stmt: <Type usr=\"s:s13OpaquePointerV\">OpaquePointer<\/Type>?<\/Declaration>",
                "key.column" : 11,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>stmt<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s13OpaquePointerV\">OpaquePointer<\/ref.struct>?<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 30,
                "key.line" : 2825,
                "key.modulename" : "main",
                "key.name" : "stmt",
                "key.namelength" : 4,
                "key.nameoffset" : 111393,
                "key.offset" : 111389,
                "key.parsed_declaration" : "var stmt: OpaquePointer? = nil",
                "key.parsed_scope.end" : 2825,
                "key.parsed_scope.start" : 2825,
                "key.typename" : "OpaquePointer?",
                "key.typeusr" : "$ss13OpaquePointerVSgD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV4keysSaySSGvg4stmtL_s13OpaquePointerVSgvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var keys: [<Type usr=\"s:SS\">String<\/Type>]<\/Declaration>",
                "key.column" : 11,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>keys<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 21,
                "key.line" : 2828,
                "key.modulename" : "main",
                "key.name" : "keys",
                "key.namelength" : 4,
                "key.nameoffset" : 111575,
                "key.offset" : 111571,
                "key.parsed_declaration" : "var keys = [String]()",
                "key.parsed_scope.end" : 2828,
                "key.parsed_scope.start" : 2828,
                "key.typename" : "[String]",
                "key.typeusr" : "$sSaySSGD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV4keysSaySSGvgAFL_AGvp"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public func remove(_ key: <Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 111880
                  }
                ],
                "key.bodylength" : 409,
                "key.bodyoffset" : 111915,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 17,
                "key.doc.comment" : "Remove one tensor by its key.",
                "key.doc.declaration" : "public func remove(_ key: String)",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2840\" column=\"17\"><Name>remove(_:)<\/Name><USR>s:4main12DynamicGraphC5StoreV6removeyySSF<\/USR><Declaration>public func remove(_ key: String)<\/Declaration><CommentParts><Abstract><Para>Remove one tensor by its key.<\/Para><\/Abstract><\/CommentParts><\/Function>",
                "key.doc.line" : 2840,
                "key.doc.name" : "remove(_:)",
                "key.doc.type" : "Function",
                "key.doclength" : 48,
                "key.docoffset" : 111827,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>remove<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 438,
                "key.line" : 2840,
                "key.modulename" : "main",
                "key.name" : "remove(_:)",
                "key.namelength" : 21,
                "key.nameoffset" : 111892,
                "key.offset" : 111887,
                "key.parsed_declaration" : "public func remove(_ key: String)",
                "key.parsed_scope.end" : 2849,
                "key.parsed_scope.start" : 2840,
                "key.substructure" : [
                  {
                    "key.annotated_decl" : "<Declaration>var deletion: <Type usr=\"s:s13OpaquePointerV\">OpaquePointer<\/Type>?<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>deletion<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s13OpaquePointerV\">OpaquePointer<\/ref.struct>?<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 34,
                    "key.line" : 2841,
                    "key.modulename" : "main",
                    "key.name" : "deletion",
                    "key.namelength" : 8,
                    "key.nameoffset" : 111926,
                    "key.offset" : 111922,
                    "key.parsed_declaration" : "var deletion: OpaquePointer? = nil",
                    "key.parsed_scope.end" : 2841,
                    "key.parsed_scope.start" : 2841,
                    "key.typename" : "OpaquePointer?",
                    "key.typeusr" : "$ss13OpaquePointerVSgD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV6removeyySSF8deletionL_s13OpaquePointerVSgvp"
                  },
                  {
                    "key.annotated_decl" : "<Declaration>let SQLITE_TRANSIENT: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                    "key.column" : 11,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>SQLITE_TRANSIENT<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 110,
                    "key.line" : 2844,
                    "key.modulename" : "main",
                    "key.name" : "SQLITE_TRANSIENT",
                    "key.namelength" : 16,
                    "key.nameoffset" : 112087,
                    "key.offset" : 112083,
                    "key.parsed_declaration" : "let SQLITE_TRANSIENT = unsafeBitCast(\n  OpaquePointer(bitPattern: -1), to: sqlite3_destructor_type.self)",
                    "key.parsed_scope.end" : 2844,
                    "key.parsed_scope.start" : 2844,
                    "key.typename" : "<<error type>>",
                    "key.typeusr" : "$sXeD",
                    "key.usr" : "s:4main12DynamicGraphC5StoreV6removeyySSF16SQLITE_TRANSIENTL_Xevp"
                  }
                ],
                "key.typename" : "(DynamicGraph.Store) -> (String) -> ()",
                "key.typeusr" : "$syySScD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV6removeyySSF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public func removeAll()<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 112439
                  }
                ],
                "key.bodylength" : 164,
                "key.bodyoffset" : 112464,
                "key.column" : 17,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 17,
                "key.doc.comment" : "Remove all tensors from the store. This also vacuums the store to minimize its size.",
                "key.doc.declaration" : "public func removeAll()",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2854\" column=\"17\"><Name>removeAll()<\/Name><USR>s:4main12DynamicGraphC5StoreV9removeAllyyF<\/USR><Declaration>public func removeAll()<\/Declaration><CommentParts><Abstract><Para>Remove all tensors from the store. This also vacuums the store to minimize its size.<\/Para><\/Abstract><\/CommentParts><\/Function>",
                "key.doc.line" : 2854,
                "key.doc.name" : "removeAll()",
                "key.doc.type" : "Function",
                "key.doclength" : 103,
                "key.docoffset" : 112331,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>removeAll<\/decl.name>()<\/decl.function.method.instance>",
                "key.kind" : "source.lang.swift.decl.function.method.instance",
                "key.length" : 183,
                "key.line" : 2854,
                "key.modulename" : "main",
                "key.name" : "removeAll()",
                "key.namelength" : 11,
                "key.nameoffset" : 112451,
                "key.offset" : 112446,
                "key.parsed_declaration" : "public func removeAll()",
                "key.parsed_scope.end" : 2857,
                "key.parsed_scope.start" : 2854,
                "key.substructure" : [

                ],
                "key.typename" : "(DynamicGraph.Store) -> () -> ()",
                "key.typeusr" : "$syycD",
                "key.usr" : "s:4main12DynamicGraphC5StoreV9removeAllyyF"
              }
            ],
            "key.typename" : "DynamicGraph.Store.Type",
            "key.typeusr" : "$s4main12DynamicGraphC5StoreVmD",
            "key.usr" : "s:4main12DynamicGraphC5StoreV"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public enum OpenError : <Type usr=\"s:s5ErrorP\">Error<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 112638
              }
            ],
            "key.bodylength" : 23,
            "key.bodyoffset" : 112668,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 5,
                "key.offset" : 112661
              }
            ],
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>OpenError<\/decl.name> : <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol><\/decl.enum>",
            "key.inheritedtypes" : [
              {
                "key.name" : "Error"
              }
            ],
            "key.kind" : "source.lang.swift.decl.enum",
            "key.length" : 47,
            "key.line" : 2861,
            "key.modulename" : "main",
            "key.name" : "OpenError",
            "key.namelength" : 9,
            "key.nameoffset" : 112650,
            "key.offset" : 112645,
            "key.parsed_declaration" : "public enum OpenError: Error",
            "key.parsed_scope.end" : 2863,
            "key.parsed_scope.start" : 2861,
            "key.substructure" : [
              {
                "key.kind" : "source.lang.swift.decl.enumcase",
                "key.length" : 15,
                "key.offset" : 112673,
                "key.substructure" : [
                  {
                    "key.accessibility" : "source.lang.swift.accessibility.public",
                    "key.annotated_decl" : "<Declaration>case cannotOpen<\/Declaration>",
                    "key.column" : 10,
                    "key.decl_lang" : "source.lang.swift",
                    "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                    "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>cannotOpen<\/decl.name><\/decl.enumelement>",
                    "key.kind" : "source.lang.swift.decl.enumelement",
                    "key.length" : 10,
                    "key.line" : 2862,
                    "key.modulename" : "main",
                    "key.name" : "cannotOpen",
                    "key.namelength" : 10,
                    "key.nameoffset" : 112678,
                    "key.offset" : 112678,
                    "key.parsed_declaration" : "case cannotOpen",
                    "key.parsed_scope.end" : 2862,
                    "key.parsed_scope.start" : 2862,
                    "key.typename" : "(DynamicGraph.OpenError.Type) -> DynamicGraph.OpenError",
                    "key.typeusr" : "$sy4main12DynamicGraphC9OpenErrorOAEmcD",
                    "key.usr" : "s:4main12DynamicGraphC9OpenErrorO06cannotD0yA2EmF"
                  }
                ]
              }
            ],
            "key.typename" : "DynamicGraph.OpenError.Type",
            "key.typeusr" : "$s4main12DynamicGraphC9OpenErrorOmD",
            "key.usr" : "s:4main12DynamicGraphC9OpenErrorO"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@discardableResult public func openStore&lt;SuccessResult&gt;(_ filePath: <Type usr=\"s:SS\">String<\/Type>, flags: <Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV8OpenFlagV\">OpenFlag<\/Type> = .truncateWhenClose, procedure: (_ store: <Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>) throws -&gt; <Type usr=\"s:4main12DynamicGraphC9openStore_5flags9procedures6ResultOyxAC9OpenErrorOGSS_AC0E0V0I4FlagVxAMKXEtKlF07SuccessH0L_xmfp\">SuccessResult<\/Type>) rethrows -&gt; <Type usr=\"s:s6ResultO\">Result<\/Type>&lt;<Type usr=\"s:4main12DynamicGraphC9openStore_5flags9procedures6ResultOyxAC9OpenErrorOGSS_AC0E0V0I4FlagVxAMKXEtKlF07SuccessH0L_xmfp\">SuccessResult<\/Type>, <Type usr=\"s:4main12DynamicGraphC9OpenErrorO\">OpenError<\/Type>&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.rethrows",
                "key.length" : 8,
                "key.offset" : 113227
              },
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 113061
              },
              {
                "key.attribute" : "source.decl.attribute.discardableResult",
                "key.length" : 18,
                "key.offset" : 113040
              }
            ],
            "key.bodylength" : 736,
            "key.bodyoffset" : 113273,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : " Open the store from a file.\n\n - Parameters:\n   - filePath: The file path for the store.\n   - flags: The flags for the opening store. Default to truncateWhenClose.\n   - procedure: When the store is open, you can access it from this closure.\n - Returns: Wether this store can be successfully open or not.",
            "key.doc.declaration" : "public func openStore<SuccessResult>(_ filePath: String, flags: Store.OpenFlag = .truncateWhenClose, procedure: (_ store: Store) throws -> SuccessResult) rethrows -> Result<SuccessResult, OpenError>",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift\" line=\"2875\" column=\"15\"><Name>openStore(_:flags:procedure:)<\/Name><USR>s:4main12DynamicGraphC9openStore_5flags9procedures6ResultOyxAC9OpenErrorOGSS_AC0E0V0I4FlagVxAMKXEtKlF<\/USR><Declaration>public func openStore&lt;SuccessResult&gt;(_ filePath: String, flags: Store.OpenFlag = .truncateWhenClose, procedure: (_ store: Store) throws -&gt; SuccessResult) rethrows -&gt; Result&lt;SuccessResult, OpenError&gt;<\/Declaration><CommentParts><Abstract><Para>Open the store from a file.<\/Para><\/Abstract><Parameters><Parameter><Name>filePath<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The file path for the store.<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The flags for the opening store. Default to truncateWhenClose.<\/Para><\/Discussion><\/Parameter><Parameter><Name>procedure<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>When the store is open, you can access it from this closure.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>Wether this store can be successfully open or not.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 2875,
            "key.doc.name" : "openStore(_:flags:procedure:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "The file path for the store."
                  }
                ],
                "name" : "filePath"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The flags for the opening store. Default to truncateWhenClose."
                  }
                ],
                "name" : "flags"
              },
              {
                "discussion" : [
                  {
                    "Para" : "When the store is open, you can access it from this closure."
                  }
                ],
                "name" : "procedure"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "Wether this store can be successfully open or not."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 341,
            "key.docoffset" : 112696,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@discardableResult<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>openStore<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main12DynamicGraphC9openStore_5flags9procedures6ResultOyxAC9OpenErrorOGSS_AC0E0V0I4FlagVxAMKXEtKlF07SuccessH0L_xmfp\"><decl.generic_type_param.name>SuccessResult<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>filePath<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV8OpenFlagV\">OpenFlag<\/ref.struct><\/decl.var.parameter.type> = .truncateWhenClose<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>procedure<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>store<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main12DynamicGraphC9openStore_5flags9procedures6ResultOyxAC9OpenErrorOGSS_AC0E0V0I4FlagVxAMKXEtKlF07SuccessH0L_xmfp\">SuccessResult<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.enum usr=\"s:s6ResultO\">Result<\/ref.enum>&lt;<ref.generic_type_param usr=\"s:4main12DynamicGraphC9openStore_5flags9procedures6ResultOyxAC9OpenErrorOGSS_AC0E0V0I4FlagVxAMKXEtKlF07SuccessH0L_xmfp\">SuccessResult<\/ref.generic_type_param>, <ref.enum usr=\"s:4main12DynamicGraphC9OpenErrorO\">OpenError<\/ref.enum>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 942,
            "key.line" : 2875,
            "key.modulename" : "main",
            "key.name" : "openStore(_:flags:procedure:)",
            "key.namelength" : 153,
            "key.nameoffset" : 113073,
            "key.offset" : 113068,
            "key.parsed_declaration" : "public func openStore<SuccessResult>(\n  _ filePath: String, flags: Store.OpenFlag = .truncateWhenClose,\n  procedure: (_ store: Store) throws -> SuccessResult\n) rethrows -> Result<SuccessResult, OpenError>",
            "key.parsed_scope.end" : 2893,
            "key.parsed_scope.start" : 2875,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>SuccessResult<\/Declaration>",
                "key.column" : 25,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>SuccessResult<\/decl.generic_type_param.name><\/decl.generic_type_param>",
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 13,
                "key.line" : 2875,
                "key.modulename" : "main",
                "key.name" : "SuccessResult",
                "key.namelength" : 13,
                "key.nameoffset" : 113083,
                "key.offset" : 113083,
                "key.parsed_declaration" : "public func openStore<SuccessResult",
                "key.parsed_scope.end" : 2875,
                "key.parsed_scope.start" : 2875,
                "key.typename" : "SuccessResult.Type",
                "key.typeusr" : "$sxmD",
                "key.usr" : "s:4main12DynamicGraphC9openStore_5flags9procedures6ResultOyxAC9OpenErrorOGSS_AC0E0V0I4FlagVxAMKXEtKlF07SuccessH0L_xmfp"
              },
              {
                "key.annotated_decl" : "<Declaration>var _sqlite: <Type usr=\"s:s13OpaquePointerV\">OpaquePointer<\/Type>?<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_sqlite<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s13OpaquePointerV\">OpaquePointer<\/ref.struct>?<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 33,
                "key.line" : 2879,
                "key.modulename" : "main",
                "key.name" : "_sqlite",
                "key.namelength" : 7,
                "key.nameoffset" : 113282,
                "key.offset" : 113278,
                "key.parsed_declaration" : "var _sqlite: OpaquePointer? = nil",
                "key.parsed_scope.end" : 2879,
                "key.parsed_scope.start" : 2879,
                "key.typename" : "OpaquePointer?",
                "key.typeusr" : "$ss13OpaquePointerVSgD",
                "key.usr" : "s:4main12DynamicGraphC9openStore_5flags9procedures6ResultOyxAC9OpenErrorOGSS_AC0E0V0I4FlagVxAMKXEtKlF7_sqliteL_s13OpaquePointerVSgvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let store: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Store.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>store<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 68,
                "key.line" : 2891,
                "key.modulename" : "main",
                "key.name" : "store",
                "key.namelength" : 5,
                "key.nameoffset" : 113900,
                "key.offset" : 113896,
                "key.parsed_declaration" : "let store = Store(_Store(sqlite: sqlite, flags: flags), graph: self)",
                "key.parsed_scope.end" : 2891,
                "key.parsed_scope.start" : 2891,
                "key.typename" : "DynamicGraph.Store",
                "key.typeusr" : "$s4main12DynamicGraphC5StoreVD",
                "key.usr" : "s:4main12DynamicGraphC9openStore_5flags9procedures6ResultOyxAC9OpenErrorOGSS_AC0E0V0I4FlagVxAMKXEtKlF5storeL_AMvp"
              }
            ],
            "key.typename" : "<SuccessResult> (DynamicGraph) -> (String, DynamicGraph.Store.OpenFlag, (DynamicGraph.Store) throws -> SuccessResult) throws -> Result<SuccessResult, DynamicGraph.OpenError>",
            "key.typeusr" : "$s_5flags9procedures6ResultOyx4main12DynamicGraphC9OpenErrorOGSS_AG5StoreV0G4FlagVxALKXEtKcluD",
            "key.usr" : "s:4main12DynamicGraphC9openStore_5flags9procedures6ResultOyxAC9OpenErrorOGSS_AC0E0V0I4FlagVxAMKXEtKlF"
          }
        ],
        "key.typename" : "DynamicGraph.Type",
        "key.typeusr" : "$s4main12DynamicGraphCmD",
        "key.usr" : "s:4main12DynamicGraphC"
      }
    ]
  }
}
