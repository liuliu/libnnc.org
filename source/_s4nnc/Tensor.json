{
  "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 62212,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public final class CmdParamsFactory<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.final",
            "key.length" : 5,
            "key.offset" : 39
          },
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 32
          }
        ],
        "key.bodylength" : 192,
        "key.bodyoffset" : 69,
        "key.column" : 20,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>CmdParamsFactory<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 217,
        "key.line" : 4,
        "key.modulename" : "main",
        "key.name" : "CmdParamsFactory",
        "key.namelength" : 16,
        "key.nameoffset" : 51,
        "key.offset" : 45,
        "key.parsed_declaration" : "public final class CmdParamsFactory",
        "key.parsed_scope.end" : 14,
        "key.parsed_scope.start" : 4,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static let factory: <Type usr=\"s:4main16CmdParamsFactoryC\">CmdParamsFactory<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 72
              }
            ],
            "key.column" : 21,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>factory<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main16CmdParamsFactoryC\">CmdParamsFactory<\/ref.class><\/decl.var.type><\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 39,
            "key.line" : 5,
            "key.modulename" : "main",
            "key.name" : "factory",
            "key.namelength" : 7,
            "key.nameoffset" : 90,
            "key.offset" : 79,
            "key.parsed_declaration" : "public static let factory = CmdParamsFactory()",
            "key.parsed_scope.end" : 5,
            "key.parsed_scope.start" : 5,
            "key.reusingastcontext" : false,
            "key.typename" : "CmdParamsFactory",
            "key.typeusr" : "$s4main16CmdParamsFactoryCD",
            "key.usr" : "s:4main16CmdParamsFactoryC7factoryACvpZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>init()<\/Declaration>",
            "key.bodylength" : 22,
            "key.bodyoffset" : 129,
            "key.column" : 3,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>()<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 31,
            "key.line" : 6,
            "key.modulename" : "main",
            "key.name" : "init()",
            "key.namelength" : 6,
            "key.nameoffset" : 121,
            "key.offset" : 121,
            "key.parsed_declaration" : "init()",
            "key.parsed_scope.end" : 8,
            "key.parsed_scope.start" : 6,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(CmdParamsFactory.Type) -> () -> CmdParamsFactory",
            "key.typeusr" : "$s4main16CmdParamsFactoryCycD",
            "key.usr" : "s:4main16CmdParamsFactoryCACycfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func newParams() -&gt; ccv_nnc_cmd_param_t<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 155
              }
            ],
            "key.bodylength" : 36,
            "key.bodyoffset" : 203,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>newParams<\/decl.name>() -&gt; <decl.function.returntype>ccv_nnc_cmd_param_t<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 78,
            "key.line" : 9,
            "key.modulename" : "main",
            "key.name" : "newParams()",
            "key.namelength" : 11,
            "key.nameoffset" : 167,
            "key.offset" : 162,
            "key.parsed_declaration" : "public func newParams() -> ccv_nnc_cmd_param_t",
            "key.parsed_scope.end" : 11,
            "key.parsed_scope.start" : 9,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(CmdParamsFactory) -> () -> <<error type>>",
            "key.typeusr" : "$syXeXecD",
            "key.usr" : "s:4main16CmdParamsFactoryC03newC0yXeXeF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>func sink()<\/Declaration>",
            "key.bodylength" : 3,
            "key.bodyoffset" : 256,
            "key.column" : 8,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>sink<\/decl.name>()<\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 17,
            "key.line" : 12,
            "key.modulename" : "main",
            "key.name" : "sink()",
            "key.namelength" : 6,
            "key.nameoffset" : 248,
            "key.offset" : 243,
            "key.parsed_declaration" : "func sink()",
            "key.parsed_scope.end" : 13,
            "key.parsed_scope.start" : 12,
            "key.reusingastcontext" : false,
            "key.typename" : "(CmdParamsFactory) -> () -> ()",
            "key.typeusr" : "$syycD",
            "key.usr" : "s:4main16CmdParamsFactoryC4sinkyyF"
          }
        ],
        "key.typename" : "CmdParamsFactory.Type",
        "key.typeusr" : "$s4main16CmdParamsFactoryCmD",
        "key.usr" : "s:4main16CmdParamsFactoryC"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public enum DeviceKind<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 311
          }
        ],
        "key.bodylength" : 1278,
        "key.bodyoffset" : 335,
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 13,
        "key.doc.comment" : "The kind of devices the tensor resides on.",
        "key.doc.declaration" : "public enum DeviceKind",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"17\" column=\"13\"><Name>DeviceKind<\/Name><USR>s:4main10DeviceKindO<\/USR><Declaration>public enum DeviceKind<\/Declaration><CommentParts><Abstract><Para>The kind of devices the tensor resides on.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 17,
        "key.doc.name" : "DeviceKind",
        "key.doc.type" : "Other",
        "key.doclength" : 47,
        "key.docoffset" : 264,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>DeviceKind<\/decl.name><\/decl.enum>",
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 1296,
        "key.line" : 17,
        "key.modulename" : "main",
        "key.name" : "DeviceKind",
        "key.namelength" : 10,
        "key.nameoffset" : 323,
        "key.offset" : 318,
        "key.parsed_declaration" : "public enum DeviceKind",
        "key.parsed_scope.end" : 65,
        "key.parsed_scope.start" : 17,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 8,
            "key.offset" : 338,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case CPU<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>CPU<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 3,
                "key.line" : 18,
                "key.modulename" : "main",
                "key.name" : "CPU",
                "key.namelength" : 3,
                "key.nameoffset" : 343,
                "key.offset" : 343,
                "key.parsed_declaration" : "case CPU",
                "key.parsed_scope.end" : 18,
                "key.parsed_scope.start" : 18,
                "key.reusingastcontext" : false,
                "key.typename" : "(DeviceKind.Type) -> DeviceKind",
                "key.typeusr" : "$sy4main10DeviceKindOACmcD",
                "key.usr" : "s:4main10DeviceKindO3CPUyA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 13,
            "key.offset" : 349,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case GPU(<Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>GPU<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 8,
                "key.line" : 19,
                "key.modulename" : "main",
                "key.name" : "GPU(_:)",
                "key.namelength" : 8,
                "key.nameoffset" : 354,
                "key.offset" : 354,
                "key.parsed_declaration" : "case GPU(Int)",
                "key.parsed_scope.end" : 19,
                "key.parsed_scope.start" : 19,
                "key.reusingastcontext" : false,
                "key.substructure" : [

                ],
                "key.typename" : "(DeviceKind.Type) -> (Int) -> DeviceKind",
                "key.typeusr" : "$sy4main10DeviceKindOSicACmcD",
                "key.usr" : "s:4main10DeviceKindO3GPUyACSicACmF"
              }
            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func from(cTensorParams: ccv_nnc_tensor_param_t) -&gt; <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 366
              }
            ],
            "key.bodylength" : 283,
            "key.bodyoffset" : 444,
            "key.column" : 22,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>from<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>cTensorParams<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 355,
            "key.line" : 21,
            "key.modulename" : "main",
            "key.name" : "from(cTensorParams:)",
            "key.namelength" : 43,
            "key.nameoffset" : 385,
            "key.offset" : 373,
            "key.parsed_declaration" : "public static func from(cTensorParams: ccv_nnc_tensor_param_t) -> DeviceKind",
            "key.parsed_scope.end" : 30,
            "key.parsed_scope.start" : 21,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let type: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>type<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 34,
                "key.line" : 22,
                "key.modulename" : "main",
                "key.name" : "type",
                "key.namelength" : 4,
                "key.nameoffset" : 453,
                "key.offset" : 449,
                "key.parsed_declaration" : "let type = Int(cTensorParams.type)",
                "key.parsed_scope.end" : 22,
                "key.parsed_scope.start" : 22,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s4type2ofq_x_tr0_lF\">type(of:)<\/RelatedName>"
                  }
                ],
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main10DeviceKindO4fromyXeXeFZ4typeL_Xevp"
              }
            ],
            "key.typename" : "(DeviceKind.Type) -> (<<error type>>) -> DeviceKind",
            "key.typeusr" : "$syXeXecD",
            "key.usr" : "s:4main10DeviceKindO4fromyXeXeFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public enum <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>.GPUs<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 781
              }
            ],
            "key.bodylength" : 600,
            "key.bodyoffset" : 799,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : "GPU device related information.",
            "key.doc.declaration" : "public enum main.DeviceKind.GPUs",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"35\" column=\"15\"><Name>GPUs<\/Name><USR>s:4main10DeviceKindO4GPUsO<\/USR><Declaration>public enum main.DeviceKind.GPUs<\/Declaration><CommentParts><Abstract><Para>GPU device related information.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 35,
            "key.doc.name" : "GPUs",
            "key.doc.type" : "Other",
            "key.doclength" : 46,
            "key.docoffset" : 732,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum>.<decl.name>GPUs<\/decl.name><\/decl.enum>",
            "key.kind" : "source.lang.swift.decl.enum",
            "key.length" : 612,
            "key.line" : 35,
            "key.modulename" : "main",
            "key.name" : "GPUs",
            "key.namelength" : 4,
            "key.nameoffset" : 793,
            "key.offset" : 788,
            "key.parsed_declaration" : "public enum GPUs",
            "key.parsed_scope.end" : 54,
            "key.parsed_scope.start" : 35,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public static var count: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 860
                  }
                ],
                "key.bodylength" : 68,
                "key.bodyoffset" : 890,
                "key.column" : 23,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 23,
                "key.doc.comment" : "Number of available GPU devices.",
                "key.doc.declaration" : "public static var count: Int { get }",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"39\" column=\"23\"><Name>count<\/Name><USR>s:4main10DeviceKindO4GPUsO5countSivpZ<\/USR><Declaration>public static var count: Int { get }<\/Declaration><CommentParts><Abstract><Para>Number of available GPU devices.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 39,
                "key.doc.name" : "count",
                "key.doc.type" : "Other",
                "key.doclength" : 51,
                "key.docoffset" : 804,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
                "key.kind" : "source.lang.swift.decl.var.static",
                "key.length" : 92,
                "key.line" : 39,
                "key.modulename" : "main",
                "key.name" : "count",
                "key.namelength" : 5,
                "key.nameoffset" : 878,
                "key.offset" : 867,
                "key.parsed_declaration" : "public static var count: Int",
                "key.parsed_scope.end" : 41,
                "key.parsed_scope.start" : 39,
                "key.reusingastcontext" : false,
                "key.typename" : "Int",
                "key.typeusr" : "$sSiD",
                "key.usr" : "s:4main10DeviceKindO4GPUsO5countSivpZ"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public static func permute(_ ordinals: <Type usr=\"s:Si\">Int<\/Type>...)<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 1109
                  }
                ],
                "key.bodylength" : 238,
                "key.bodyoffset" : 1157,
                "key.column" : 24,
                "key.decl_lang" : "source.lang.swift",
                "key.doc.column" : 24,
                "key.doc.comment" : "Remap GPU devices. It supports at most 64 devices remapping. Call this method\nagain would clear up the old remap.",
                "key.doc.declaration" : "public static func permute(_ ordinals: Int...)",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"47\" column=\"24\"><Name>permute(_:)<\/Name><USR>s:4main10DeviceKindO4GPUsO7permuteyySid_tFZ<\/USR><Declaration>public static func permute(_ ordinals: Int...)<\/Declaration><CommentParts><Abstract><Para>Remap GPU devices. It supports at most 64 devices remapping. Call this method again would clear up the old remap.<\/Para><\/Abstract><\/CommentParts><\/Function>",
                "key.doc.line" : 47,
                "key.doc.name" : "permute(_:)",
                "key.doc.type" : "Function",
                "key.doclength" : 139,
                "key.docoffset" : 965,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>permute<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>ordinals<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct>...<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.static>",
                "key.kind" : "source.lang.swift.decl.function.method.static",
                "key.length" : 280,
                "key.line" : 47,
                "key.modulename" : "main",
                "key.name" : "permute(_:)",
                "key.namelength" : 27,
                "key.nameoffset" : 1128,
                "key.offset" : 1116,
                "key.parsed_declaration" : "public static func permute(_ ordinals: Int...)",
                "key.parsed_scope.end" : 53,
                "key.parsed_scope.start" : 47,
                "key.reusingastcontext" : false,
                "key.substructure" : [

                ],
                "key.typename" : "(DeviceKind.GPUs.Type) -> (Int...) -> ()",
                "key.typeusr" : "$syySid_tcD",
                "key.usr" : "s:4main10DeviceKindO4GPUsO7permuteyySid_tFZ"
              }
            ],
            "key.typename" : "DeviceKind.GPUs.Type",
            "key.typeusr" : "$s4main10DeviceKindO4GPUsOmD",
            "key.usr" : "s:4main10DeviceKindO4GPUsO"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline var toC: <Type usr=\"s:s5Int32V\">Int32<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 1404
              }
            ],
            "key.bodylength" : 171,
            "key.bodyoffset" : 1440,
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>toC<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 188,
            "key.line" : 57,
            "key.modulename" : "main",
            "key.name" : "toC",
            "key.namelength" : 3,
            "key.nameoffset" : 1428,
            "key.offset" : 1424,
            "key.parsed_declaration" : "var toC: Int32",
            "key.parsed_scope.end" : 64,
            "key.parsed_scope.start" : 57,
            "key.reusingastcontext" : false,
            "key.typename" : "Int32",
            "key.typeusr" : "$ss5Int32VD",
            "key.usr" : "s:4main10DeviceKindO3toCs5Int32Vvp"
          }
        ],
        "key.typename" : "DeviceKind.Type",
        "key.typeusr" : "$s4main10DeviceKindOmD",
        "key.usr" : "s:4main10DeviceKindO"
      },
      {
        "key.annotated_decl" : "<Declaration>public enum DeviceKind<\/Declaration>",
        "key.bodylength" : 232,
        "key.bodyoffset" : 1649,
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 13,
        "key.doc.declaration" : "public enum DeviceKind",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"17\" column=\"13\"><Name>DeviceKind<\/Name><USR>s:4main10DeviceKindO<\/USR><Declaration>public enum DeviceKind<\/Declaration><CommentParts><Abstract><Para>The kind of devices the tensor resides on.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 17,
        "key.doc.name" : "DeviceKind",
        "key.doc.type" : "Other",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 9,
            "key.offset" : 1638
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>DeviceKind<\/decl.name><\/decl.enum>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Equatable"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 266,
        "key.line" : 17,
        "key.modulename" : "main",
        "key.name" : "DeviceKind",
        "key.namelength" : 10,
        "key.nameoffset" : 1626,
        "key.offset" : 1616,
        "key.parsed_declaration" : "extension DeviceKind: Equatable",
        "key.parsed_scope.end" : 76,
        "key.parsed_scope.start" : 67,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func == (lhs: `Self`, rhs: `Self`) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1652
              }
            ],
            "key.bodylength" : 173,
            "key.bodyoffset" : 1706,
            "key.column" : 22,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "static func == (lhs: Self, rhs: Self) -> Bool",
            "key.doc.discussion" : [
              {
                "Para" : "Equality is the inverse of inequality. For any values `a` and `b`, `a == b` implies that `a != b` is `false`."
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Function><Name>==(_:_:)<\/Name><USR>s:SQ2eeoiySbx_xtFZ<\/USR><Declaration>static func == (lhs: Self, rhs: Self) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Returns a Boolean value indicating whether two values are equal.<\/Para><\/Abstract><Parameters><Parameter><Name>lhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A value to compare.<\/Para><\/Discussion><\/Parameter><Parameter><Name>rhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Another value to compare.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Equality is the inverse of inequality. For any values <codeVoice>a<\/codeVoice> and <codeVoice>b<\/codeVoice>, <codeVoice>a == b<\/codeVoice> implies that <codeVoice>a != b<\/codeVoice> is <codeVoice>false<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Equatable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.name" : "==(_:_:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "A value to compare."
                  }
                ],
                "name" : "lhs"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Another value to compare."
                  }
                ],
                "name" : "rhs"
              }
            ],
            "key.doc.type" : "Function",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>== <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type>`Self`<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type>`Self`<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 221,
            "key.line" : 68,
            "key.modulename" : "main",
            "key.name" : "==(_:_:)",
            "key.namelength" : 25,
            "key.nameoffset" : 1671,
            "key.offset" : 1659,
            "key.overrides" : [
              {
                "key.usr" : "s:SQ2eeoiySbx_xtFZ"
              }
            ],
            "key.parsed_declaration" : "public static func == (lhs: Self, rhs: Self) -> Bool",
            "key.parsed_scope.end" : 75,
            "key.parsed_scope.start" : 68,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(DeviceKind.Type) -> (DeviceKind, DeviceKind) -> Bool",
            "key.typeusr" : "$sySb4main10DeviceKindO_ACtcD",
            "key.usr" : "s:SQ2eeoiySbx_xtFZ"
          }
        ],
        "key.typename" : "DeviceKind.Type",
        "key.typeusr" : "$s4main10DeviceKindOmD",
        "key.usr" : "s:4main10DeviceKindO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public enum TensorFormat<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 1909
          }
        ],
        "key.bodylength" : 623,
        "key.bodyoffset" : 1935,
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 13,
        "key.doc.comment" : "Tensor arrangements.",
        "key.doc.declaration" : "public enum TensorFormat",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"79\" column=\"13\"><Name>TensorFormat<\/Name><USR>s:4main12TensorFormatO<\/USR><Declaration>public enum TensorFormat<\/Declaration><CommentParts><Abstract><Para>Tensor arrangements.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 79,
        "key.doc.name" : "TensorFormat",
        "key.doc.type" : "Other",
        "key.doclength" : 25,
        "key.docoffset" : 1884,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>TensorFormat<\/decl.name><\/decl.enum>",
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 643,
        "key.line" : 79,
        "key.modulename" : "main",
        "key.name" : "TensorFormat",
        "key.namelength" : 12,
        "key.nameoffset" : 1921,
        "key.offset" : 1916,
        "key.parsed_declaration" : "public enum TensorFormat",
        "key.parsed_scope.end" : 108,
        "key.parsed_scope.start" : 79,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 9,
            "key.offset" : 1938,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case NHWC<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>NHWC<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 4,
                "key.line" : 80,
                "key.modulename" : "main",
                "key.name" : "NHWC",
                "key.namelength" : 4,
                "key.nameoffset" : 1943,
                "key.offset" : 1943,
                "key.parsed_declaration" : "case NHWC",
                "key.parsed_scope.end" : 80,
                "key.parsed_scope.start" : 80,
                "key.reusingastcontext" : false,
                "key.typename" : "(TensorFormat.Type) -> TensorFormat",
                "key.typeusr" : "$sy4main12TensorFormatOACmcD",
                "key.usr" : "s:4main12TensorFormatO4NHWCyA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 9,
            "key.offset" : 1950,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case NCHW<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>NCHW<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 4,
                "key.line" : 81,
                "key.modulename" : "main",
                "key.name" : "NCHW",
                "key.namelength" : 4,
                "key.nameoffset" : 1955,
                "key.offset" : 1955,
                "key.parsed_declaration" : "case NCHW",
                "key.parsed_scope.end" : 81,
                "key.parsed_scope.start" : 81,
                "key.reusingastcontext" : false,
                "key.typename" : "(TensorFormat.Type) -> TensorFormat",
                "key.typeusr" : "$sy4main12TensorFormatOACmcD",
                "key.usr" : "s:4main12TensorFormatO4NCHWyA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 9,
            "key.offset" : 1962,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case CHWN<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>CHWN<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 4,
                "key.line" : 82,
                "key.modulename" : "main",
                "key.name" : "CHWN",
                "key.namelength" : 4,
                "key.nameoffset" : 1967,
                "key.offset" : 1967,
                "key.parsed_declaration" : "case CHWN",
                "key.parsed_scope.end" : 82,
                "key.parsed_scope.start" : 82,
                "key.reusingastcontext" : false,
                "key.typename" : "(TensorFormat.Type) -> TensorFormat",
                "key.typeusr" : "$sy4main12TensorFormatOACmcD",
                "key.usr" : "s:4main12TensorFormatO4CHWNyA2CmF"
              }
            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func from(cTensorParams: ccv_nnc_tensor_param_t) -&gt; <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1975
              }
            ],
            "key.bodylength" : 256,
            "key.bodyoffset" : 2055,
            "key.column" : 22,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>from<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>cTensorParams<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 330,
            "key.line" : 84,
            "key.modulename" : "main",
            "key.name" : "from(cTensorParams:)",
            "key.namelength" : 43,
            "key.nameoffset" : 1994,
            "key.offset" : 1982,
            "key.parsed_declaration" : "public static func from(cTensorParams: ccv_nnc_tensor_param_t) -> TensorFormat",
            "key.parsed_scope.end" : 95,
            "key.parsed_scope.start" : 84,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(TensorFormat.Type) -> (<<error type>>) -> TensorFormat",
            "key.typeusr" : "$syXeXecD",
            "key.usr" : "s:4main12TensorFormatO4fromyXeXeFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline var toC: <Type usr=\"s:s5Int32V\">Int32<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 2316
              }
            ],
            "key.bodylength" : 204,
            "key.bodyoffset" : 2352,
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>toC<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 221,
            "key.line" : 98,
            "key.modulename" : "main",
            "key.name" : "toC",
            "key.namelength" : 3,
            "key.nameoffset" : 2340,
            "key.offset" : 2336,
            "key.parsed_declaration" : "var toC: Int32",
            "key.parsed_scope.end" : 107,
            "key.parsed_scope.start" : 98,
            "key.reusingastcontext" : false,
            "key.typename" : "Int32",
            "key.typeusr" : "$ss5Int32VD",
            "key.usr" : "s:4main12TensorFormatO3toCs5Int32Vvp"
          }
        ],
        "key.typename" : "TensorFormat.Type",
        "key.typeusr" : "$s4main12TensorFormatOmD",
        "key.usr" : "s:4main12TensorFormatO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct TensorShape<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 2594
          }
        ],
        "key.bodylength" : 250,
        "key.bodyoffset" : 2621,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.comment" : "Tensor shape (or dimensions)",
        "key.doc.declaration" : "public struct TensorShape",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"111\" column=\"15\"><Name>TensorShape<\/Name><USR>s:4main11TensorShapeV<\/USR><Declaration>public struct TensorShape<\/Declaration><CommentParts><Abstract><Para>Tensor shape (or dimensions)<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 111,
        "key.doc.name" : "TensorShape",
        "key.doc.type" : "Class",
        "key.doclength" : 33,
        "key.docoffset" : 2561,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>TensorShape<\/decl.name><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 271,
        "key.line" : 111,
        "key.modulename" : "main",
        "key.name" : "TensorShape",
        "key.namelength" : 11,
        "key.nameoffset" : 2608,
        "key.offset" : 2601,
        "key.parsed_declaration" : "public struct TensorShape",
        "key.parsed_scope.end" : 119,
        "key.parsed_scope.start" : 111,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var dims: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2624
              }
            ],
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dims<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 98,
            "key.line" : 112,
            "key.modulename" : "main",
            "key.name" : "dims",
            "key.namelength" : 4,
            "key.nameoffset" : 2635,
            "key.offset" : 2631,
            "key.parsed_declaration" : "public var dims:\n  (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
            "key.parsed_scope.end" : 112,
            "key.parsed_scope.start" : 112,
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
            "key.typeusr" : "$ss5Int32V_A11BtD",
            "key.usr" : "s:4main11TensorShapeV4dimss5Int32V_A11Ftvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(dims: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>))<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2732
              }
            ],
            "key.bodylength" : 24,
            "key.bodyoffset" : 2845,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>dims<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 131,
            "key.line" : 114,
            "key.modulename" : "main",
            "key.name" : "init(dims:)",
            "key.namelength" : 104,
            "key.nameoffset" : 2739,
            "key.offset" : 2739,
            "key.parsed_declaration" : "public init(\n  dims: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n)",
            "key.parsed_scope.end" : 118,
            "key.parsed_scope.start" : 114,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main11TensorShapeVyACSaySiGcfc\">init(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main11TensorShapeV12arrayLiteralACSid_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(TensorShape.Type) -> ((Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)) -> TensorShape",
            "key.typeusr" : "$s4dims4main11TensorShapeVs5Int32V_A11Ft_tcD",
            "key.usr" : "s:4main11TensorShapeV4dimsACs5Int32V_A11Ft_tcfc"
          }
        ],
        "key.typename" : "TensorShape.Type",
        "key.typeusr" : "$s4main11TensorShapeVmD",
        "key.usr" : "s:4main11TensorShapeV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct TensorShape<\/Declaration>",
        "key.bodylength" : 161,
        "key.bodyoffset" : 2924,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct TensorShape",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"111\" column=\"15\"><Name>TensorShape<\/Name><USR>s:4main11TensorShapeV<\/USR><Declaration>public struct TensorShape<\/Declaration><CommentParts><Abstract><Para>Tensor shape (or dimensions)<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 111,
        "key.doc.name" : "TensorShape",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 25,
            "key.offset" : 2897
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>TensorShape<\/decl.name><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "ExpressibleByArrayLiteral"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 212,
        "key.line" : 111,
        "key.modulename" : "main",
        "key.name" : "TensorShape",
        "key.namelength" : 11,
        "key.nameoffset" : 2884,
        "key.offset" : 2874,
        "key.parsed_declaration" : "extension TensorShape: ExpressibleByArrayLiteral",
        "key.parsed_scope.end" : 128,
        "key.parsed_scope.start" : 121,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ elements: [<Type usr=\"s:Si\">Int<\/Type>])<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2927
              }
            ],
            "key.bodylength" : 38,
            "key.bodyoffset" : 2959,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>elements<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 64,
            "key.line" : 122,
            "key.modulename" : "main",
            "key.name" : "init(_:)",
            "key.namelength" : 23,
            "key.nameoffset" : 2934,
            "key.offset" : 2934,
            "key.parsed_declaration" : "public init(_ elements: [Int])",
            "key.parsed_scope.end" : 124,
            "key.parsed_scope.start" : 122,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main11TensorShapeV4dimsACs5Int32V_A11Ft_tcfc\">init(dims:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main11TensorShapeV12arrayLiteralACSid_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(TensorShape.Type) -> ([Int]) -> TensorShape",
            "key.typeusr" : "$sy4main11TensorShapeVSaySiGcD",
            "key.usr" : "s:4main11TensorShapeVyACSaySiGcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(arrayLiteral elements: <Type usr=\"s:Si\">Int<\/Type>...)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3001
              }
            ],
            "key.bodylength" : 38,
            "key.bodyoffset" : 3045,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "init(arrayLiteral elements: Self.ArrayLiteralElement...)",
            "key.doc.discussion" : [
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Function><Name>init(arrayLiteral:)<\/Name><USR>s:s25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc<\/USR><Declaration>init(arrayLiteral elements: Self.ArrayLiteralElement...)<\/Declaration><CommentParts><Abstract><Para>Creates an instance initialized with the given elements.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>ExpressibleByArrayLiteral<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.name" : "init(arrayLiteral:)",
            "key.doc.type" : "Function",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>arrayLiteral<\/decl.var.parameter.argument_label> <decl.var.parameter.name>elements<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct>...<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 76,
            "key.line" : 125,
            "key.modulename" : "main",
            "key.name" : "init(arrayLiteral:)",
            "key.namelength" : 35,
            "key.nameoffset" : 3008,
            "key.offset" : 3008,
            "key.overrides" : [
              {
                "key.usr" : "s:s25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc"
              }
            ],
            "key.parsed_declaration" : "public init(arrayLiteral elements: Int...)",
            "key.parsed_scope.end" : 127,
            "key.parsed_scope.start" : 125,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main11TensorShapeV4dimsACs5Int32V_A11Ft_tcfc\">init(dims:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main11TensorShapeVyACSaySiGcfc\">init(_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(TensorShape.Type) -> (Int...) -> TensorShape",
            "key.typeusr" : "$s12arrayLiteral4main11TensorShapeVSid_tcD",
            "key.usr" : "s:s25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc"
          }
        ],
        "key.typename" : "TensorShape.Type",
        "key.typeusr" : "$s4main11TensorShapeVmD",
        "key.usr" : "s:4main11TensorShapeV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct TensorShape<\/Declaration>",
        "key.bodylength" : 75,
        "key.bodyoffset" : 3136,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct TensorShape",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"111\" column=\"15\"><Name>TensorShape<\/Name><USR>s:4main11TensorShapeV<\/USR><Declaration>public struct TensorShape<\/Declaration><CommentParts><Abstract><Para>Tensor shape (or dimensions)<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 111,
        "key.doc.name" : "TensorShape",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 23,
            "key.offset" : 3111
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>TensorShape<\/decl.name><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "CustomStringConvertible"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 124,
        "key.line" : 111,
        "key.modulename" : "main",
        "key.name" : "TensorShape",
        "key.namelength" : 11,
        "key.nameoffset" : 3098,
        "key.offset" : 3088,
        "key.parsed_declaration" : "extension TensorShape: CustomStringConvertible",
        "key.parsed_scope.end" : 134,
        "key.parsed_scope.start" : 130,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var description: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3139
              }
            ],
            "key.bodylength" : 38,
            "key.bodyoffset" : 3171,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "var description: String { get }",
            "key.doc.discussion" : [
              {
                "Para" : "Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the `String(describing:)` initializer. This initializer works with any type, and uses the custom `description` property for types that conform to `CustomStringConvertible`:"
              },
              {
                "CodeListing" : ""
              },
              {
                "Para" : "The conversion of `p` to a string in the assignment to `s` uses the `Point` type’s `description` property."
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>description<\/Name><USR>s:s23CustomStringConvertibleP11descriptionSSvp<\/USR><Declaration>var description: String { get }<\/Declaration><CommentParts><Abstract><Para>A textual representation of this instance.<\/Para><\/Abstract><Discussion><Para>Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the <codeVoice>String(describing:)<\/codeVoice> initializer. This initializer works with any type, and uses the custom <codeVoice>description<\/codeVoice> property for types that conform to <codeVoice>CustomStringConvertible<\/codeVoice>:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct Point: CustomStringConvertible {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    let x: Int, y: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var description: String {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        return \"(\\(x), \\(y))\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let p = Point(x: 21, y: 30)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let s = String(describing: p)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(s)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"(21, 30)\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The conversion of <codeVoice>p<\/codeVoice> to a string in the assignment to <codeVoice>s<\/codeVoice> uses the <codeVoice>Point<\/codeVoice> type’s <codeVoice>description<\/codeVoice> property.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>CustomStringConvertible<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "description",
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>description<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 64,
            "key.line" : 131,
            "key.modulename" : "main",
            "key.name" : "description",
            "key.namelength" : 11,
            "key.nameoffset" : 3150,
            "key.offset" : 3146,
            "key.overrides" : [
              {
                "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSvp"
              }
            ],
            "key.parsed_declaration" : "public var description: String",
            "key.parsed_scope.end" : 133,
            "key.parsed_scope.start" : 131,
            "key.reusingastcontext" : false,
            "key.typename" : "String",
            "key.typeusr" : "$sSSD",
            "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSvp"
          }
        ],
        "key.typename" : "TensorShape.Type",
        "key.typeusr" : "$s4main11TensorShapeVmD",
        "key.usr" : "s:4main11TensorShapeV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct TensorShape<\/Declaration>",
        "key.bodylength" : 428,
        "key.bodyoffset" : 3248,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct TensorShape",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"111\" column=\"15\"><Name>TensorShape<\/Name><USR>s:4main11TensorShapeV<\/USR><Declaration>public struct TensorShape<\/Declaration><CommentParts><Abstract><Para>Tensor shape (or dimensions)<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 111,
        "key.doc.name" : "TensorShape",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 9,
            "key.offset" : 3237
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>TensorShape<\/decl.name><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Equatable"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 463,
        "key.line" : 111,
        "key.modulename" : "main",
        "key.name" : "TensorShape",
        "key.namelength" : 11,
        "key.nameoffset" : 3224,
        "key.offset" : 3214,
        "key.parsed_declaration" : "extension TensorShape: Equatable",
        "key.parsed_scope.end" : 143,
        "key.parsed_scope.start" : 136,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func == (lhs: `Self`, rhs: `Self`) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3251
              }
            ],
            "key.bodylength" : 369,
            "key.bodyoffset" : 3305,
            "key.column" : 22,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "static func == (lhs: Self, rhs: Self) -> Bool",
            "key.doc.discussion" : [
              {
                "Para" : "Equality is the inverse of inequality. For any values `a` and `b`, `a == b` implies that `a != b` is `false`."
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Function><Name>==(_:_:)<\/Name><USR>s:SQ2eeoiySbx_xtFZ<\/USR><Declaration>static func == (lhs: Self, rhs: Self) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Returns a Boolean value indicating whether two values are equal.<\/Para><\/Abstract><Parameters><Parameter><Name>lhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A value to compare.<\/Para><\/Discussion><\/Parameter><Parameter><Name>rhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Another value to compare.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Equality is the inverse of inequality. For any values <codeVoice>a<\/codeVoice> and <codeVoice>b<\/codeVoice>, <codeVoice>a == b<\/codeVoice> implies that <codeVoice>a != b<\/codeVoice> is <codeVoice>false<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Equatable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.name" : "==(_:_:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "A value to compare."
                  }
                ],
                "name" : "lhs"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Another value to compare."
                  }
                ],
                "name" : "rhs"
              }
            ],
            "key.doc.type" : "Function",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>== <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type>`Self`<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type>`Self`<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 417,
            "key.line" : 137,
            "key.modulename" : "main",
            "key.name" : "==(_:_:)",
            "key.namelength" : 25,
            "key.nameoffset" : 3270,
            "key.offset" : 3258,
            "key.overrides" : [
              {
                "key.usr" : "s:SQ2eeoiySbx_xtFZ"
              }
            ],
            "key.parsed_declaration" : "public static func == (lhs: Self, rhs: Self) -> Bool",
            "key.parsed_scope.end" : 142,
            "key.parsed_scope.start" : 137,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(TensorShape.Type) -> (TensorShape, TensorShape) -> Bool",
            "key.typeusr" : "$sySb4main11TensorShapeV_ACtcD",
            "key.usr" : "s:SQ2eeoiySbx_xtFZ"
          }
        ],
        "key.typename" : "TensorShape.Type",
        "key.typeusr" : "$s4main11TensorShapeVmD",
        "key.usr" : "s:4main11TensorShapeV"
      },
      {
        "key.annotated_decl" : "<Declaration>@frozen @_eagerMove struct Array&lt;Element&gt; : <Type usr=\"s:s24_DestructorSafeContainerP\">_DestructorSafeContainer<\/Type><\/Declaration>",
        "key.bodylength" : 82,
        "key.bodyoffset" : 3717,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "@frozen struct Array<Element> : _DestructorSafeContainer",
        "key.doc.discussion" : [
          {
            "Para" : "Arrays are one of the most commonly used data types in an app. You use arrays to organize your app’s data. Specifically, you use the `Array` type to hold elements of a single type, the array’s `Element` type. An array can store any kind of elements—from integers to strings to classes."
          },
          {
            "Para" : "Swift makes it easy to create arrays in your code using an array literal: simply surround a comma-separated list of values with square brackets. Without any other information, Swift creates an array that includes the specified values, automatically inferring the array’s `Element` type. For example:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can create an empty array by specifying the `Element` type of your array in the declaration. For example:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you need an array that is preinitialized with a fixed number of default values, use the `Array(repeating:count:)` initializer."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "When you need to perform an operation on all of an array’s elements, use a `for`-`in` loop to iterate through the array’s contents."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Use the `isEmpty` property to check quickly whether an array has any elements, or use the `count` property to find the number of elements in the array."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Use the `first` and `last` properties for safe access to the value of the array’s first and last elements. If the array is empty, these properties are `nil`."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can access individual array elements through a subscript. The first element of a nonempty array is always at index zero. You can subscript an array with any integer from zero up to, but not including, the count of the array. Using a negative number or an index equal to or greater than `count` triggers a runtime error. For example:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Suppose you need to store a list of the names of students that are signed up for a class you’re teaching. During the registration period, you need to add and remove names as students add and drop the class."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "To add single elements to the end of an array, use the `append(_:)` method. Add multiple elements at the same time by passing another array or a sequence of any kind to the `append(contentsOf:)` method."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can add new elements in the middle of an array by using the `insert(_:at:)` method for single elements and by using `insert(contentsOf:at:)` to insert multiple elements from another collection or array literal. The elements at that index and later indices are shifted back to make room."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "To remove elements from an array, use the `remove(at:)`, `removeSubrange(_:)`, and `removeLast()` methods."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can replace an existing element with a new value by assigning the new value to the subscript."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Every array reserves a specific amount of memory to hold its contents. When you add elements to an array and that array begins to exceed its reserved capacity, the array allocates a larger region of memory and copies its elements into the new storage. The new storage is a multiple of the old storage’s size. This exponential growth strategy means that appending an element happens in constant time, averaging the performance of many append operations. Append operations that trigger reallocation have a performance cost, but they occur less and less often as the array grows larger."
          },
          {
            "Para" : "If you know approximately how many elements you will need to store, use the `reserveCapacity(_:)` method before appending to the array to avoid intermediate reallocations. Use the `capacity` and `count` properties to determine how many more elements the array can store without allocating larger storage."
          },
          {
            "Para" : "For arrays of most `Element` types, this storage is a contiguous block of memory. For arrays with an `Element` type that is a class or `@objc` protocol type, this storage can be a contiguous block of memory or an instance of `NSArray`. Because any arbitrary subclass of `NSArray` can become an `Array`, there are no guarantees about representation or efficiency in this case."
          },
          {
            "Para" : "Each array has an independent value that includes the values of all of its elements. For simple types such as integers and other structures, this means that when you change a value in one array, the value of that element does not change in any copies of the array. For example:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If the elements in an array are instances of a class, the semantics are the same, though they might appear different at first. In this case, the values stored in the array are references to objects that live outside the array. If you change a reference to an object in one array, only that array has a reference to the new object. However, if two arrays contain references to the same object, you can observe changes to that object’s properties from both arrays. For example:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Arrays, like all variable-size collections in the standard library, use copy-on-write optimization. Multiple copies of an array share the same storage until you modify one of the copies. When that happens, the array being modified replaces its storage with a uniquely owned copy of itself, which is then modified in place. Optimizations are sometimes applied that can reduce the amount of copying."
          },
          {
            "Para" : "This means that if an array is sharing storage with other copies, the first mutating operation on that array incurs the cost of copying the array. An array that is the sole owner of its storage can perform mutating operations in place."
          },
          {
            "Para" : "In the example below, a `numbers` array is created along with two copies that share the same storage. When the original `numbers` array is modified, it makes a unique copy of its storage before making the modification. Further modifications to `numbers` are made in place, while the two copies continue to share the original storage."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "When you need to access APIs that require data in an `NSArray` instance instead of `Array`, use the type-cast operator (`as`) to bridge your instance. For bridging to be possible, the `Element` type of your array must be a class, an `@objc` protocol (a protocol imported from Objective-C or marked with the `@objc` attribute), or a type that bridges to a Foundation type."
          },
          {
            "Para" : "The following example shows how you can bridge an `Array` instance to `NSArray` to use the `write(to:atomically:)` method. In this example, the `colors` array can be bridged to `NSArray` because the `colors` array’s `String` elements bridge to `NSString`. The compiler prevents bridging the `moreColors` array, on the other hand, because its `Element` type is `Optional<String>`, which does  bridge to a Foundation type."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Bridging from `Array` to `NSArray` takes O(1) time and O(1) space if the array’s elements are already instances of a class or an `@objc` protocol; otherwise, it takes O() time and space."
          },
          {
            "Para" : "When the destination array’s element type is a class or an `@objc` protocol, bridging from `NSArray` to `Array` first calls the `copy(with:)` (`- copyWithZone:` in Objective-C) method on the array to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time. For instances of `NSArray` that are already immutable, `copy(with:)` usually returns the same array in O(1) time; otherwise, the copying performance is unspecified. If `copy(with:)` returns the same array, the instances of `NSArray` and `Array` share storage using the same copy-on-write optimization that is used when two instances of `Array` share storage."
          },
          {
            "Para" : "When the destination array’s element type is a nonclass type that bridges to a Foundation type, bridging from `NSArray` to `Array` performs a bridging copy of the elements to contiguous storage in O() time. For example, bridging from `NSArray` to `Array<Int>` performs such a copy. No further bridging is required when accessing elements of the `Array` instance."
          },
          {
            "Note" : ""
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Array<\/Name><USR>s:Sa<\/USR><Declaration>@frozen struct Array&lt;Element&gt; : _DestructorSafeContainer<\/Declaration><CommentParts><Abstract><Para>An ordered, random-access collection.<\/Para><\/Abstract><Discussion><Para>Arrays are one of the most commonly used data types in an app. You use arrays to organize your app’s data. Specifically, you use the <codeVoice>Array<\/codeVoice> type to hold elements of a single type, the array’s <codeVoice>Element<\/codeVoice> type. An array can store any kind of elements—from integers to strings to classes.<\/Para><Para>Swift makes it easy to create arrays in your code using an array literal: simply surround a comma-separated list of values with square brackets. Without any other information, Swift creates an array that includes the specified values, automatically inferring the array’s <codeVoice>Element<\/codeVoice> type. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ An array of 'Int' elements]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let oddNumbers = [1, 3, 5, 7, 9, 11, 13, 15]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ An array of 'String' elements]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let streets = [\"Albemarle\", \"Brandywine\", \"Chesapeake\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can create an empty array by specifying the <codeVoice>Element<\/codeVoice> type of your array in the declaration. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ Shortened forms are preferred]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var emptyDoubles: [Double] = []]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ The full type name is also allowed]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var emptyFloats: Array<Float> = Array()]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>If you need an array that is preinitialized with a fixed number of default values, use the <codeVoice>Array(repeating:count:)<\/codeVoice> initializer.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var digitCounts = Array(repeating: 0, count: 10)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(digitCounts)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Array Values<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>When you need to perform an operation on all of an array’s elements, use a <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> loop to iterate through the array’s contents.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[for street in streets {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"I don't live on \\(street).\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"I don't live on Albemarle.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"I don't live on Brandywine.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"I don't live on Chesapeake.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Use the <codeVoice>isEmpty<\/codeVoice> property to check quickly whether an array has any elements, or use the <codeVoice>count<\/codeVoice> property to find the number of elements in the array.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if oddNumbers.isEmpty {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"I don't know any odd numbers.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[} else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"I know \\(oddNumbers.count) odd numbers.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"I know 8 odd numbers.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Use the <codeVoice>first<\/codeVoice> and <codeVoice>last<\/codeVoice> properties for safe access to the value of the array’s first and last elements. If the array is empty, these properties are <codeVoice>nil<\/codeVoice>.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstElement = oddNumbers.first, let lastElement = oddNumbers.last {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(firstElement, lastElement, separator: \", \")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1, 15\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(emptyDoubles.first, emptyDoubles.last, separator: \", \")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"nil, nil\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can access individual array elements through a subscript. The first element of a nonempty array is always at index zero. You can subscript an array with any integer from zero up to, but not including, the count of the array. Using a negative number or an index equal to or greater than <codeVoice>count<\/codeVoice> triggers a runtime error. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(oddNumbers[0], oddNumbers[3], separator: \", \")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1, 7\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(emptyDoubles[0])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Triggers runtime error: Index out of range]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Adding and Removing Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Suppose you need to store a list of the names of students that are signed up for a class you’re teaching. During the registration period, you need to add and remove names as students add and drop the class.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var students = [\"Ben\", \"Ivy\", \"Jordell\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>To add single elements to the end of an array, use the <codeVoice>append(_:)<\/codeVoice> method. Add multiple elements at the same time by passing another array or a sequence of any kind to the <codeVoice>append(contentsOf:)<\/codeVoice> method.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[students.append(\"Maxime\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[students.append(contentsOf: [\"Shakia\", \"William\"])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\", \"Shakia\", \"William\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can add new elements in the middle of an array by using the <codeVoice>insert(_:at:)<\/codeVoice> method for single elements and by using <codeVoice>insert(contentsOf:at:)<\/codeVoice> to insert multiple elements from another collection or array literal. The elements at that index and later indices are shifted back to make room.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[students.insert(\"Liam\", at: 3)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ben\", \"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\", \"William\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>To remove elements from an array, use the <codeVoice>remove(at:)<\/codeVoice>, <codeVoice>removeSubrange(_:)<\/codeVoice>, and <codeVoice>removeLast()<\/codeVoice> methods.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ Ben's family is moving to another state]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[students.remove(at: 0)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\", \"William\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ William is signing up for a different class]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[students.removeLast()]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can replace an existing element with a new value by assigning the new value to the subscript.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let i = students.firstIndex(of: \"Maxime\") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    students[i] = \"Max\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ivy\", \"Jordell\", \"Liam\", \"Max\", \"Shakia\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Growing the Size of an Array<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>Every array reserves a specific amount of memory to hold its contents. When you add elements to an array and that array begins to exceed its reserved capacity, the array allocates a larger region of memory and copies its elements into the new storage. The new storage is a multiple of the old storage’s size. This exponential growth strategy means that appending an element happens in constant time, averaging the performance of many append operations. Append operations that trigger reallocation have a performance cost, but they occur less and less often as the array grows larger.<\/Para><Para>If you know approximately how many elements you will need to store, use the <codeVoice>reserveCapacity(_:)<\/codeVoice> method before appending to the array to avoid intermediate reallocations. Use the <codeVoice>capacity<\/codeVoice> and <codeVoice>count<\/codeVoice> properties to determine how many more elements the array can store without allocating larger storage.<\/Para><Para>For arrays of most <codeVoice>Element<\/codeVoice> types, this storage is a contiguous block of memory. For arrays with an <codeVoice>Element<\/codeVoice> type that is a class or <codeVoice>@objc<\/codeVoice> protocol type, this storage can be a contiguous block of memory or an instance of <codeVoice>NSArray<\/codeVoice>. Because any arbitrary subclass of <codeVoice>NSArray<\/codeVoice> can become an <codeVoice>Array<\/codeVoice>, there are no guarantees about representation or efficiency in this case.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Modifying Copies of Arrays<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Each array has an independent value that includes the values of all of its elements. For simple types such as integers and other structures, this means that when you change a value in one array, the value of that element does not change in any copies of the array. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var numbers = [1, 2, 3, 4, 5]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var numbersCopy = numbers]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[0] = 100]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(numbers)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[100, 2, 3, 4, 5]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(numbersCopy)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[1, 2, 3, 4, 5]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>If the elements in an array are instances of a class, the semantics are the same, though they might appear different at first. In this case, the values stored in the array are references to objects that live outside the array. If you change a reference to an object in one array, only that array has a reference to the new object. However, if two arrays contain references to the same object, you can observe changes to that object’s properties from both arrays. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ An integer type with reference semantics]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[class IntegerReference {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var value = 10]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var firstIntegers = [IntegerReference(), IntegerReference()]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var secondIntegers = firstIntegers]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Modifications to an instance are visible from either array]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[firstIntegers[0].value = 100]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondIntegers[0].value)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"100\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Replacements, additions, and removals are still visible]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ only in the modified array]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[firstIntegers[0] = IntegerReference()]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstIntegers[0].value)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"10\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondIntegers[0].value)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"100\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Arrays, like all variable-size collections in the standard library, use copy-on-write optimization. Multiple copies of an array share the same storage until you modify one of the copies. When that happens, the array being modified replaces its storage with a uniquely owned copy of itself, which is then modified in place. Optimizations are sometimes applied that can reduce the amount of copying.<\/Para><Para>This means that if an array is sharing storage with other copies, the first mutating operation on that array incurs the cost of copying the array. An array that is the sole owner of its storage can perform mutating operations in place.<\/Para><Para>In the example below, a <codeVoice>numbers<\/codeVoice> array is created along with two copies that share the same storage. When the original <codeVoice>numbers<\/codeVoice> array is modified, it makes a unique copy of its storage before making the modification. Further modifications to <codeVoice>numbers<\/codeVoice> are made in place, while the two copies continue to share the original storage.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var numbers = [1, 2, 3, 4, 5]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var firstCopy = numbers]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var secondCopy = numbers]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ The storage for 'numbers' is copied here]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[0] = 100]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[1] = 200]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[2] = 300]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ 'numbers' is [100, 200, 300, 4, 5]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ 'firstCopy' and 'secondCopy' are [1, 2, 3, 4, 5]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Bridging Between Array and NSArray<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>When you need to access APIs that require data in an <codeVoice>NSArray<\/codeVoice> instance instead of <codeVoice>Array<\/codeVoice>, use the type-cast operator (<codeVoice>as<\/codeVoice>) to bridge your instance. For bridging to be possible, the <codeVoice>Element<\/codeVoice> type of your array must be a class, an <codeVoice>@objc<\/codeVoice> protocol (a protocol imported from Objective-C or marked with the <codeVoice>@objc<\/codeVoice> attribute), or a type that bridges to a Foundation type.<\/Para><Para>The following example shows how you can bridge an <codeVoice>Array<\/codeVoice> instance to <codeVoice>NSArray<\/codeVoice> to use the <codeVoice>write(to:atomically:)<\/codeVoice> method. In this example, the <codeVoice>colors<\/codeVoice> array can be bridged to <codeVoice>NSArray<\/codeVoice> because the <codeVoice>colors<\/codeVoice> array’s <codeVoice>String<\/codeVoice> elements bridge to <codeVoice>NSString<\/codeVoice>. The compiler prevents bridging the <codeVoice>moreColors<\/codeVoice> array, on the other hand, because its <codeVoice>Element<\/codeVoice> type is <codeVoice>Optional&lt;String&gt;<\/codeVoice>, which does <emphasis>not<\/emphasis> bridge to a Foundation type.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let colors = [\"periwinkle\", \"rose\", \"moss\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let moreColors: [String?] = [\"ochre\", \"pine\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let url = URL(fileURLWithPath: \"names.plist\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[(colors as NSArray).write(to: url, atomically: true)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ true]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[(moreColors as NSArray).write(to: url, atomically: true)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ error: cannot convert value of type '[String?]' to type 'NSArray']]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Bridging from <codeVoice>Array<\/codeVoice> to <codeVoice>NSArray<\/codeVoice> takes O(1) time and O(1) space if the array’s elements are already instances of a class or an <codeVoice>@objc<\/codeVoice> protocol; otherwise, it takes O(<emphasis>n<\/emphasis>) time and space.<\/Para><Para>When the destination array’s element type is a class or an <codeVoice>@objc<\/codeVoice> protocol, bridging from <codeVoice>NSArray<\/codeVoice> to <codeVoice>Array<\/codeVoice> first calls the <codeVoice>copy(with:)<\/codeVoice> (<codeVoice>- copyWithZone:<\/codeVoice> in Objective-C) method on the array to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time. For instances of <codeVoice>NSArray<\/codeVoice> that are already immutable, <codeVoice>copy(with:)<\/codeVoice> usually returns the same array in O(1) time; otherwise, the copying performance is unspecified. If <codeVoice>copy(with:)<\/codeVoice> returns the same array, the instances of <codeVoice>NSArray<\/codeVoice> and <codeVoice>Array<\/codeVoice> share storage using the same copy-on-write optimization that is used when two instances of <codeVoice>Array<\/codeVoice> share storage.<\/Para><Para>When the destination array’s element type is a nonclass type that bridges to a Foundation type, bridging from <codeVoice>NSArray<\/codeVoice> to <codeVoice>Array<\/codeVoice> performs a bridging copy of the elements to contiguous storage in O(<emphasis>n<\/emphasis>) time. For example, bridging from <codeVoice>NSArray<\/codeVoice> to <codeVoice>Array&lt;Int&gt;<\/codeVoice> performs such a copy. No further bridging is required when accessing elements of the <codeVoice>Array<\/codeVoice> instance.<\/Para><Note><Para>The <codeVoice>ContiguousArray<\/codeVoice> and <codeVoice>ArraySlice<\/codeVoice> types are not bridged; instances of those types always have a contiguous block of memory as their storage.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Array",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.attribute.builtin><syntaxtype.attribute.name>@_eagerMove<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Array<\/decl.name>&lt;<decl.generic_type_param usr=\"s:Sa7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s24_DestructorSafeContainerP\">_DestructorSafeContainer<\/ref.protocol><\/decl.struct>",
        "key.groupname" : "Collection\/Array",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 121,
        "key.modulename" : "Swift",
        "key.name" : "Array",
        "key.namelength" : 5,
        "key.nameoffset" : 3689,
        "key.offset" : 3679,
        "key.parsed_declaration" : "extension Array where Element == Int",
        "key.parsed_scope.end" : 149,
        "key.parsed_scope.start" : 145,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3720
              }
            ],
            "key.bodylength" : 42,
            "key.bodyoffset" : 3755,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>shape<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 71,
            "key.line" : 146,
            "key.modulename" : "main",
            "key.name" : "init(_:)",
            "key.namelength" : 26,
            "key.nameoffset" : 3727,
            "key.offset" : 3727,
            "key.parsed_declaration" : "public init(_ shape: TensorShape)",
            "key.parsed_scope.end" : 148,
            "key.parsed_scope.start" : 146,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sa4mainAA13TensorNumericRzlEySayxGAA0B0VyxGcfc\">init(_: Tensor&lt;Element&gt;)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sa12arrayLiteralSayxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:S2ayxGycfc\">init()<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SaySayxGqd__c7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sa9repeating5countSayxGx_Sitcfc\">init(repeating:count:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sa27unsafeUninitializedCapacity16initializingWithSayxGSi_ySryxGz_SiztKXEtKcfc\">init(unsafeUninitializedCapacity:initializingWith:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SasSeRzlE4fromSayxGs7Decoder_p_tKcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sa10FoundationAA26DecodableWithConfigurationRzlE4from13configurationSayxGs7Decoder_p_08DecodingD0QztKcfc\">init(from:configuration:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element == Int> (Array<Element>.Type) -> (TensorShape) -> Array<Element>",
            "key.typeusr" : "$sySaySiG4main11TensorShapeVcD",
            "key.usr" : "s:Sa4mainSiRszlEySaySiGAA11TensorShapeVcfc"
          }
        ],
        "key.typename" : "Array<Element>.Type",
        "key.typeusr" : "$sSayxGmD",
        "key.usr" : "s:Sa"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct TensorShape<\/Declaration>",
        "key.bodylength" : 3208,
        "key.bodyoffset" : 3849,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct TensorShape",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"111\" column=\"15\"><Name>TensorShape<\/Name><USR>s:4main11TensorShapeV<\/USR><Declaration>public struct TensorShape<\/Declaration><CommentParts><Abstract><Para>Tensor shape (or dimensions)<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 111,
        "key.doc.name" : "TensorShape",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 22,
            "key.offset" : 3825
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>TensorShape<\/decl.name><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "RandomAccessCollection"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 3256,
        "key.line" : 111,
        "key.modulename" : "main",
        "key.name" : "TensorShape",
        "key.namelength" : 11,
        "key.nameoffset" : 3812,
        "key.offset" : 3802,
        "key.parsed_declaration" : "extension TensorShape: RandomAccessCollection",
        "key.parsed_scope.end" : 258,
        "key.parsed_scope.start" : 151,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public typealias Element = <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3852
              }
            ],
            "key.column" : 20,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "associatedtype Element where Self.Element == Self.Iterator.Element",
            "key.doc.discussion" : [
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>Element<\/Name><USR>s:ST7ElementQa<\/USR><Declaration>associatedtype Element where Self.Element == Self.Iterator.Element<\/Declaration><CommentParts><Abstract><Para>A type representing the sequence’s elements.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Sequence<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "Element",
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Element<\/decl.name> = <ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.typealias>",
            "key.kind" : "source.lang.swift.decl.typealias",
            "key.length" : 23,
            "key.line" : 152,
            "key.modulename" : "main",
            "key.name" : "Element",
            "key.namelength" : 7,
            "key.nameoffset" : 3869,
            "key.offset" : 3859,
            "key.overrides" : [
              {
                "key.usr" : "s:Sk7ElementQa"
              },
              {
                "key.usr" : "s:SK7ElementQa"
              },
              {
                "key.usr" : "s:Sl7ElementQa"
              },
              {
                "key.usr" : "s:ST7ElementQa"
              }
            ],
            "key.parsed_declaration" : "public typealias Element = Int",
            "key.parsed_scope.end" : 152,
            "key.parsed_scope.start" : 152,
            "key.reusingastcontext" : false,
            "key.typename" : "Int.Type",
            "key.typeusr" : "$sSimD",
            "key.usr" : "s:ST7ElementQa"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public typealias Index = <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3885
              }
            ],
            "key.column" : 20,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "associatedtype Index : Comparable where Self.Index == Self.Indices.Element, Self.Indices.Element == Self.Indices.Index, Self.Indices.Index == Self.SubSequence.Index",
            "key.doc.discussion" : [
              {
                "Para" : "Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>Index<\/Name><USR>s:Sl5IndexQa<\/USR><Declaration>associatedtype Index : Comparable where Self.Index == Self.Indices.Element, Self.Indices.Element == Self.Indices.Index, Self.Indices.Index == Self.SubSequence.Index<\/Declaration><CommentParts><Abstract><Para>A type that represents a position in the collection.<\/Para><\/Abstract><Discussion><Para>Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "Index",
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Index<\/decl.name> = <ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.typealias>",
            "key.kind" : "source.lang.swift.decl.typealias",
            "key.length" : 21,
            "key.line" : 153,
            "key.modulename" : "main",
            "key.name" : "Index",
            "key.namelength" : 5,
            "key.nameoffset" : 3902,
            "key.offset" : 3892,
            "key.overrides" : [
              {
                "key.usr" : "s:Sk5IndexQa"
              },
              {
                "key.usr" : "s:SK5IndexQa"
              },
              {
                "key.usr" : "s:Sl5IndexQa"
              }
            ],
            "key.parsed_declaration" : "public typealias Index = Int",
            "key.parsed_scope.end" : 153,
            "key.parsed_scope.start" : 153,
            "key.reusingastcontext" : false,
            "key.typename" : "Int.Type",
            "key.typeusr" : "$sSimD",
            "key.usr" : "s:Sl5IndexQa"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public typealias Indices = <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:4main11TensorShapeV5Indexa\">Index<\/Type>&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3916
              }
            ],
            "key.column" : 20,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "associatedtype Indices : Collection = DefaultIndices<Self> where Self.Indices == Self.Indices.SubSequence",
            "key.doc.discussion" : [
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>Indices<\/Name><USR>s:Sl7IndicesQa<\/USR><Declaration>associatedtype Indices : Collection = DefaultIndices&lt;Self&gt; where Self.Indices == Self.Indices.SubSequence<\/Declaration><CommentParts><Abstract><Para>A type that represents the indices that are valid for subscripting the collection, in ascending order.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "Indices",
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Indices<\/decl.name> = <ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.typealias usr=\"s:4main11TensorShapeV5Indexa\">Index<\/ref.typealias>&gt;<\/decl.typealias>",
            "key.kind" : "source.lang.swift.decl.typealias",
            "key.length" : 32,
            "key.line" : 154,
            "key.modulename" : "main",
            "key.name" : "Indices",
            "key.namelength" : 7,
            "key.nameoffset" : 3933,
            "key.offset" : 3923,
            "key.overrides" : [
              {
                "key.usr" : "s:Sk7IndicesQa"
              },
              {
                "key.usr" : "s:SK7IndicesQa"
              },
              {
                "key.usr" : "s:Sl7IndicesQa"
              }
            ],
            "key.parsed_declaration" : "public typealias Indices = Range<Index>",
            "key.parsed_scope.end" : 154,
            "key.parsed_scope.start" : 154,
            "key.reusingastcontext" : false,
            "key.typename" : "Range<Int>.Type",
            "key.typeusr" : "$sSnySiGmD",
            "key.usr" : "s:Sl7IndicesQa"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public typealias SubSequence = <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3958
              }
            ],
            "key.column" : 20,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "associatedtype SubSequence : Collection = Slice<Self> where Self.Element == Self.SubSequence.Element, Self.SubSequence == Self.SubSequence.SubSequence",
            "key.doc.discussion" : [
              {
                "Para" : "The default subsequence type for collections that don’t define their own is `Slice`."
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>SubSequence<\/Name><USR>s:Sl11SubSequenceQa<\/USR><Declaration>associatedtype SubSequence : Collection = Slice&lt;Self&gt; where Self.Element == Self.SubSequence.Element, Self.SubSequence == Self.SubSequence.SubSequence<\/Declaration><CommentParts><Abstract><Para>A collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection.<\/Para><\/Abstract><Discussion><Para>The default subsequence type for collections that don’t define their own is <codeVoice>Slice<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "SubSequence",
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>SubSequence<\/decl.name> = <ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.typealias>",
            "key.kind" : "source.lang.swift.decl.typealias",
            "key.length" : 35,
            "key.line" : 155,
            "key.modulename" : "main",
            "key.name" : "SubSequence",
            "key.namelength" : 11,
            "key.nameoffset" : 3975,
            "key.offset" : 3965,
            "key.overrides" : [
              {
                "key.usr" : "s:Sk11SubSequenceQa"
              },
              {
                "key.usr" : "s:SK11SubSequenceQa"
              },
              {
                "key.usr" : "s:Sl11SubSequenceQa"
              }
            ],
            "key.parsed_declaration" : "public typealias SubSequence = TensorShape",
            "key.parsed_scope.end" : 155,
            "key.parsed_scope.start" : 155,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape.Type",
            "key.typeusr" : "$s4main11TensorShapeVmD",
            "key.usr" : "s:Sl11SubSequenceQa"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var startIndex: <Type usr=\"s:4main11TensorShapeV5Indexa\">Index<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4003
              }
            ],
            "key.bodylength" : 3,
            "key.bodyoffset" : 4033,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "var startIndex: Self.Index { get }",
            "key.doc.discussion" : [
              {
                "Para" : "If the collection is empty, `startIndex` is equal to `endIndex`."
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>startIndex<\/Name><USR>s:Sl10startIndex0B0Qzvp<\/USR><Declaration>var startIndex: Self.Index { get }<\/Declaration><CommentParts><Abstract><Para>The position of the first element in a nonempty collection.<\/Para><\/Abstract><Discussion><Para>If the collection is empty, <codeVoice>startIndex<\/codeVoice> is equal to <codeVoice>endIndex<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "startIndex",
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>startIndex<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:4main11TensorShapeV5Indexa\">Index<\/ref.typealias><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 27,
            "key.line" : 156,
            "key.modulename" : "main",
            "key.name" : "startIndex",
            "key.namelength" : 10,
            "key.nameoffset" : 4014,
            "key.offset" : 4010,
            "key.overrides" : [
              {
                "key.usr" : "s:Sk10startIndex0B0Qzvp"
              },
              {
                "key.usr" : "s:SK10startIndex0B0Qzvp"
              },
              {
                "key.usr" : "s:Sl10startIndex0B0Qzvp"
              }
            ],
            "key.parsed_declaration" : "public var startIndex: Index",
            "key.parsed_scope.end" : 156,
            "key.parsed_scope.start" : 156,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:Sl10startIndex0B0Qzvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var endIndex: <Type usr=\"s:4main11TensorShapeV5Indexa\">Index<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4040
              }
            ],
            "key.bodylength" : 174,
            "key.bodyoffset" : 4068,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "var endIndex: Self.Index { get }",
            "key.doc.discussion" : [
              {
                "Para" : "When you need a range that includes the last element of a collection, use the half-open range operator (`..<`) with `endIndex`. The `..<` operator creates a range that doesn’t include the upper bound, so it’s always safe to use with `endIndex`. For example:"
              },
              {
                "CodeListing" : ""
              },
              {
                "Para" : "If the collection is empty, `endIndex` is equal to `startIndex`."
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>endIndex<\/Name><USR>s:Sl8endIndex0B0Qzvp<\/USR><Declaration>var endIndex: Self.Index { get }<\/Declaration><CommentParts><Abstract><Para>The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.<\/Para><\/Abstract><Discussion><Para>When you need a range that includes the last element of a collection, use the half-open range operator (<codeVoice>..&lt;<\/codeVoice>) with <codeVoice>endIndex<\/codeVoice>. The <codeVoice>..&lt;<\/codeVoice> operator creates a range that doesn’t include the upper bound, so it’s always safe to use with <codeVoice>endIndex<\/codeVoice>. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let numbers = [10, 20, 30, 40, 50]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let index = numbers.firstIndex(of: 30) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(numbers[index ..< numbers.endIndex])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[30, 40, 50]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>If the collection is empty, <codeVoice>endIndex<\/codeVoice> is equal to <codeVoice>startIndex<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "endIndex",
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>endIndex<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:4main11TensorShapeV5Indexa\">Index<\/ref.typealias><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 196,
            "key.line" : 157,
            "key.modulename" : "main",
            "key.name" : "endIndex",
            "key.namelength" : 8,
            "key.nameoffset" : 4051,
            "key.offset" : 4047,
            "key.overrides" : [
              {
                "key.usr" : "s:Sk8endIndex0B0Qzvp"
              },
              {
                "key.usr" : "s:SK8endIndex0B0Qzvp"
              },
              {
                "key.usr" : "s:Sl8endIndex0B0Qzvp"
              }
            ],
            "key.parsed_declaration" : "public var endIndex: Index",
            "key.parsed_scope.end" : 163,
            "key.parsed_scope.start" : 157,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:Sl8endIndex0B0Qzvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var dims: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dims<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 20,
            "key.line" : 158,
            "key.modulename" : "main",
            "key.name" : "dims",
            "key.namelength" : 4,
            "key.nameoffset" : 4077,
            "key.offset" : 4073,
            "key.parsed_declaration" : "var dims = self.dims",
            "key.parsed_scope.end" : 158,
            "key.parsed_scope.start" : 158,
            "key.reusingastcontext" : false,
            "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
            "key.typeusr" : "$ss5Int32V_A11BtD",
            "key.usr" : "s:4main11TensorShapeV8endIndexSivg4dimsL_s5Int32V_A11Gtvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var indices: <Type usr=\"s:4main11TensorShapeV7Indicesa\">Indices<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4246
              }
            ],
            "key.bodylength" : 23,
            "key.bodyoffset" : 4275,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "override var indices: Self.Indices { get }",
            "key.doc.discussion" : [
              {
                "Para" : "A collection’s `indices` property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the `index(after:)` method starting with `startIndex` to produce indices instead."
              },
              {
                "CodeListing" : ""
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>indices<\/Name><USR>s:Sk7indices7IndicesQzvp<\/USR><Declaration>override var indices: Self.Indices { get }<\/Declaration><CommentParts><Abstract><Para>The indices that are valid for subscripting the collection, in ascending order.<\/Para><\/Abstract><Discussion><Para>A collection’s <codeVoice>indices<\/codeVoice> property can hold a strong reference to the collection itself, causing the collection to be nonuniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can result in an unexpected copy of the collection. To avoid the unexpected copy, use the <codeVoice>index(after:)<\/codeVoice> method starting with <codeVoice>startIndex<\/codeVoice> to produce indices instead.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var c = MyFancyCollection([10, 20, 30, 40, 50])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var i = c.startIndex]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[while i != c.endIndex {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    c[i] \/= 5]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    i = c.index(after: i)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ c == MyFancyCollection([2, 4, 6, 8, 10])]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Note><Para>This documentation comment was inherited from <codeVoice>RandomAccessCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "indices",
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>indices<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:4main11TensorShapeV7Indicesa\">Indices<\/ref.typealias><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 46,
            "key.line" : 164,
            "key.modulename" : "main",
            "key.name" : "indices",
            "key.namelength" : 7,
            "key.nameoffset" : 4257,
            "key.offset" : 4253,
            "key.overrides" : [
              {
                "key.usr" : "s:Sk7indices7IndicesQzvp"
              },
              {
                "key.usr" : "s:SK7indices7IndicesQzvp"
              },
              {
                "key.usr" : "s:Sl7indices7IndicesQzvp"
              }
            ],
            "key.parsed_declaration" : "public var indices: Indices",
            "key.parsed_scope.end" : 164,
            "key.parsed_scope.start" : 164,
            "key.reusingastcontext" : false,
            "key.typename" : "Range<Int>",
            "key.typeusr" : "$sSnySiGD",
            "key.usr" : "s:Sk7indices7IndicesQzvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func formIndex(after i: inout <Type usr=\"s:4main11TensorShapeV5Indexa\">Index<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4302
              }
            ],
            "key.bodylength" : 8,
            "key.bodyoffset" : 4347,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "override func formIndex(after i: inout Self.Index)",
            "key.doc.discussion" : [
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Function><Name>formIndex(after:)<\/Name><USR>s:Sk9formIndex5aftery0B0Qzz_tF<\/USR><Declaration>override func formIndex(after i: inout Self.Index)<\/Declaration><CommentParts><Abstract><Para>Replaces the given index with its successor.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection. <codeVoice>i<\/codeVoice> must be less than <codeVoice>endIndex<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>RandomAccessCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.name" : "formIndex(after:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "A valid index of the collection. `i` must be less than `endIndex`."
                  }
                ],
                "name" : "i"
              }
            ],
            "key.doc.type" : "Function",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formIndex<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>after<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.typealias usr=\"s:4main11TensorShapeV5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 47,
            "key.line" : 165,
            "key.modulename" : "main",
            "key.name" : "formIndex(after:)",
            "key.namelength" : 31,
            "key.nameoffset" : 4314,
            "key.offset" : 4309,
            "key.overrides" : [
              {
                "key.usr" : "s:Sk9formIndex5aftery0B0Qzz_tF"
              },
              {
                "key.usr" : "s:SK9formIndex5aftery0B0Qzz_tF"
              },
              {
                "key.usr" : "s:Sl9formIndex5aftery0B0Qzz_tF"
              }
            ],
            "key.parsed_declaration" : "public func formIndex(after i: inout Index)",
            "key.parsed_scope.end" : 165,
            "key.parsed_scope.start" : 165,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main11TensorShapeV9formIndex6beforeySiz_tF\">formIndex(before:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(TensorShape) -> (inout Int) -> ()",
            "key.typeusr" : "$s5afterySiz_tcD",
            "key.usr" : "s:Sk9formIndex5aftery0B0Qzz_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func formIndex(before i: inout <Type usr=\"s:4main11TensorShapeV5Indexa\">Index<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4359
              }
            ],
            "key.bodylength" : 8,
            "key.bodyoffset" : 4405,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "override func formIndex(before i: inout Self.Index)",
            "key.doc.discussion" : [
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Function><Name>formIndex(before:)<\/Name><USR>s:Sk9formIndex6beforey0B0Qzz_tF<\/USR><Declaration>override func formIndex(before i: inout Self.Index)<\/Declaration><CommentParts><Abstract><Para>Replaces the given index with its predecessor.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection. <codeVoice>i<\/codeVoice> must be greater than <codeVoice>startIndex<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>RandomAccessCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.name" : "formIndex(before:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "A valid index of the collection. `i` must be greater than `startIndex`."
                  }
                ],
                "name" : "i"
              }
            ],
            "key.doc.type" : "Function",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formIndex<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>before<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.typealias usr=\"s:4main11TensorShapeV5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 48,
            "key.line" : 166,
            "key.modulename" : "main",
            "key.name" : "formIndex(before:)",
            "key.namelength" : 32,
            "key.nameoffset" : 4371,
            "key.offset" : 4366,
            "key.overrides" : [
              {
                "key.usr" : "s:Sk9formIndex6beforey0B0Qzz_tF"
              },
              {
                "key.usr" : "s:SK9formIndex6beforey0B0Qzz_tF"
              }
            ],
            "key.parsed_declaration" : "public func formIndex(before i: inout Index)",
            "key.parsed_scope.end" : 166,
            "key.parsed_scope.start" : 166,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main11TensorShapeV9formIndex5afterySiz_tF\">formIndex(after:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(TensorShape) -> (inout Int) -> ()",
            "key.typeusr" : "$s6beforeySiz_tcD",
            "key.usr" : "s:Sk9formIndex6beforey0B0Qzz_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(position: <Type usr=\"s:4main11TensorShapeV5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:4main11TensorShapeV7Elementa\">Element<\/Type> { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4417
              }
            ],
            "key.bodylength" : 1331,
            "key.bodyoffset" : 4463,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "subscript(position: Self.Index) -> Self.Element { get }",
            "key.doc.discussion" : [
              {
                "Para" : "The following example accesses an element of an array through its subscript to print its value:"
              },
              {
                "CodeListing" : ""
              },
              {
                "Para" : "You can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element."
              },
              {
                "Complexity" : ""
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>subscript(_:)<\/Name><USR>s:Sly7ElementQz5IndexQzcip<\/USR><Declaration>subscript(position: Self.Index) -&gt; Self.Element { get }<\/Declaration><CommentParts><Abstract><Para>Accesses the element at the specified position.<\/Para><\/Abstract><Parameters><Parameter><Name>position<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The position of the element to access. <codeVoice>position<\/codeVoice> must be a valid index of the collection that is not equal to the <codeVoice>endIndex<\/codeVoice> property.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>The following example accesses an element of an array through its subscript to print its value:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(streets[1])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Bryant\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.<\/Para><Complexity><Para>O(1)<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "subscript(_:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "The position of the element to access. `position` must be a valid index of the collection that is not equal to the `endIndex` property."
                  }
                ],
                "name" : "position"
              }
            ],
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>position<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:4main11TensorShapeV5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:4main11TensorShapeV7Elementa\">Element<\/ref.typealias><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 1371,
            "key.line" : 167,
            "key.modulename" : "main",
            "key.name" : "subscript(_:)",
            "key.namelength" : 26,
            "key.nameoffset" : 4424,
            "key.offset" : 4424,
            "key.overrides" : [
              {
                "key.usr" : "s:Sky7ElementQz5IndexQzcip"
              },
              {
                "key.usr" : "s:SKy7ElementQz5IndexQzcip"
              },
              {
                "key.usr" : "s:Sly7ElementQz5IndexQzcip"
              }
            ],
            "key.parsed_declaration" : "public subscript(position: Index) -> Element",
            "key.parsed_scope.end" : 228,
            "key.parsed_scope.start" : 167,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main11TensorShapeVyACSnySiGcip\">subscript(_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "(Int) -> Int",
            "key.typeusr" : "$syS2icD",
            "key.usr" : "s:Sly7ElementQz5IndexQzcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(indices: <Type usr=\"s:4main11TensorShapeV7Indicesa\">Indices<\/Type>) -&gt; <Type usr=\"s:4main11TensorShapeV11SubSequencea\">SubSequence<\/Type> { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 5798
              }
            ],
            "key.bodylength" : 1206,
            "key.bodyoffset" : 5849,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "override subscript(bounds: Range<Self.Index>) -> Self.SubSequence { get }",
            "key.doc.discussion" : [
              {
                "Para" : "The accessed slice uses the same indices for the same elements as the original collection uses. Always use the slice’s `startIndex` property instead of assuming that its indices start at a particular value."
              },
              {
                "Para" : "This example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array."
              },
              {
                "CodeListing" : ""
              },
              {
                "Complexity" : ""
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>subscript(_:)<\/Name><USR>s:Sky11SubSequenceQzSny5IndexQzGcip<\/USR><Declaration>override subscript(bounds: Range&lt;Self.Index&gt;) -&gt; Self.SubSequence { get }<\/Declaration><CommentParts><Abstract><Para>Accesses a contiguous subrange of the collection’s elements.<\/Para><\/Abstract><Parameters><Parameter><Name>bounds<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A range of the collection’s indices. The bounds of the range must be valid indices of the collection.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>The accessed slice uses the same indices for the same elements as the original collection uses. Always use the slice’s <codeVoice>startIndex<\/codeVoice> property instead of assuming that its indices start at a particular value.<\/Para><Para>This example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let streetsSlice = streets[2 ..< streets.endIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(streetsSlice)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[\"Channing\", \"Douglas\", \"Evarts\"]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let index = streetsSlice.firstIndex(of: \"Evarts\")    \/\/ 4]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(streets[index!])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Evarts\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Complexity><Para>O(1)<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>RandomAccessCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "subscript(_:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "A range of the collection’s indices. The bounds of the range must be valid indices of the collection."
                  }
                ],
                "name" : "bounds"
              }
            ],
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>indices<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:4main11TensorShapeV7Indicesa\">Indices<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:4main11TensorShapeV11SubSequencea\">SubSequence<\/ref.typealias><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 1251,
            "key.line" : 229,
            "key.modulename" : "main",
            "key.name" : "subscript(_:)",
            "key.namelength" : 27,
            "key.nameoffset" : 5805,
            "key.offset" : 5805,
            "key.overrides" : [
              {
                "key.usr" : "s:Sky11SubSequenceQzSny5IndexQzGcip"
              },
              {
                "key.usr" : "s:SKy11SubSequenceQzSny5IndexQzGcip"
              },
              {
                "key.usr" : "s:Sly11SubSequenceQzSny5IndexQzGcip"
              }
            ],
            "key.parsed_declaration" : "public subscript(indices: Indices) -> SubSequence",
            "key.parsed_scope.end" : 257,
            "key.parsed_scope.start" : 229,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main11TensorShapeVyS2icip\">subscript(_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "(Range<Int>) -> TensorShape",
            "key.typeusr" : "$sy4main11TensorShapeVSnySiGcD",
            "key.usr" : "s:Sky11SubSequenceQzSny5IndexQzGcip"
          },
          {
            "key.annotated_decl" : "<Declaration>var shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>shape<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 16,
            "key.line" : 233,
            "key.modulename" : "main",
            "key.name" : "shape",
            "key.namelength" : 5,
            "key.nameoffset" : 6015,
            "key.offset" : 6011,
            "key.parsed_declaration" : "var shape = self",
            "key.parsed_scope.end" : 233,
            "key.parsed_scope.start" : 233,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main11TensorShapeVyACSnySiGcig5shapeL_ACvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let length: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>.<Type usr=\"s:4main11TensorShapeV5Indexa\">Index<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>length<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>.<ref.typealias usr=\"s:4main11TensorShapeV5Indexa\">Index<\/ref.typealias><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 52,
            "key.line" : 247,
            "key.modulename" : "main",
            "key.name" : "length",
            "key.namelength" : 6,
            "key.nameoffset" : 6591,
            "key.offset" : 6587,
            "key.parsed_declaration" : "let length = indices.upperBound - indices.lowerBound",
            "key.parsed_scope.end" : 247,
            "key.parsed_scope.start" : 247,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main11TensorShapeVyACSnySiGcis6lengthL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>var newValue: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>.<Type usr=\"s:4main11TensorShapeV11SubSequencea\">SubSequence<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>newValue<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>.<ref.typealias usr=\"s:4main11TensorShapeV11SubSequencea\">SubSequence<\/ref.typealias><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 23,
            "key.line" : 248,
            "key.modulename" : "main",
            "key.name" : "newValue",
            "key.namelength" : 8,
            "key.nameoffset" : 6650,
            "key.offset" : 6646,
            "key.parsed_declaration" : "var newValue = newValue",
            "key.parsed_scope.end" : 248,
            "key.parsed_scope.start" : 248,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main11TensorShapeVyACSnySiGcis8newValueL0_ACvp"
          }
        ],
        "key.typename" : "TensorShape.Type",
        "key.typeusr" : "$s4main11TensorShapeVmD",
        "key.usr" : "s:4main11TensorShapeV"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public enum TensorShapeFormat<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 7100
          }
        ],
        "key.bodylength" : 1579,
        "key.bodyoffset" : 7131,
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 13,
        "key.doc.comment" : "Tensor shapes and its arrangements.",
        "key.doc.declaration" : "public enum TensorShapeFormat",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"261\" column=\"13\"><Name>TensorShapeFormat<\/Name><USR>s:4main17TensorShapeFormatO<\/USR><Declaration>public enum TensorShapeFormat<\/Declaration><CommentParts><Abstract><Para>Tensor shapes and its arrangements.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 261,
        "key.doc.name" : "TensorShapeFormat",
        "key.doc.type" : "Other",
        "key.doclength" : 40,
        "key.docoffset" : 7060,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>TensorShapeFormat<\/decl.name><\/decl.enum>",
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 1604,
        "key.line" : 261,
        "key.modulename" : "main",
        "key.name" : "TensorShapeFormat",
        "key.namelength" : 17,
        "key.nameoffset" : 7112,
        "key.offset" : 7107,
        "key.parsed_declaration" : "public enum TensorShapeFormat",
        "key.parsed_scope.end" : 337,
        "key.parsed_scope.start" : 261,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 11,
            "key.offset" : 7134,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case C(<Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>C<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 6,
                "key.line" : 262,
                "key.modulename" : "main",
                "key.name" : "C(_:)",
                "key.namelength" : 6,
                "key.nameoffset" : 7139,
                "key.offset" : 7139,
                "key.parsed_declaration" : "case C(Int)",
                "key.parsed_scope.end" : 262,
                "key.parsed_scope.start" : 262,
                "key.reusingastcontext" : false,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorShapeFormat.Type) -> (Int) -> TensorShapeFormat",
                "key.typeusr" : "$sy4main17TensorShapeFormatOSicACmcD",
                "key.usr" : "s:4main17TensorShapeFormatO1CyACSicACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 17,
            "key.offset" : 7166,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case NC(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>NC<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 12,
                "key.line" : 263,
                "key.modulename" : "main",
                "key.name" : "NC(_:_:)",
                "key.namelength" : 12,
                "key.nameoffset" : 7171,
                "key.offset" : 7171,
                "key.parsed_declaration" : "case NC(Int, Int)",
                "key.parsed_scope.end" : 263,
                "key.parsed_scope.start" : 263,
                "key.reusingastcontext" : false,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorShapeFormat.Type) -> (Int, Int) -> TensorShapeFormat",
                "key.typeusr" : "$sy4main17TensorShapeFormatOSi_SitcACmcD",
                "key.usr" : "s:4main17TensorShapeFormatO2NCyACSi_SitcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 17,
            "key.offset" : 7204,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case WC(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>WC<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 12,
                "key.line" : 264,
                "key.modulename" : "main",
                "key.name" : "WC(_:_:)",
                "key.namelength" : 12,
                "key.nameoffset" : 7209,
                "key.offset" : 7209,
                "key.parsed_declaration" : "case WC(Int, Int)",
                "key.parsed_scope.end" : 264,
                "key.parsed_scope.start" : 264,
                "key.reusingastcontext" : false,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorShapeFormat.Type) -> (Int, Int) -> TensorShapeFormat",
                "key.typeusr" : "$sy4main17TensorShapeFormatOSi_SitcACmcD",
                "key.usr" : "s:4main17TensorShapeFormatO2WCyACSi_SitcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 23,
            "key.offset" : 7242,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case HWC(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>HWC<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 18,
                "key.line" : 265,
                "key.modulename" : "main",
                "key.name" : "HWC(_:_:_:)",
                "key.namelength" : 18,
                "key.nameoffset" : 7247,
                "key.offset" : 7247,
                "key.parsed_declaration" : "case HWC(Int, Int, Int)",
                "key.parsed_scope.end" : 265,
                "key.parsed_scope.start" : 265,
                "key.reusingastcontext" : false,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorShapeFormat.Type) -> (Int, Int, Int) -> TensorShapeFormat",
                "key.typeusr" : "$sy4main17TensorShapeFormatOSi_S2itcACmcD",
                "key.usr" : "s:4main17TensorShapeFormatO3HWCyACSi_S2itcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 23,
            "key.offset" : 7286,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case CHW(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>CHW<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 18,
                "key.line" : 266,
                "key.modulename" : "main",
                "key.name" : "CHW(_:_:_:)",
                "key.namelength" : 18,
                "key.nameoffset" : 7291,
                "key.offset" : 7291,
                "key.parsed_declaration" : "case CHW(Int, Int, Int)",
                "key.parsed_scope.end" : 266,
                "key.parsed_scope.start" : 266,
                "key.reusingastcontext" : false,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorShapeFormat.Type) -> (Int, Int, Int) -> TensorShapeFormat",
                "key.typeusr" : "$sy4main17TensorShapeFormatOSi_S2itcACmcD",
                "key.usr" : "s:4main17TensorShapeFormatO3CHWyACSi_S2itcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 29,
            "key.offset" : 7330,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case NHWC(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>NHWC<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 24,
                "key.line" : 267,
                "key.modulename" : "main",
                "key.name" : "NHWC(_:_:_:_:)",
                "key.namelength" : 24,
                "key.nameoffset" : 7335,
                "key.offset" : 7335,
                "key.parsed_declaration" : "case NHWC(Int, Int, Int, Int)",
                "key.parsed_scope.end" : 267,
                "key.parsed_scope.start" : 267,
                "key.reusingastcontext" : false,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorShapeFormat.Type) -> (Int, Int, Int, Int) -> TensorShapeFormat",
                "key.typeusr" : "$sy4main17TensorShapeFormatOSi_S3itcACmcD",
                "key.usr" : "s:4main17TensorShapeFormatO4NHWCyACSi_S3itcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 29,
            "key.offset" : 7362,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case NCHW(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>NCHW<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 24,
                "key.line" : 268,
                "key.modulename" : "main",
                "key.name" : "NCHW(_:_:_:_:)",
                "key.namelength" : 24,
                "key.nameoffset" : 7367,
                "key.offset" : 7367,
                "key.parsed_declaration" : "case NCHW(Int, Int, Int, Int)",
                "key.parsed_scope.end" : 268,
                "key.parsed_scope.start" : 268,
                "key.reusingastcontext" : false,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorShapeFormat.Type) -> (Int, Int, Int, Int) -> TensorShapeFormat",
                "key.typeusr" : "$sy4main17TensorShapeFormatOSi_S3itcACmcD",
                "key.usr" : "s:4main17TensorShapeFormatO4NCHWyACSi_S3itcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 29,
            "key.offset" : 7394,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case CHWN(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>CHWN<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 24,
                "key.line" : 269,
                "key.modulename" : "main",
                "key.name" : "CHWN(_:_:_:_:)",
                "key.namelength" : 24,
                "key.nameoffset" : 7399,
                "key.offset" : 7399,
                "key.parsed_declaration" : "case CHWN(Int, Int, Int, Int)",
                "key.parsed_scope.end" : 269,
                "key.parsed_scope.start" : 269,
                "key.reusingastcontext" : false,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorShapeFormat.Type) -> (Int, Int, Int, Int) -> TensorShapeFormat",
                "key.typeusr" : "$sy4main17TensorShapeFormatOSi_S3itcACmcD",
                "key.usr" : "s:4main17TensorShapeFormatO4CHWNyACSi_S3itcACmF"
              }
            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline var format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 7427
              }
            ],
            "key.bodylength" : 298,
            "key.bodyoffset" : 7473,
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>format<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 325,
            "key.line" : 272,
            "key.modulename" : "main",
            "key.name" : "format",
            "key.namelength" : 6,
            "key.nameoffset" : 7451,
            "key.offset" : 7447,
            "key.parsed_declaration" : "var format: TensorFormat",
            "key.parsed_scope.end" : 291,
            "key.parsed_scope.start" : 272,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorFormat",
            "key.typeusr" : "$s4main12TensorFormatOD",
            "key.usr" : "s:4main17TensorShapeFormatO6formatAA0bD0Ovp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline var shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 7776
              }
            ],
            "key.bodylength" : 888,
            "key.bodyoffset" : 7820,
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>shape<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 913,
            "key.line" : 294,
            "key.modulename" : "main",
            "key.name" : "shape",
            "key.namelength" : 5,
            "key.nameoffset" : 7800,
            "key.offset" : 7796,
            "key.parsed_declaration" : "var shape: TensorShape",
            "key.parsed_scope.end" : 336,
            "key.parsed_scope.start" : 294,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main17TensorShapeFormatO5shapeAA0bC0Vvp"
          }
        ],
        "key.typename" : "TensorShapeFormat.Type",
        "key.typeusr" : "$s4main17TensorShapeFormatOmD",
        "key.usr" : "s:4main17TensorShapeFormatO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public enum DataType<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 8748
          }
        ],
        "key.bodylength" : 1296,
        "key.bodyoffset" : 8770,
        "key.column" : 13,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 13,
        "key.doc.comment" : "Data types for a given tensor.",
        "key.doc.declaration" : "public enum DataType",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"340\" column=\"13\"><Name>DataType<\/Name><USR>s:4main8DataTypeO<\/USR><Declaration>public enum DataType<\/Declaration><CommentParts><Abstract><Para>Data types for a given tensor.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 340,
        "key.doc.name" : "DataType",
        "key.doc.type" : "Other",
        "key.doclength" : 35,
        "key.docoffset" : 8713,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>DataType<\/decl.name><\/decl.enum>",
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 1312,
        "key.line" : 340,
        "key.modulename" : "main",
        "key.name" : "DataType",
        "key.namelength" : 8,
        "key.nameoffset" : 8760,
        "key.offset" : 8755,
        "key.parsed_declaration" : "public enum DataType",
        "key.parsed_scope.end" : 401,
        "key.parsed_scope.start" : 340,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 12,
            "key.offset" : 8773,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Float64<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Float64<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 7,
                "key.line" : 341,
                "key.modulename" : "main",
                "key.name" : "Float64",
                "key.namelength" : 7,
                "key.nameoffset" : 8778,
                "key.offset" : 8778,
                "key.parsed_declaration" : "case Float64",
                "key.parsed_scope.end" : 341,
                "key.parsed_scope.start" : 341,
                "key.reusingastcontext" : false,
                "key.typename" : "(DataType.Type) -> DataType",
                "key.typeusr" : "$sy4main8DataTypeOACmcD",
                "key.usr" : "s:4main8DataTypeO7Float64yA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 10,
            "key.offset" : 8788,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Int64<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Int64<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 5,
                "key.line" : 342,
                "key.modulename" : "main",
                "key.name" : "Int64",
                "key.namelength" : 5,
                "key.nameoffset" : 8793,
                "key.offset" : 8793,
                "key.parsed_declaration" : "case Int64",
                "key.parsed_scope.end" : 342,
                "key.parsed_scope.start" : 342,
                "key.reusingastcontext" : false,
                "key.typename" : "(DataType.Type) -> DataType",
                "key.typeusr" : "$sy4main8DataTypeOACmcD",
                "key.usr" : "s:4main8DataTypeO5Int64yA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 12,
            "key.offset" : 8801,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Float32<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Float32<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 7,
                "key.line" : 343,
                "key.modulename" : "main",
                "key.name" : "Float32",
                "key.namelength" : 7,
                "key.nameoffset" : 8806,
                "key.offset" : 8806,
                "key.parsed_declaration" : "case Float32",
                "key.parsed_scope.end" : 343,
                "key.parsed_scope.start" : 343,
                "key.reusingastcontext" : false,
                "key.typename" : "(DataType.Type) -> DataType",
                "key.typeusr" : "$sy4main8DataTypeOACmcD",
                "key.usr" : "s:4main8DataTypeO7Float32yA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 10,
            "key.offset" : 8816,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Int32<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Int32<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 5,
                "key.line" : 344,
                "key.modulename" : "main",
                "key.name" : "Int32",
                "key.namelength" : 5,
                "key.nameoffset" : 8821,
                "key.offset" : 8821,
                "key.parsed_declaration" : "case Int32",
                "key.parsed_scope.end" : 344,
                "key.parsed_scope.start" : 344,
                "key.reusingastcontext" : false,
                "key.typename" : "(DataType.Type) -> DataType",
                "key.typeusr" : "$sy4main8DataTypeOACmcD",
                "key.usr" : "s:4main8DataTypeO5Int32yA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 12,
            "key.offset" : 8829,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Float16<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Float16<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 7,
                "key.line" : 345,
                "key.modulename" : "main",
                "key.name" : "Float16",
                "key.namelength" : 7,
                "key.nameoffset" : 8834,
                "key.offset" : 8834,
                "key.parsed_declaration" : "case Float16",
                "key.parsed_scope.end" : 345,
                "key.parsed_scope.start" : 345,
                "key.reusingastcontext" : false,
                "key.typename" : "(DataType.Type) -> DataType",
                "key.typeusr" : "$sy4main8DataTypeOACmcD",
                "key.usr" : "s:4main8DataTypeO7Float16yA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 10,
            "key.offset" : 8844,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case UInt8<\/Declaration>",
                "key.column" : 8,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>UInt8<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 5,
                "key.line" : 346,
                "key.modulename" : "main",
                "key.name" : "UInt8",
                "key.namelength" : 5,
                "key.nameoffset" : 8849,
                "key.offset" : 8849,
                "key.parsed_declaration" : "case UInt8",
                "key.parsed_scope.end" : 346,
                "key.parsed_scope.start" : 346,
                "key.reusingastcontext" : false,
                "key.typename" : "(DataType.Type) -> DataType",
                "key.typeusr" : "$sy4main8DataTypeOACmcD",
                "key.usr" : "s:4main8DataTypeO5UInt8yA2CmF"
              }
            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func from(cTensorParams: ccv_nnc_tensor_param_t) -&gt; <Type usr=\"s:4main8DataTypeO\">DataType<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 8858
              }
            ],
            "key.bodylength" : 745,
            "key.bodyoffset" : 8934,
            "key.column" : 22,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>from<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>cTensorParams<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 815,
            "key.line" : 348,
            "key.modulename" : "main",
            "key.name" : "from(cTensorParams:)",
            "key.namelength" : 43,
            "key.nameoffset" : 8877,
            "key.offset" : 8865,
            "key.parsed_declaration" : "public static func from(cTensorParams: ccv_nnc_tensor_param_t) -> DataType",
            "key.parsed_scope.end" : 382,
            "key.parsed_scope.start" : 348,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(DataType.Type) -> (<<error type>>) -> DataType",
            "key.typeusr" : "$syXeXecD",
            "key.usr" : "s:4main8DataTypeO4fromyXeXeFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline var toC: Swift.<Type usr=\"s:s5Int32V\">Int32<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 9684
              }
            ],
            "key.bodylength" : 338,
            "key.bodyoffset" : 9726,
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>toC<\/decl.name>: <decl.var.type>Swift.<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 361,
            "key.line" : 385,
            "key.modulename" : "main",
            "key.name" : "toC",
            "key.namelength" : 3,
            "key.nameoffset" : 9708,
            "key.offset" : 9704,
            "key.parsed_declaration" : "var toC: Swift.Int32",
            "key.parsed_scope.end" : 400,
            "key.parsed_scope.start" : 385,
            "key.reusingastcontext" : false,
            "key.typename" : "Int32",
            "key.typeusr" : "$ss5Int32VD",
            "key.usr" : "s:4main8DataTypeO3toCs5Int32Vvp"
          }
        ],
        "key.typename" : "DataType.Type",
        "key.typeusr" : "$s4main8DataTypeOmD",
        "key.usr" : "s:4main8DataTypeO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public protocol TensorNumeric : <Type usr=\"s:Sj\">Numeric<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 10069
          }
        ],
        "key.bodylength" : 41,
        "key.bodyoffset" : 10109,
        "key.column" : 17,
        "key.decl_lang" : "source.lang.swift",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 7,
            "key.offset" : 10100
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>TensorNumeric<\/decl.name> : <ref.protocol usr=\"s:Sj\">Numeric<\/ref.protocol><\/decl.protocol>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Numeric"
          }
        ],
        "key.kind" : "source.lang.swift.decl.protocol",
        "key.length" : 75,
        "key.line" : 403,
        "key.modulename" : "main",
        "key.name" : "TensorNumeric",
        "key.namelength" : 13,
        "key.nameoffset" : 10085,
        "key.offset" : 10076,
        "key.parsed_declaration" : "public protocol TensorNumeric: Numeric",
        "key.parsed_scope.end" : 405,
        "key.parsed_scope.start" : 403,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 10143,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 37,
            "key.line" : 404,
            "key.modulename" : "main",
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 10123,
            "key.offset" : 10112,
            "key.parsed_declaration" : "static var dataType: DataType",
            "key.parsed_scope.end" : 404,
            "key.parsed_scope.start" : 404,
            "key.reusingastcontext" : false,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
          }
        ],
        "key.typename" : "TensorNumeric.Type",
        "key.typeusr" : "$s4main13TensorNumeric_pmD",
        "key.usr" : "s:4main13TensorNumericP"
      },
      {
        "key.annotated_decl" : "<Declaration>typealias Float64 = <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
        "key.bodylength" : 53,
        "key.bodyoffset" : 10187,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "typealias Float64 = Double",
        "key.doc.full_as_xml" : "<Other><Name>Float64<\/Name><USR>s:s7Float64a<\/USR><Declaration>typealias Float64 = Double<\/Declaration><CommentParts><Abstract><Para>A 64-bit floating point type.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.name" : "Float64",
        "key.doc.type" : "Other",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 10172
          }
        ],
        "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Float64<\/decl.name> = <ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.typealias>",
        "key.groupname" : "Misc",
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 88,
        "key.modulename" : "Swift",
        "key.name" : "Float64",
        "key.namelength" : 7,
        "key.nameoffset" : 10163,
        "key.offset" : 10153,
        "key.parsed_declaration" : "extension Float64: TensorNumeric",
        "key.parsed_scope.end" : 409,
        "key.parsed_scope.start" : 407,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 10190
              }
            ],
            "key.bodylength" : 10,
            "key.bodyoffset" : 10228,
            "key.column" : 21,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 42,
            "key.line" : 408,
            "key.modulename" : "main",
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 10208,
            "key.offset" : 10197,
            "key.overrides" : [
              {
                "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
              }
            ],
            "key.parsed_declaration" : "public static var dataType: DataType",
            "key.parsed_scope.end" : 408,
            "key.parsed_scope.start" : 408,
            "key.reusingastcontext" : false,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:Sd4mainE8dataTypeAA04DataC0OvpZ"
          }
        ],
        "key.typename" : "Double.Type",
        "key.typeusr" : "$sSdmD",
        "key.usr" : "s:s7Float64a"
      },
      {
        "key.annotated_decl" : "<Declaration>@frozen struct Int64 : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type>, <Type usr=\"s:SZ\">SignedInteger<\/Type>, <Type usr=\"s:s35_ExpressibleByBuiltinIntegerLiteralP\">_ExpressibleByBuiltinIntegerLiteral<\/Type><\/Declaration>",
        "key.bodylength" : 51,
        "key.bodyoffset" : 10275,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "@frozen struct Int64 : FixedWidthInteger, SignedInteger, _ExpressibleByBuiltinIntegerLiteral",
        "key.doc.full_as_xml" : "<Class><Name>Int64<\/Name><USR>s:s5Int64V<\/USR><Declaration>@frozen struct Int64 : FixedWidthInteger, SignedInteger, _ExpressibleByBuiltinIntegerLiteral<\/Declaration><CommentParts><Abstract><Para>A 64-bit signed integer value type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.name" : "Int64",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 10260
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Int64<\/decl.name> : <ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol>, <ref.protocol usr=\"s:SZ\">SignedInteger<\/ref.protocol>, <ref.protocol usr=\"s:s35_ExpressibleByBuiltinIntegerLiteralP\">_ExpressibleByBuiltinIntegerLiteral<\/ref.protocol><\/decl.struct>",
        "key.groupname" : "Math\/Integers",
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 84,
        "key.modulename" : "Swift",
        "key.name" : "Int64",
        "key.namelength" : 5,
        "key.nameoffset" : 10253,
        "key.offset" : 10243,
        "key.parsed_declaration" : "extension Int64: TensorNumeric",
        "key.parsed_scope.end" : 413,
        "key.parsed_scope.start" : 411,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 10278
              }
            ],
            "key.bodylength" : 8,
            "key.bodyoffset" : 10316,
            "key.column" : 21,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 40,
            "key.line" : 412,
            "key.modulename" : "main",
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 10296,
            "key.offset" : 10285,
            "key.overrides" : [
              {
                "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
              }
            ],
            "key.parsed_declaration" : "public static var dataType: DataType",
            "key.parsed_scope.end" : 412,
            "key.parsed_scope.start" : 412,
            "key.reusingastcontext" : false,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:s5Int64V4mainE8dataTypeAC04DataD0OvpZ"
          }
        ],
        "key.typename" : "Int64.Type",
        "key.typeusr" : "$ss5Int64VmD",
        "key.usr" : "s:s5Int64V"
      },
      {
        "key.annotated_decl" : "<Declaration>typealias Float32 = <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
        "key.bodylength" : 53,
        "key.bodyoffset" : 10363,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "typealias Float32 = Float",
        "key.doc.full_as_xml" : "<Other><Name>Float32<\/Name><USR>s:s7Float32a<\/USR><Declaration>typealias Float32 = Float<\/Declaration><CommentParts><Abstract><Para>A 32-bit floating point type.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.name" : "Float32",
        "key.doc.type" : "Other",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 10348
          }
        ],
        "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Float32<\/decl.name> = <ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.typealias>",
        "key.groupname" : "Misc",
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 88,
        "key.modulename" : "Swift",
        "key.name" : "Float32",
        "key.namelength" : 7,
        "key.nameoffset" : 10339,
        "key.offset" : 10329,
        "key.parsed_declaration" : "extension Float32: TensorNumeric",
        "key.parsed_scope.end" : 417,
        "key.parsed_scope.start" : 415,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 10366
              }
            ],
            "key.bodylength" : 10,
            "key.bodyoffset" : 10404,
            "key.column" : 21,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 42,
            "key.line" : 416,
            "key.modulename" : "main",
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 10384,
            "key.offset" : 10373,
            "key.overrides" : [
              {
                "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
              }
            ],
            "key.parsed_declaration" : "public static var dataType: DataType",
            "key.parsed_scope.end" : 416,
            "key.parsed_scope.start" : 416,
            "key.reusingastcontext" : false,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:Sf4mainE8dataTypeAA04DataC0OvpZ"
          }
        ],
        "key.typename" : "Float.Type",
        "key.typeusr" : "$sSfmD",
        "key.usr" : "s:s7Float32a"
      },
      {
        "key.annotated_decl" : "<Declaration>@frozen struct Int32 : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type>, <Type usr=\"s:SZ\">SignedInteger<\/Type>, <Type usr=\"s:s35_ExpressibleByBuiltinIntegerLiteralP\">_ExpressibleByBuiltinIntegerLiteral<\/Type><\/Declaration>",
        "key.bodylength" : 51,
        "key.bodyoffset" : 10451,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "@frozen struct Int32 : FixedWidthInteger, SignedInteger, _ExpressibleByBuiltinIntegerLiteral",
        "key.doc.full_as_xml" : "<Class><Name>Int32<\/Name><USR>s:s5Int32V<\/USR><Declaration>@frozen struct Int32 : FixedWidthInteger, SignedInteger, _ExpressibleByBuiltinIntegerLiteral<\/Declaration><CommentParts><Abstract><Para>A 32-bit signed integer value type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.name" : "Int32",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 10436
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Int32<\/decl.name> : <ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol>, <ref.protocol usr=\"s:SZ\">SignedInteger<\/ref.protocol>, <ref.protocol usr=\"s:s35_ExpressibleByBuiltinIntegerLiteralP\">_ExpressibleByBuiltinIntegerLiteral<\/ref.protocol><\/decl.struct>",
        "key.groupname" : "Math\/Integers",
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 84,
        "key.modulename" : "Swift",
        "key.name" : "Int32",
        "key.namelength" : 5,
        "key.nameoffset" : 10429,
        "key.offset" : 10419,
        "key.parsed_declaration" : "extension Int32: TensorNumeric",
        "key.parsed_scope.end" : 421,
        "key.parsed_scope.start" : 419,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 10454
              }
            ],
            "key.bodylength" : 8,
            "key.bodyoffset" : 10492,
            "key.column" : 21,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 40,
            "key.line" : 420,
            "key.modulename" : "main",
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 10472,
            "key.offset" : 10461,
            "key.overrides" : [
              {
                "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
              }
            ],
            "key.parsed_declaration" : "public static var dataType: DataType",
            "key.parsed_scope.end" : 420,
            "key.parsed_scope.start" : 420,
            "key.reusingastcontext" : false,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:s5Int32V4mainE8dataTypeAC04DataD0OvpZ"
          }
        ],
        "key.typename" : "Int32.Type",
        "key.typeusr" : "$ss5Int32VmD",
        "key.usr" : "s:s5Int32V"
      },
      {
        "key.annotated_decl" : "<Declaration>@frozen struct Float16<\/Declaration>",
        "key.bodylength" : 57,
        "key.bodyoffset" : 10639,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)\n@frozen struct Float16",
        "key.doc.discussion" : [
          {
            "Para" : "`Float16` is available on Apple silicon, and unavailable on Intel when targeting macOS."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Float16<\/Name><USR>s:s7Float16V<\/USR><Declaration>@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)\n@frozen struct Float16<\/Declaration><CommentParts><Abstract><Para>A half-precision (16b), floating-point value type.<\/Para><\/Abstract><Discussion><Para><codeVoice>Float16<\/codeVoice> is available on Apple silicon, and unavailable on Intel when targeting macOS.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Float16",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 10624
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Float16<\/decl.name><\/decl.struct>",
        "key.groupname" : "Math\/Floating",
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 92,
        "key.modulename" : "Swift",
        "key.name" : "Float16",
        "key.namelength" : 7,
        "key.nameoffset" : 10615,
        "key.offset" : 10605,
        "key.parsed_declaration" : "extension Float16: TensorNumeric",
        "key.parsed_scope.end" : 426,
        "key.parsed_scope.start" : 424,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 10644
              }
            ],
            "key.bodylength" : 10,
            "key.bodyoffset" : 10682,
            "key.column" : 23,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 42,
            "key.line" : 425,
            "key.modulename" : "main",
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 10662,
            "key.offset" : 10651,
            "key.overrides" : [
              {
                "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
              }
            ],
            "key.parsed_declaration" : "public static var dataType: DataType",
            "key.parsed_scope.end" : 425,
            "key.parsed_scope.start" : 425,
            "key.reusingastcontext" : false,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:s7Float16V4mainE8dataTypeAC04DataD0OvpZ"
          }
        ],
        "key.typename" : "Float16.Type",
        "key.typeusr" : "$ss7Float16VmD",
        "key.usr" : "s:s7Float16V"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 10706
          }
        ],
        "key.internal_diagnostic" : "Unable to resolve cursor info.",
        "key.kind" : "source.lang.swift.decl.typealias",
        "key.length" : 26,
        "key.name" : "Float16",
        "key.namelength" : 7,
        "key.nameoffset" : 10724,
        "key.offset" : 10714
      },
      {
        "key.bodylength" : 57,
        "key.bodyoffset" : 10777,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 10762
          }
        ],
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.internal_diagnostic" : "Unable to resolve cursor info.",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 92,
        "key.name" : "Float16",
        "key.namelength" : 7,
        "key.nameoffset" : 10753,
        "key.offset" : 10743,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 10782
              }
            ],
            "key.bodylength" : 10,
            "key.bodyoffset" : 10820,
            "key.internal_diagnostic" : "Unable to resolve cursor info.",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 42,
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 10800,
            "key.offset" : 10789,
            "key.typename" : "DataType"
          }
        ]
      },
      {
        "key.annotated_decl" : "<Declaration>@frozen struct UInt8 : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type>, <Type usr=\"s:SU\">UnsignedInteger<\/Type>, <Type usr=\"s:s35_ExpressibleByBuiltinIntegerLiteralP\">_ExpressibleByBuiltinIntegerLiteral<\/Type><\/Declaration>",
        "key.bodylength" : 51,
        "key.bodyoffset" : 10876,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "@frozen struct UInt8 : FixedWidthInteger, UnsignedInteger, _ExpressibleByBuiltinIntegerLiteral",
        "key.doc.full_as_xml" : "<Class><Name>UInt8<\/Name><USR>s:s5UInt8V<\/USR><Declaration>@frozen struct UInt8 : FixedWidthInteger, UnsignedInteger, _ExpressibleByBuiltinIntegerLiteral<\/Declaration><CommentParts><Abstract><Para>An 8-bit unsigned integer value type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.name" : "UInt8",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 10861
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>UInt8<\/decl.name> : <ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol>, <ref.protocol usr=\"s:SU\">UnsignedInteger<\/ref.protocol>, <ref.protocol usr=\"s:s35_ExpressibleByBuiltinIntegerLiteralP\">_ExpressibleByBuiltinIntegerLiteral<\/ref.protocol><\/decl.struct>",
        "key.groupname" : "Math\/Integers",
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 84,
        "key.modulename" : "Swift",
        "key.name" : "UInt8",
        "key.namelength" : 5,
        "key.nameoffset" : 10854,
        "key.offset" : 10844,
        "key.parsed_declaration" : "extension UInt8: TensorNumeric",
        "key.parsed_scope.end" : 436,
        "key.parsed_scope.start" : 434,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 10879
              }
            ],
            "key.bodylength" : 8,
            "key.bodyoffset" : 10917,
            "key.column" : 21,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 40,
            "key.line" : 435,
            "key.modulename" : "main",
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 10897,
            "key.offset" : 10886,
            "key.overrides" : [
              {
                "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
              }
            ],
            "key.parsed_declaration" : "public static var dataType: DataType",
            "key.parsed_scope.end" : 435,
            "key.parsed_scope.start" : 435,
            "key.reusingastcontext" : false,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:s5UInt8V4mainE8dataTypeAC04DataD0OvpZ"
          }
        ],
        "key.typename" : "UInt8.Type",
        "key.typeusr" : "$ss5UInt8VmD",
        "key.usr" : "s:s5UInt8V"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public final class AnyTensorStorage<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.final",
            "key.length" : 5,
            "key.offset" : 10937
          },
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 10930
          }
        ],
        "key.bodylength" : 2516,
        "key.bodyoffset" : 10967,
        "key.column" : 20,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>AnyTensorStorage<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 2541,
        "key.line" : 438,
        "key.modulename" : "main",
        "key.name" : "AnyTensorStorage",
        "key.namelength" : 16,
        "key.nameoffset" : 10949,
        "key.offset" : 10943,
        "key.parsed_declaration" : "public final class AnyTensorStorage",
        "key.parsed_scope.end" : 521,
        "key.parsed_scope.start" : 438,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate let cTensor: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.fileprivate",
                "key.length" : 11,
                "key.offset" : 10970
              }
            ],
            "key.column" : 19,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensor<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 51,
            "key.line" : 439,
            "key.modulename" : "main",
            "key.name" : "cTensor",
            "key.namelength" : 7,
            "key.nameoffset" : 10986,
            "key.offset" : 10982,
            "key.parsed_declaration" : "fileprivate let cTensor: UnsafeMutablePointer<ccv_nnc_tensor_t>",
            "key.parsed_scope.end" : 439,
            "key.parsed_scope.start" : 439,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageC01cC033_C59670EF05D79618B17EDFA5C2551CEDLLXevp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate let original: Any?<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.fileprivate",
                "key.length" : 11,
                "key.offset" : 11036
              }
            ],
            "key.column" : 19,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>original<\/decl.name>: <decl.var.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>?<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 18,
            "key.line" : 440,
            "key.modulename" : "main",
            "key.name" : "original",
            "key.namelength" : 8,
            "key.nameoffset" : 11052,
            "key.offset" : 11048,
            "key.parsed_declaration" : "fileprivate let original: Any?",
            "key.parsed_scope.end" : 440,
            "key.parsed_scope.start" : 440,
            "key.reusingastcontext" : false,
            "key.typename" : "Any?",
            "key.typeusr" : "$sypSgD",
            "key.usr" : "s:4main16AnyTensorStorageC8original33_C59670EF05D79618B17EDFA5C2551CEDLLypSgvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private let selfOwned: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 11069
              }
            ],
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>selfOwned<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 19,
            "key.line" : 441,
            "key.modulename" : "main",
            "key.name" : "selfOwned",
            "key.namelength" : 9,
            "key.nameoffset" : 11081,
            "key.offset" : 11077,
            "key.parsed_declaration" : "private let selfOwned: Bool",
            "key.parsed_scope.end" : 441,
            "key.parsed_scope.start" : 441,
            "key.reusingastcontext" : false,
            "key.typename" : "Bool",
            "key.typeusr" : "$sSbD",
            "key.usr" : "s:4main16AnyTensorStorageC9selfOwned33_C59670EF05D79618B17EDFA5C2551CEDLLSbvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>init(_ cTensor: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;, original: Any? = nil, selfOwned: <Type usr=\"s:Sb\">Bool<\/Type> = true)<\/Declaration>",
            "key.bodylength" : 90,
            "key.bodyoffset" : 11211,
            "key.column" : 3,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>cTensor<\/decl.var.parameter.name>: <decl.var.parameter.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>original<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>selfOwned<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type> = true<\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 202,
            "key.line" : 443,
            "key.modulename" : "main",
            "key.name" : "init(_:original:selfOwned:)",
            "key.namelength" : 109,
            "key.nameoffset" : 11100,
            "key.offset" : 11100,
            "key.parsed_declaration" : "init(\n  _ cTensor: UnsafeMutablePointer<ccv_nnc_tensor_t>, original: Any? = nil, selfOwned: Bool = true\n)",
            "key.parsed_scope.end" : 449,
            "key.parsed_scope.start" : 443,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(AnyTensorStorage.Type) -> (<<error type>>, Any?, Bool) -> AnyTensorStorage",
            "key.typeusr" : "$syXeXecD",
            "key.usr" : "s:4main16AnyTensorStorageCyXeXecfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>deinit<\/Declaration>",
            "key.bodylength" : 72,
            "key.bodyoffset" : 11314,
            "key.column" : 3,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.destructor><syntaxtype.keyword>deinit<\/syntaxtype.keyword><\/decl.function.destructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 81,
            "key.line" : 451,
            "key.modulename" : "main",
            "key.name" : "deinit",
            "key.namelength" : 6,
            "key.nameoffset" : 11306,
            "key.offset" : 11306,
            "key.parsed_declaration" : "deinit",
            "key.parsed_scope.end" : 454,
            "key.parsed_scope.start" : 451,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(AnyTensorStorage) -> () -> ()",
            "key.typeusr" : "$syycD",
            "key.usr" : "s:4main16AnyTensorStorageCfd"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 11391
              }
            ],
            "key.bodylength" : 58,
            "key.bodyoffset" : 11435,
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 83,
            "key.line" : 457,
            "key.modulename" : "main",
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 11415,
            "key.offset" : 11411,
            "key.parsed_declaration" : "var dataType: DataType",
            "key.parsed_scope.end" : 459,
            "key.parsed_scope.start" : 457,
            "key.reusingastcontext" : false,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:4main16AnyTensorStorageC8dataTypeAA04DataF0Ovp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline func copy() -&gt; <Type usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 11498
              }
            ],
            "key.bodylength" : 346,
            "key.bodyoffset" : 11551,
            "key.column" : 8,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>copy<\/decl.name>() -&gt; <decl.function.returntype><ref.class usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/ref.class><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 380,
            "key.line" : 462,
            "key.modulename" : "main",
            "key.name" : "copy()",
            "key.namelength" : 6,
            "key.nameoffset" : 11523,
            "key.offset" : 11518,
            "key.parsed_declaration" : "func copy() -> AnyTensorStorage",
            "key.parsed_scope.end" : 469,
            "key.parsed_scope.start" : 462,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var input: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>input<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 60,
                "key.line" : 463,
                "key.modulename" : "main",
                "key.name" : "input",
                "key.namelength" : 5,
                "key.nameoffset" : 11560,
                "key.offset" : 11556,
                "key.parsed_declaration" : "var input: UnsafeMutablePointer<ccv_nnc_tensor_t>? = cTensor",
                "key.parsed_scope.end" : 463,
                "key.parsed_scope.start" : 463,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main16AnyTensorStorageC4copyACyF5inputL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>var output: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>output<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 61,
                "key.line" : 464,
                "key.modulename" : "main",
                "key.name" : "output",
                "key.namelength" : 6,
                "key.nameoffset" : 11625,
                "key.offset" : 11621,
                "key.parsed_declaration" : "var output = ccv_nnc_tensor_new(nil, cTensor.pointee.info, 0)",
                "key.parsed_scope.end" : 464,
                "key.parsed_scope.start" : 464,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main16AnyTensorStorageC4copyACyF6outputL_Xevp"
              }
            ],
            "key.typename" : "(AnyTensorStorage) -> () -> AnyTensorStorage",
            "key.typeusr" : "$s4main16AnyTensorStorageCycD",
            "key.usr" : "s:4main16AnyTensorStorageC4copyACyF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline var shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 11902
              }
            ],
            "key.bodylength" : 51,
            "key.bodyoffset" : 11946,
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>shape<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 76,
            "key.line" : 472,
            "key.modulename" : "main",
            "key.name" : "shape",
            "key.namelength" : 5,
            "key.nameoffset" : 11926,
            "key.offset" : 11922,
            "key.parsed_declaration" : "var shape: TensorShape",
            "key.parsed_scope.end" : 474,
            "key.parsed_scope.start" : 472,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main16AnyTensorStorageC5shapeAA0C5ShapeVvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline var strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 12002
              }
            ],
            "key.bodylength" : 521,
            "key.bodyoffset" : 12048,
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>strides<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 548,
            "key.line" : 477,
            "key.modulename" : "main",
            "key.name" : "strides",
            "key.namelength" : 7,
            "key.nameoffset" : 12026,
            "key.offset" : 12022,
            "key.parsed_declaration" : "var strides: TensorShape",
            "key.parsed_scope.end" : 493,
            "key.parsed_scope.start" : 477,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main16AnyTensorStorageC7stridesAA0C5ShapeVvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let type: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>type<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 36,
            "key.line" : 478,
            "key.modulename" : "main",
            "key.name" : "type",
            "key.namelength" : 4,
            "key.nameoffset" : 12057,
            "key.offset" : 12053,
            "key.parsed_declaration" : "let type = Int(cTensor.pointee.type)",
            "key.parsed_scope.end" : 478,
            "key.parsed_scope.start" : 478,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4type2ofq_x_tr0_lF\">type(of:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageC7stridesAA0C5ShapeVvg4typeL_Xevp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline subscript&lt;Element&gt;(indices: [<Type usr=\"s:Si\">Int<\/Type>], type: <Type usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/Type>.Type) -&gt; <Type usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/Type> where <Type usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type> { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 12574
              }
            ],
            "key.bodylength" : 805,
            "key.bodyoffset" : 12676,
            "key.column" : 3,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>indices<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>type<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/ref.generic_type_param>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/ref.generic_type_param><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 888,
            "key.line" : 496,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:)",
            "key.namelength" : 69,
            "key.nameoffset" : 12594,
            "key.offset" : 12594,
            "key.parsed_declaration" : "subscript<Element: TensorNumeric>(indices: [Int], type: Element.Type) -> Element",
            "key.parsed_scope.end" : 520,
            "key.parsed_scope.start" : 496,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluip\">subscript(_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 13,
                    "key.offset" : 12613
                  }
                ],
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Element<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "TensorNumeric"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 22,
                "key.line" : 496,
                "key.modulename" : "main",
                "key.name" : "Element",
                "key.namelength" : 7,
                "key.nameoffset" : 12604,
                "key.offset" : 12604,
                "key.parsed_declaration" : "subscript<Element: TensorNumeric",
                "key.parsed_scope.end" : 496,
                "key.parsed_scope.start" : 496,
                "key.reusingastcontext" : false,
                "key.typename" : "Element.Type",
                "key.typeusr" : "$sxmD",
                "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> ([Int], Element.Type) -> Element",
            "key.typeusr" : "$syxSaySiG_xmtc4main13TensorNumericRzluD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip"
          },
          {
            "key.annotated_decl" : "<Declaration>let strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>strides<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 26,
            "key.line" : 498,
            "key.modulename" : "main",
            "key.name" : "strides",
            "key.namelength" : 7,
            "key.nameoffset" : 12697,
            "key.offset" : 12693,
            "key.parsed_declaration" : "let strides = self.strides",
            "key.parsed_scope.end" : 498,
            "key.parsed_scope.start" : 498,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluig7stridesL_AA0C5ShapeVvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>.<Type usr=\"s:4main11TensorShapeV7Elementa\">Element<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>.<ref.typealias usr=\"s:4main11TensorShapeV7Elementa\">Element<\/ref.typealias><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 33,
            "key.line" : 500,
            "key.modulename" : "main",
            "key.name" : "count",
            "key.namelength" : 5,
            "key.nameoffset" : 12775,
            "key.offset" : 12771,
            "key.parsed_declaration" : "let count = strides[0] * shape[0]",
            "key.parsed_scope.end" : 500,
            "key.parsed_scope.start" : 500,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluig5countL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let pointer: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pointer<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 84,
            "key.line" : 501,
            "key.modulename" : "main",
            "key.name" : "pointer",
            "key.namelength" : 7,
            "key.nameoffset" : 12815,
            "key.offset" : 12811,
            "key.parsed_declaration" : "let pointer = cTensor.pointee.data.ptr.bindMemory(to: Element.self, capacity: count)",
            "key.parsed_scope.end" : 501,
            "key.parsed_scope.start" : 501,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluig7pointerL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var offset: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>offset<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 14,
            "key.line" : 502,
            "key.modulename" : "main",
            "key.name" : "offset",
            "key.namelength" : 6,
            "key.nameoffset" : 12906,
            "key.offset" : 12902,
            "key.parsed_declaration" : "var offset = 0",
            "key.parsed_scope.end" : 502,
            "key.parsed_scope.start" : 502,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluig6offsetL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>strides<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 26,
            "key.line" : 509,
            "key.modulename" : "main",
            "key.name" : "strides",
            "key.namelength" : 7,
            "key.nameoffset" : 13080,
            "key.offset" : 13076,
            "key.parsed_declaration" : "let strides = self.strides",
            "key.parsed_scope.end" : 509,
            "key.parsed_scope.start" : 509,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluis7stridesL_AA0C5ShapeVvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>.<Type usr=\"s:4main11TensorShapeV7Elementa\">Element<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>.<ref.typealias usr=\"s:4main11TensorShapeV7Elementa\">Element<\/ref.typealias><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 33,
            "key.line" : 511,
            "key.modulename" : "main",
            "key.name" : "count",
            "key.namelength" : 5,
            "key.nameoffset" : 13158,
            "key.offset" : 13154,
            "key.parsed_declaration" : "let count = strides[0] * shape[0]",
            "key.parsed_scope.end" : 511,
            "key.parsed_scope.start" : 511,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluis5countL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let pointer: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pointer<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 84,
            "key.line" : 513,
            "key.modulename" : "main",
            "key.name" : "pointer",
            "key.namelength" : 7,
            "key.nameoffset" : 13240,
            "key.offset" : 13236,
            "key.parsed_declaration" : "let pointer = cTensor.pointee.data.ptr.bindMemory(to: Element.self, capacity: count)",
            "key.parsed_scope.end" : 513,
            "key.parsed_scope.start" : 513,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluis7pointerL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var offset: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>offset<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 14,
            "key.line" : 514,
            "key.modulename" : "main",
            "key.name" : "offset",
            "key.namelength" : 6,
            "key.nameoffset" : 13331,
            "key.offset" : 13327,
            "key.parsed_declaration" : "var offset = 0",
            "key.parsed_scope.end" : 514,
            "key.parsed_scope.start" : 514,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluis6offsetL_Sivp"
          }
        ],
        "key.typename" : "AnyTensorStorage.Type",
        "key.typeusr" : "$s4main16AnyTensorStorageCmD",
        "key.usr" : "s:4main16AnyTensorStorageC"
      },
      {
        "key.annotated_decl" : "<Declaration>public final class AnyTensorStorage<\/Declaration>",
        "key.bodylength" : 3633,
        "key.bodyoffset" : 13514,
        "key.column" : 20,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>AnyTensorStorage<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 3662,
        "key.line" : 438,
        "key.modulename" : "main",
        "key.name" : "AnyTensorStorage",
        "key.namelength" : 16,
        "key.nameoffset" : 13496,
        "key.offset" : 13486,
        "key.parsed_declaration" : "extension AnyTensorStorage",
        "key.parsed_scope.end" : 602,
        "key.parsed_scope.start" : 523,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>@usableFromInline subscript&lt;Element&gt;(ranges: [<Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;], type: <Type usr=\"s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/Type>.Type) -&gt; <Type usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/Type> where <Type usr=\"s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type> { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 13517
              }
            ],
            "key.bodylength" : 3511,
            "key.bodyoffset" : 13634,
            "key.column" : 3,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip7ElementL_xmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>ranges<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>type<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/ref.generic_type_param>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/ref.class><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 3609,
            "key.line" : 525,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:)",
            "key.namelength" : 75,
            "key.nameoffset" : 13537,
            "key.offset" : 13537,
            "key.parsed_declaration" : "subscript<Element: TensorNumeric>(ranges: [Range<Int>], type: Element.Type) -> AnyTensorStorage",
            "key.parsed_scope.end" : 601,
            "key.parsed_scope.start" : 525,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluip\">subscript(_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 13,
                    "key.offset" : 13556
                  }
                ],
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Element<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "TensorNumeric"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 22,
                "key.line" : 525,
                "key.modulename" : "main",
                "key.name" : "Element",
                "key.namelength" : 7,
                "key.nameoffset" : 13547,
                "key.offset" : 13547,
                "key.parsed_declaration" : "subscript<Element: TensorNumeric",
                "key.parsed_scope.end" : 525,
                "key.parsed_scope.start" : 525,
                "key.reusingastcontext" : false,
                "key.typename" : "Element.Type",
                "key.typeusr" : "$sxmD",
                "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip7ElementL_xmfp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> ([Range<Int>], Element.Type) -> AnyTensorStorage",
            "key.typeusr" : "$sy4main16AnyTensorStorageCSaySnySiGG_xmtcAA0C7NumericRzluD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip"
          },
          {
            "key.annotated_decl" : "<Declaration>let cTensorParams: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensorParams<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 40,
            "key.line" : 528,
            "key.modulename" : "main",
            "key.name" : "cTensorParams",
            "key.namelength" : 13,
            "key.nameoffset" : 13701,
            "key.offset" : 13697,
            "key.parsed_declaration" : "let cTensorParams = cTensor.pointee.info",
            "key.parsed_scope.end" : 528,
            "key.parsed_scope.start" : 528,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig01cC6ParamsL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let device: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>device<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 58,
            "key.line" : 529,
            "key.modulename" : "main",
            "key.name" : "device",
            "key.namelength" : 6,
            "key.nameoffset" : 13748,
            "key.offset" : 13744,
            "key.parsed_declaration" : "let device = DeviceKind.from(cTensorParams: cTensorParams)",
            "key.parsed_scope.end" : 529,
            "key.parsed_scope.start" : 529,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig6deviceL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let format: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>format<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 60,
            "key.line" : 530,
            "key.modulename" : "main",
            "key.name" : "format",
            "key.namelength" : 6,
            "key.nameoffset" : 13813,
            "key.offset" : 13809,
            "key.parsed_declaration" : "let format = TensorFormat.from(cTensorParams: cTensorParams)",
            "key.parsed_scope.end" : 530,
            "key.parsed_scope.start" : 530,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig6formatL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>shape<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 22,
            "key.line" : 531,
            "key.modulename" : "main",
            "key.name" : "shape",
            "key.namelength" : 5,
            "key.nameoffset" : 13880,
            "key.offset" : 13876,
            "key.parsed_declaration" : "let shape = self.shape",
            "key.parsed_scope.end" : 531,
            "key.parsed_scope.start" : 531,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig5shapeL_AA0C5ShapeVvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let offset: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>offset<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 41,
            "key.line" : 537,
            "key.modulename" : "main",
            "key.name" : "offset",
            "key.namelength" : 6,
            "key.nameoffset" : 14143,
            "key.offset" : 14139,
            "key.parsed_declaration" : "let offset = ranges.map { $0.lowerBound }",
            "key.parsed_scope.end" : 537,
            "key.parsed_scope.start" : 537,
            "key.reusingastcontext" : false,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig6offsetL_SaySiGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let dimensions: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>dimensions<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 40,
            "key.line" : 538,
            "key.modulename" : "main",
            "key.name" : "dimensions",
            "key.namelength" : 10,
            "key.nameoffset" : 14191,
            "key.offset" : 14187,
            "key.parsed_declaration" : "let dimensions = ranges.map { $0.count }",
            "key.parsed_scope.end" : 538,
            "key.parsed_scope.start" : 538,
            "key.reusingastcontext" : false,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig10dimensionsL_SaySiGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var cOffset: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cOffset<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 35,
            "key.line" : 539,
            "key.modulename" : "main",
            "key.name" : "cOffset",
            "key.namelength" : 7,
            "key.nameoffset" : 14238,
            "key.offset" : 14234,
            "key.parsed_declaration" : "var cOffset = toCDimensions(offset)",
            "key.parsed_scope.end" : 539,
            "key.parsed_scope.start" : 539,
            "key.reusingastcontext" : false,
            "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
            "key.typeusr" : "$ss5Int32V_A11BtD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig7cOffsetL_s5Int32V_A11Itvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>strides<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 26,
            "key.line" : 540,
            "key.modulename" : "main",
            "key.name" : "strides",
            "key.namelength" : 7,
            "key.nameoffset" : 14280,
            "key.offset" : 14276,
            "key.parsed_declaration" : "let strides = self.strides",
            "key.parsed_scope.end" : 540,
            "key.parsed_scope.start" : 540,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig7stridesL_AA0C5ShapeVvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var cStrides: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cStrides<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 27,
            "key.line" : 541,
            "key.modulename" : "main",
            "key.name" : "cStrides",
            "key.namelength" : 8,
            "key.nameoffset" : 14313,
            "key.offset" : 14309,
            "key.parsed_declaration" : "var cStrides = strides.dims",
            "key.parsed_scope.end" : 541,
            "key.parsed_scope.start" : 541,
            "key.reusingastcontext" : false,
            "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
            "key.typeusr" : "$ss5Int32V_A11BtD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig8cStridesL_s5Int32V_A11Itvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let newt: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>newt<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 634,
            "key.line" : 542,
            "key.modulename" : "main",
            "key.name" : "newt",
            "key.namelength" : 4,
            "key.nameoffset" : 14347,
            "key.offset" : 14343,
            "key.parsed_declaration" : "let newt = withUnsafePointer(to: &cOffset) {\n  cOffset -> UnsafeMutablePointer<ccv_nnc_tensor_view_t> in\n  let cOffset = UnsafeRawPointer(cOffset).assumingMemoryBound(to: Int32.self)\n  return withUnsafePointer(to: &cStrides) {\n    cStrides -> UnsafeMutablePointer<ccv_nnc_tensor_view_t> in\n    let cStrides = UnsafeRawPointer(cStrides).assumingMemoryBound(to: Int32.self)\n    return ccv_nnc_tensor_view_new(\n      cTensor,\n      toCTensorParams(\n        device, dataType: Element.dataType, format: format, dimensions: dimensions), cOffset,\n      cStrides)!\n  }\n}",
            "key.parsed_scope.end" : 542,
            "key.parsed_scope.start" : 542,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig4newtL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let cTensorParams: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensorParams<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 40,
            "key.line" : 560,
            "key.modulename" : "main",
            "key.name" : "cTensorParams",
            "key.namelength" : 13,
            "key.nameoffset" : 15138,
            "key.offset" : 15134,
            "key.parsed_declaration" : "let cTensorParams = cTensor.pointee.info",
            "key.parsed_scope.end" : 560,
            "key.parsed_scope.start" : 560,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis01cC6ParamsL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let device: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>device<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 58,
            "key.line" : 561,
            "key.modulename" : "main",
            "key.name" : "device",
            "key.namelength" : 6,
            "key.nameoffset" : 15185,
            "key.offset" : 15181,
            "key.parsed_declaration" : "let device = DeviceKind.from(cTensorParams: cTensorParams)",
            "key.parsed_scope.end" : 561,
            "key.parsed_scope.start" : 561,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis6deviceL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let vFormat: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>vFormat<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 70,
            "key.line" : 563,
            "key.modulename" : "main",
            "key.name" : "vFormat",
            "key.namelength" : 7,
            "key.nameoffset" : 15344,
            "key.offset" : 15340,
            "key.parsed_declaration" : "let vFormat = TensorFormat.from(cTensorParams: v.cTensor.pointee.info)",
            "key.parsed_scope.end" : 563,
            "key.parsed_scope.start" : 563,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis7vFormatL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>shape<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 22,
            "key.line" : 564,
            "key.modulename" : "main",
            "key.name" : "shape",
            "key.namelength" : 5,
            "key.nameoffset" : 15421,
            "key.offset" : 15417,
            "key.parsed_declaration" : "let shape = self.shape",
            "key.parsed_scope.end" : 564,
            "key.parsed_scope.start" : 564,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis5shapeL_AA0C5ShapeVvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let offset: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>offset<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 41,
            "key.line" : 570,
            "key.modulename" : "main",
            "key.name" : "offset",
            "key.namelength" : 6,
            "key.nameoffset" : 15684,
            "key.offset" : 15680,
            "key.parsed_declaration" : "let offset = ranges.map { $0.lowerBound }",
            "key.parsed_scope.end" : 570,
            "key.parsed_scope.start" : 570,
            "key.reusingastcontext" : false,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis6offsetL_SaySiGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let dimensions: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>dimensions<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 40,
            "key.line" : 571,
            "key.modulename" : "main",
            "key.name" : "dimensions",
            "key.namelength" : 10,
            "key.nameoffset" : 15732,
            "key.offset" : 15728,
            "key.parsed_declaration" : "let dimensions = ranges.map { $0.count }",
            "key.parsed_scope.end" : 571,
            "key.parsed_scope.start" : 571,
            "key.reusingastcontext" : false,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis10dimensionsL_SaySiGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var cOffset: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cOffset<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 35,
            "key.line" : 572,
            "key.modulename" : "main",
            "key.name" : "cOffset",
            "key.namelength" : 7,
            "key.nameoffset" : 15779,
            "key.offset" : 15775,
            "key.parsed_declaration" : "var cOffset = toCDimensions(offset)",
            "key.parsed_scope.end" : 572,
            "key.parsed_scope.start" : 572,
            "key.reusingastcontext" : false,
            "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
            "key.typeusr" : "$ss5Int32V_A11BtD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis7cOffsetL_s5Int32V_A11Itvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>strides<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 26,
            "key.line" : 573,
            "key.modulename" : "main",
            "key.name" : "strides",
            "key.namelength" : 7,
            "key.nameoffset" : 15821,
            "key.offset" : 15817,
            "key.parsed_declaration" : "let strides = self.strides",
            "key.parsed_scope.end" : 573,
            "key.parsed_scope.start" : 573,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis7stridesL_AA0C5ShapeVvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var cStrides: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cStrides<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 27,
            "key.line" : 574,
            "key.modulename" : "main",
            "key.name" : "cStrides",
            "key.namelength" : 8,
            "key.nameoffset" : 15854,
            "key.offset" : 15850,
            "key.parsed_declaration" : "var cStrides = strides.dims",
            "key.parsed_scope.end" : 574,
            "key.parsed_scope.start" : 574,
            "key.reusingastcontext" : false,
            "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
            "key.typeusr" : "$ss5Int32V_A11BtD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis8cStridesL_s5Int32V_A11Itvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var newt: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>newt<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 568,
            "key.line" : 575,
            "key.modulename" : "main",
            "key.name" : "newt",
            "key.namelength" : 4,
            "key.nameoffset" : 15888,
            "key.offset" : 15884,
            "key.parsed_declaration" : "var newt = withUnsafePointer(to: &cOffset) { cOffset -> ccv_nnc_tensor_view_t in\n  let cOffset = UnsafeRawPointer(cOffset).assumingMemoryBound(to: Int32.self)\n  return withUnsafePointer(to: &cStrides) { cStrides -> ccv_nnc_tensor_view_t in\n    let cStrides = UnsafeRawPointer(cStrides).assumingMemoryBound(to: Int32.self)\n    return ccv_nnc_tensor_view(\n      cTensor,\n      toCTensorParams(\n        device, dataType: Element.dataType, format: vFormat, dimensions: dimensions), cOffset,\n      cStrides)\n  }\n}",
            "key.parsed_scope.end" : 575,
            "key.parsed_scope.start" : 575,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis4newtL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let inputDim: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>inputDim<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 58,
            "key.line" : 586,
            "key.modulename" : "main",
            "key.name" : "inputDim",
            "key.namelength" : 8,
            "key.nameoffset" : 16463,
            "key.offset" : 16459,
            "key.parsed_declaration" : "let inputDim = fromCDimensions(v.cTensor.pointee.info.dim)",
            "key.parsed_scope.end" : 586,
            "key.parsed_scope.start" : 586,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis8inputDimL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var input: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>input<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 62,
            "key.line" : 590,
            "key.modulename" : "main",
            "key.name" : "input",
            "key.namelength" : 5,
            "key.nameoffset" : 16631,
            "key.offset" : 16627,
            "key.parsed_declaration" : "var input: UnsafeMutablePointer<ccv_nnc_tensor_t>? = v.cTensor",
            "key.parsed_scope.end" : 590,
            "key.parsed_scope.start" : 590,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis5inputL_Xevp"
          }
        ],
        "key.typename" : "AnyTensorStorage.Type",
        "key.typeusr" : "$s4main16AnyTensorStorageCmD",
        "key.usr" : "s:4main16AnyTensorStorageC"
      },
      {
        "key.annotated_decl" : "<Declaration>public final class AnyTensorStorage<\/Declaration>",
        "key.bodylength" : 3413,
        "key.bodyoffset" : 17178,
        "key.column" : 20,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>AnyTensorStorage<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 3442,
        "key.line" : 438,
        "key.modulename" : "main",
        "key.name" : "AnyTensorStorage",
        "key.namelength" : 16,
        "key.nameoffset" : 17160,
        "key.offset" : 17150,
        "key.parsed_declaration" : "extension AnyTensorStorage",
        "key.parsed_scope.end" : 681,
        "key.parsed_scope.start" : 604,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>@usableFromInline subscript&lt;Element&gt;(indices: [<Type usr=\"s:Si\">Int<\/Type>], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;, type: <Type usr=\"s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/Type>.Type) -&gt; <Type usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/Type> where <Type usr=\"s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type> { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 17181
              }
            ],
            "key.bodylength" : 3272,
            "key.bodyoffset" : 17317,
            "key.column" : 3,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluip7ElementL_xmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>indices<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>type<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/ref.generic_type_param>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/ref.class><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 3389,
            "key.line" : 606,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:)",
            "key.namelength" : 88,
            "key.nameoffset" : 17201,
            "key.offset" : 17201,
            "key.parsed_declaration" : "subscript<Element: TensorNumeric>(indices: [Int], range: Range<Int>, type: Element.Type)\n  -> AnyTensorStorage",
            "key.parsed_scope.end" : 680,
            "key.parsed_scope.start" : 606,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip\">subscript(_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
                "key.column" : 13,
                "key.decl_lang" : "source.lang.swift",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 13,
                    "key.offset" : 17220
                  }
                ],
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Element<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "TensorNumeric"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 22,
                "key.line" : 606,
                "key.modulename" : "main",
                "key.name" : "Element",
                "key.namelength" : 7,
                "key.nameoffset" : 17211,
                "key.offset" : 17211,
                "key.parsed_declaration" : "subscript<Element: TensorNumeric",
                "key.parsed_scope.end" : 606,
                "key.parsed_scope.start" : 606,
                "key.reusingastcontext" : false,
                "key.typename" : "Element.Type",
                "key.typeusr" : "$sxmD",
                "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluip7ElementL_xmfp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> ([Int], Range<Int>, Element.Type) -> AnyTensorStorage",
            "key.typeusr" : "$sy4main16AnyTensorStorageCSaySiG_SnySiGxmtcAA0C7NumericRzluD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluip"
          },
          {
            "key.annotated_decl" : "<Declaration>let cTensorParams: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensorParams<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 40,
            "key.line" : 611,
            "key.modulename" : "main",
            "key.name" : "cTensorParams",
            "key.namelength" : 13,
            "key.nameoffset" : 17384,
            "key.offset" : 17380,
            "key.parsed_declaration" : "let cTensorParams = cTensor.pointee.info",
            "key.parsed_scope.end" : 611,
            "key.parsed_scope.start" : 611,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluig01cC6ParamsL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let device: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>device<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 58,
            "key.line" : 612,
            "key.modulename" : "main",
            "key.name" : "device",
            "key.namelength" : 6,
            "key.nameoffset" : 17431,
            "key.offset" : 17427,
            "key.parsed_declaration" : "let device = DeviceKind.from(cTensorParams: cTensorParams)",
            "key.parsed_scope.end" : 612,
            "key.parsed_scope.start" : 612,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluig6deviceL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let format: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>format<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 60,
            "key.line" : 613,
            "key.modulename" : "main",
            "key.name" : "format",
            "key.namelength" : 6,
            "key.nameoffset" : 17496,
            "key.offset" : 17492,
            "key.parsed_declaration" : "let format = TensorFormat.from(cTensorParams: cTensorParams)",
            "key.parsed_scope.end" : 613,
            "key.parsed_scope.start" : 613,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluig6formatL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>shape<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 22,
            "key.line" : 614,
            "key.modulename" : "main",
            "key.name" : "shape",
            "key.namelength" : 5,
            "key.nameoffset" : 17563,
            "key.offset" : 17559,
            "key.parsed_declaration" : "let shape = self.shape",
            "key.parsed_scope.end" : 614,
            "key.parsed_scope.start" : 614,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluig5shapeL_AA0C5ShapeVvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let dimensions: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>dimensions<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 74,
            "key.line" : 616,
            "key.modulename" : "main",
            "key.name" : "dimensions",
            "key.namelength" : 10,
            "key.nameoffset" : 17639,
            "key.offset" : 17635,
            "key.parsed_declaration" : "let dimensions = Array(repeating: 1, count: indices.count) + [range.count]",
            "key.parsed_scope.end" : 616,
            "key.parsed_scope.start" : 616,
            "key.reusingastcontext" : false,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluig10dimensionsL_ADvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>strides<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 26,
            "key.line" : 617,
            "key.modulename" : "main",
            "key.name" : "strides",
            "key.namelength" : 7,
            "key.nameoffset" : 17720,
            "key.offset" : 17716,
            "key.parsed_declaration" : "let strides = self.strides",
            "key.parsed_scope.end" : 617,
            "key.parsed_scope.start" : 617,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluig7stridesL_AA0C5ShapeVvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>.<Type usr=\"s:4main11TensorShapeV7Elementa\">Element<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>.<ref.typealias usr=\"s:4main11TensorShapeV7Elementa\">Element<\/ref.typealias><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 33,
            "key.line" : 618,
            "key.modulename" : "main",
            "key.name" : "count",
            "key.namelength" : 5,
            "key.nameoffset" : 17753,
            "key.offset" : 17749,
            "key.parsed_declaration" : "let count = strides[0] * shape[0]",
            "key.parsed_scope.end" : 618,
            "key.parsed_scope.start" : 618,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluig5countL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let pointer: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pointer<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 84,
            "key.line" : 619,
            "key.modulename" : "main",
            "key.name" : "pointer",
            "key.namelength" : 7,
            "key.nameoffset" : 17793,
            "key.offset" : 17789,
            "key.parsed_declaration" : "let pointer = cTensor.pointee.data.ptr.bindMemory(to: Element.self, capacity: count)",
            "key.parsed_scope.end" : 619,
            "key.parsed_scope.start" : 619,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluig7pointerL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var offset: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>offset<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 14,
            "key.line" : 622,
            "key.modulename" : "main",
            "key.name" : "offset",
            "key.namelength" : 6,
            "key.nameoffset" : 18042,
            "key.offset" : 18038,
            "key.parsed_declaration" : "var offset = 0",
            "key.parsed_scope.end" : 622,
            "key.parsed_scope.start" : 622,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluig6offsetL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let newt: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>newt<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 169,
            "key.line" : 629,
            "key.modulename" : "main",
            "key.name" : "newt",
            "key.namelength" : 4,
            "key.nameoffset" : 18280,
            "key.offset" : 18276,
            "key.parsed_declaration" : "let newt = ccv_nnc_tensor_new(\n  pointer + offset,\n  toCTensorParams(device, dataType: Element.dataType, format: format, dimensions: dimensions),\n  0)!",
            "key.parsed_scope.end" : 629,
            "key.parsed_scope.start" : 629,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluig4newtL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let cTensorParams: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensorParams<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 40,
            "key.line" : 636,
            "key.modulename" : "main",
            "key.name" : "cTensorParams",
            "key.namelength" : 13,
            "key.nameoffset" : 18527,
            "key.offset" : 18523,
            "key.parsed_declaration" : "let cTensorParams = cTensor.pointee.info",
            "key.parsed_scope.end" : 636,
            "key.parsed_scope.start" : 636,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluis01cC6ParamsL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let device: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>device<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 58,
            "key.line" : 637,
            "key.modulename" : "main",
            "key.name" : "device",
            "key.namelength" : 6,
            "key.nameoffset" : 18574,
            "key.offset" : 18570,
            "key.parsed_declaration" : "let device = DeviceKind.from(cTensorParams: cTensorParams)",
            "key.parsed_scope.end" : 637,
            "key.parsed_scope.start" : 637,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluis6deviceL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let vFormat: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>vFormat<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 70,
            "key.line" : 639,
            "key.modulename" : "main",
            "key.name" : "vFormat",
            "key.namelength" : 7,
            "key.nameoffset" : 18733,
            "key.offset" : 18729,
            "key.parsed_declaration" : "let vFormat = TensorFormat.from(cTensorParams: v.cTensor.pointee.info)",
            "key.parsed_scope.end" : 639,
            "key.parsed_scope.start" : 639,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluis7vFormatL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>shape<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 22,
            "key.line" : 641,
            "key.modulename" : "main",
            "key.name" : "shape",
            "key.namelength" : 5,
            "key.nameoffset" : 18889,
            "key.offset" : 18885,
            "key.parsed_declaration" : "let shape = self.shape",
            "key.parsed_scope.end" : 641,
            "key.parsed_scope.start" : 641,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluis5shapeL_AA0C5ShapeVvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>strides<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 26,
            "key.line" : 643,
            "key.modulename" : "main",
            "key.name" : "strides",
            "key.namelength" : 7,
            "key.nameoffset" : 18965,
            "key.offset" : 18961,
            "key.parsed_declaration" : "let strides = self.strides",
            "key.parsed_scope.end" : 643,
            "key.parsed_scope.start" : 643,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluis7stridesL_AA0C5ShapeVvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>.<Type usr=\"s:4main11TensorShapeV7Elementa\">Element<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>.<ref.typealias usr=\"s:4main11TensorShapeV7Elementa\">Element<\/ref.typealias><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 33,
            "key.line" : 644,
            "key.modulename" : "main",
            "key.name" : "count",
            "key.namelength" : 5,
            "key.nameoffset" : 18998,
            "key.offset" : 18994,
            "key.parsed_declaration" : "let count = strides[0] * shape[0]",
            "key.parsed_scope.end" : 644,
            "key.parsed_scope.start" : 644,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluis5countL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let pointer: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pointer<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 84,
            "key.line" : 645,
            "key.modulename" : "main",
            "key.name" : "pointer",
            "key.namelength" : 7,
            "key.nameoffset" : 19038,
            "key.offset" : 19034,
            "key.parsed_declaration" : "let pointer = cTensor.pointee.data.ptr.bindMemory(to: Element.self, capacity: count)",
            "key.parsed_scope.end" : 645,
            "key.parsed_scope.start" : 645,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluis7pointerL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let inputDim: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>inputDim<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 60,
            "key.line" : 648,
            "key.modulename" : "main",
            "key.name" : "inputDim",
            "key.namelength" : 8,
            "key.nameoffset" : 19287,
            "key.offset" : 19283,
            "key.parsed_declaration" : "let inputDim = TensorShape(dims: v.cTensor.pointee.info.dim)",
            "key.parsed_scope.end" : 648,
            "key.parsed_scope.start" : 648,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluis8inputDimL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var offset: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>offset<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 14,
            "key.line" : 653,
            "key.modulename" : "main",
            "key.name" : "offset",
            "key.namelength" : 6,
            "key.nameoffset" : 19482,
            "key.offset" : 19478,
            "key.parsed_declaration" : "var offset = 0",
            "key.parsed_scope.end" : 653,
            "key.parsed_scope.start" : 653,
            "key.reusingastcontext" : false,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluis6offsetL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>var input: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>input<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 62,
            "key.line" : 666,
            "key.modulename" : "main",
            "key.name" : "input",
            "key.namelength" : 5,
            "key.nameoffset" : 20000,
            "key.offset" : 19996,
            "key.parsed_declaration" : "var input: UnsafeMutablePointer<ccv_nnc_tensor_t>? = v.cTensor",
            "key.parsed_scope.end" : 666,
            "key.parsed_scope.start" : 666,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluis5inputL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var newt: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>newt<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 158,
            "key.line" : 667,
            "key.modulename" : "main",
            "key.name" : "newt",
            "key.namelength" : 4,
            "key.nameoffset" : 20069,
            "key.offset" : 20065,
            "key.parsed_declaration" : "var newt = ccv_nnc_tensor(\n  pointer + offset,\n  toCTensorParams(device, dataType: Element.dataType, format: vFormat, shape: inputDim),\n  0)",
            "key.parsed_scope.end" : 667,
            "key.parsed_scope.start" : 667,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySiG_SnySiGxmtcAA0C7NumericRzluis4newtL_Xevp"
          }
        ],
        "key.typename" : "AnyTensorStorage.Type",
        "key.typeusr" : "$s4main16AnyTensorStorageCmD",
        "key.usr" : "s:4main16AnyTensorStorageC"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public protocol AnyTensor<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 20620
          }
        ],
        "key.bodylength" : 127,
        "key.bodyoffset" : 20647,
        "key.column" : 17,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 17,
        "key.doc.comment" : "A type-erased tensor.",
        "key.doc.declaration" : "public protocol AnyTensor",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"684\" column=\"17\"><Name>AnyTensor<\/Name><USR>s:4main9AnyTensorP<\/USR><Declaration>public protocol AnyTensor<\/Declaration><CommentParts><Abstract><Para>A type-erased tensor.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 684,
        "key.doc.name" : "AnyTensor",
        "key.doc.type" : "Class",
        "key.doclength" : 26,
        "key.docoffset" : 20594,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>AnyTensor<\/decl.name><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.protocol",
        "key.length" : 148,
        "key.line" : 684,
        "key.modulename" : "main",
        "key.name" : "AnyTensor",
        "key.namelength" : 9,
        "key.nameoffset" : 20636,
        "key.offset" : 20627,
        "key.parsed_declaration" : "public protocol AnyTensor",
        "key.parsed_scope.end" : 688,
        "key.parsed_scope.start" : 684,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var storage: <Type usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 20681,
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>storage<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/ref.class><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 37,
            "key.line" : 685,
            "key.modulename" : "main",
            "key.name" : "storage",
            "key.namelength" : 7,
            "key.nameoffset" : 20654,
            "key.offset" : 20650,
            "key.parsed_declaration" : "var storage: AnyTensorStorage",
            "key.parsed_scope.end" : 685,
            "key.parsed_scope.start" : 685,
            "key.reusingastcontext" : false,
            "key.typename" : "AnyTensorStorage",
            "key.typeusr" : "$s4main16AnyTensorStorageCD",
            "key.usr" : "s:4main9AnyTensorP7storageAA0bC7StorageCvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var cTensor: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt; { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 20743,
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cTensor<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 59,
            "key.line" : 686,
            "key.modulename" : "main",
            "key.name" : "cTensor",
            "key.namelength" : 7,
            "key.nameoffset" : 20694,
            "key.offset" : 20690,
            "key.parsed_declaration" : "var cTensor: UnsafeMutablePointer<ccv_nnc_tensor_t>",
            "key.parsed_scope.end" : 686,
            "key.parsed_scope.start" : 686,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main9AnyTensorP01cC0Xevp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>init(from: <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type>)<\/Declaration>",
            "key.column" : 3,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>from<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 21,
            "key.line" : 687,
            "key.modulename" : "main",
            "key.name" : "init(from:)",
            "key.namelength" : 21,
            "key.nameoffset" : 20752,
            "key.offset" : 20752,
            "key.parsed_declaration" : "init(from: AnyTensor)",
            "key.parsed_scope.end" : 687,
            "key.parsed_scope.start" : 687,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : AnyTensor> (Self.Type) -> (any AnyTensor) -> Self",
            "key.typeusr" : "$s4fromx4main9AnyTensor_p_tcD",
            "key.usr" : "s:4main9AnyTensorP4fromxAaB_p_tcfc"
          }
        ],
        "key.typename" : "AnyTensor.Type",
        "key.typeusr" : "$s4main9AnyTensor_pmD",
        "key.usr" : "s:4main9AnyTensorP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol AnyTensor<\/Declaration>",
        "key.bodylength" : 1362,
        "key.bodyoffset" : 20798,
        "key.column" : 17,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol AnyTensor",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"684\" column=\"17\"><Name>AnyTensor<\/Name><USR>s:4main9AnyTensorP<\/USR><Declaration>public protocol AnyTensor<\/Declaration><CommentParts><Abstract><Para>A type-erased tensor.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 684,
        "key.doc.name" : "AnyTensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>AnyTensor<\/decl.name><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1384,
        "key.line" : 684,
        "key.modulename" : "main",
        "key.name" : "AnyTensor",
        "key.namelength" : 9,
        "key.nameoffset" : 20787,
        "key.offset" : 20777,
        "key.parsed_declaration" : "extension AnyTensor",
        "key.parsed_scope.end" : 744,
        "key.parsed_scope.start" : 690,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 20814
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 20801
              }
            ],
            "key.bodylength" : 58,
            "key.bodyoffset" : 20845,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 83,
            "key.line" : 692,
            "key.modulename" : "main",
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 20825,
            "key.offset" : 20821,
            "key.parsed_declaration" : "public var dataType: DataType",
            "key.parsed_scope.end" : 694,
            "key.parsed_scope.start" : 692,
            "key.reusingastcontext" : false,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:4main9AnyTensorPAAE8dataTypeAA04DataE0Ovp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public var kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 20921
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 20908
              }
            ],
            "key.bodylength" : 60,
            "key.bodyoffset" : 20950,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>kind<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 83,
            "key.line" : 697,
            "key.modulename" : "main",
            "key.name" : "kind",
            "key.namelength" : 4,
            "key.nameoffset" : 20932,
            "key.offset" : 20928,
            "key.parsed_declaration" : "public var kind: DeviceKind",
            "key.parsed_scope.end" : 699,
            "key.parsed_scope.start" : 697,
            "key.reusingastcontext" : false,
            "key.typename" : "DeviceKind",
            "key.typeusr" : "$s4main10DeviceKindOD",
            "key.usr" : "s:4main9AnyTensorPAAE4kindAA10DeviceKindOvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public var format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 21028
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 21015
              }
            ],
            "key.bodylength" : 62,
            "key.bodyoffset" : 21061,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>format<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 89,
            "key.line" : 702,
            "key.modulename" : "main",
            "key.name" : "format",
            "key.namelength" : 6,
            "key.nameoffset" : 21039,
            "key.offset" : 21035,
            "key.parsed_declaration" : "public var format: TensorFormat",
            "key.parsed_scope.end" : 704,
            "key.parsed_scope.start" : 702,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorFormat",
            "key.typeusr" : "$s4main12TensorFormatOD",
            "key.usr" : "s:4main9AnyTensorPAAE6formatAA0C6FormatOvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public var shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 21141
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 21128
              }
            ],
            "key.bodylength" : 51,
            "key.bodyoffset" : 21172,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>shape<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 76,
            "key.line" : 707,
            "key.modulename" : "main",
            "key.name" : "shape",
            "key.namelength" : 5,
            "key.nameoffset" : 21152,
            "key.offset" : 21148,
            "key.parsed_declaration" : "public var shape: TensorShape",
            "key.parsed_scope.end" : 709,
            "key.parsed_scope.start" : 707,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main9AnyTensorPAAE5shapeAA0C5ShapeVvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public var isTensorView: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 21241
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 21228
              }
            ],
            "key.bodylength" : 99,
            "key.bodyoffset" : 21272,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isTensorView<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 124,
            "key.line" : 712,
            "key.modulename" : "main",
            "key.name" : "isTensorView",
            "key.namelength" : 12,
            "key.nameoffset" : 21252,
            "key.offset" : 21248,
            "key.parsed_declaration" : "public var isTensorView: Bool",
            "key.parsed_scope.end" : 715,
            "key.parsed_scope.start" : 712,
            "key.reusingastcontext" : false,
            "key.typename" : "Bool",
            "key.typeusr" : "$sSbD",
            "key.usr" : "s:4main9AnyTensorPAAE02isC4ViewSbvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let type: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>type<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 36,
            "key.line" : 713,
            "key.modulename" : "main",
            "key.name" : "type",
            "key.namelength" : 4,
            "key.nameoffset" : 21281,
            "key.offset" : 21277,
            "key.parsed_declaration" : "let type = Int(cTensor.pointee.type)",
            "key.parsed_scope.end" : 713,
            "key.parsed_scope.start" : 713,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4type2ofq_x_tr0_lF\">type(of:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main9AnyTensorPAAE02isC4ViewSbvg4typeL_Xevp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public var isContiguous: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 21389
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 21376
              }
            ],
            "key.bodylength" : 276,
            "key.bodyoffset" : 21420,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isContiguous<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 301,
            "key.line" : 718,
            "key.modulename" : "main",
            "key.name" : "isContiguous",
            "key.namelength" : 12,
            "key.nameoffset" : 21400,
            "key.offset" : 21396,
            "key.parsed_declaration" : "public var isContiguous: Bool",
            "key.parsed_scope.end" : 725,
            "key.parsed_scope.start" : 718,
            "key.reusingastcontext" : false,
            "key.typename" : "Bool",
            "key.typeusr" : "$sSbD",
            "key.usr" : "s:4main9AnyTensorPAAE12isContiguousSbvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let type: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>type<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 36,
            "key.line" : 719,
            "key.modulename" : "main",
            "key.name" : "type",
            "key.namelength" : 4,
            "key.nameoffset" : 21429,
            "key.offset" : 21425,
            "key.parsed_declaration" : "let type = Int(cTensor.pointee.type)",
            "key.parsed_scope.end" : 719,
            "key.parsed_scope.start" : 719,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4type2ofq_x_tr0_lF\">type(of:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main9AnyTensorPAAE12isContiguousSbvg4typeL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let cTensorView: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensorView<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 95,
            "key.line" : 723,
            "key.modulename" : "main",
            "key.name" : "cTensorView",
            "key.namelength" : 11,
            "key.nameoffset" : 21555,
            "key.offset" : 21551,
            "key.parsed_declaration" : "let cTensorView = UnsafeRawPointer(cTensor).assumingMemoryBound(to: ccv_nnc_tensor_view_t.self)",
            "key.parsed_scope.end" : 723,
            "key.parsed_scope.start" : 723,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main9AnyTensorPAAE12isContiguousSbvg01cC4ViewL_Xevp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public var strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 21714
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 21701
              }
            ],
            "key.bodylength" : 411,
            "key.bodyoffset" : 21747,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>strides<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 438,
            "key.line" : 728,
            "key.modulename" : "main",
            "key.name" : "strides",
            "key.namelength" : 7,
            "key.nameoffset" : 21725,
            "key.offset" : 21721,
            "key.parsed_declaration" : "public var strides: TensorShape",
            "key.parsed_scope.end" : 743,
            "key.parsed_scope.start" : 728,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main9AnyTensorPAAE7stridesAA0C5ShapeVvp"
          }
        ],
        "key.typename" : "AnyTensor.Type",
        "key.typeusr" : "$s4main9AnyTensor_pmD",
        "key.usr" : "s:4main9AnyTensorP"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 577,
        "key.bodyoffset" : 22181,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 596,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 22173,
        "key.offset" : 22163,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 759,
        "key.parsed_scope.start" : 746,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public func withUnsafeBytes&lt;R&gt;(_ body: (<Type usr=\"s:SW\">UnsafeRawBufferPointer<\/Type>) throws -&gt; <Type usr=\"s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF1RL_qd__mfp\">R<\/Type>) rethrows -&gt; <Type usr=\"s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF1RL_qd__mfp\">R<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.rethrows",
                "key.length" : 8,
                "key.offset" : 22274
              },
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 22197
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 22184
              }
            ],
            "key.bodylength" : 160,
            "key.bodyoffset" : 22289,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>withUnsafeBytes<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF1RL_qd__mfp\"><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SW\">UnsafeRawBufferPointer<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF1RL_qd__mfp\">R<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF1RL_qd__mfp\">R<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 246,
            "key.line" : 748,
            "key.modulename" : "main",
            "key.name" : "withUnsafeBytes(_:)",
            "key.namelength" : 64,
            "key.nameoffset" : 22209,
            "key.offset" : 22204,
            "key.parsed_declaration" : "public func withUnsafeBytes<R>(_ body: (UnsafeRawBufferPointer) throws -> R) rethrows -> R",
            "key.parsed_scope.end" : 751,
            "key.parsed_scope.start" : 748,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>R<\/Declaration>",
                "key.column" : 31,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>",
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 1,
                "key.line" : 748,
                "key.modulename" : "main",
                "key.name" : "R",
                "key.namelength" : 1,
                "key.nameoffset" : 22225,
                "key.offset" : 22225,
                "key.parsed_declaration" : "public func withUnsafeBytes<R",
                "key.parsed_scope.end" : 748,
                "key.parsed_scope.start" : 748,
                "key.reusingastcontext" : false,
                "key.typename" : "R.Type",
                "key.typeusr" : "$sqd__mD",
                "key.usr" : "s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF1RL_qd__mfp"
              },
              {
                "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 62,
                "key.line" : 749,
                "key.modulename" : "main",
                "key.name" : "count",
                "key.namelength" : 5,
                "key.nameoffset" : 22298,
                "key.offset" : 22294,
                "key.parsed_declaration" : "let count = strides[0] * shape[0] * MemoryLayout<Element>.size",
                "key.parsed_scope.end" : 749,
                "key.parsed_scope.start" : 749,
                "key.reusingastcontext" : false,
                "key.typename" : "Int",
                "key.typeusr" : "$sSiD",
                "key.usr" : "s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF5countL_Sivp"
              }
            ],
            "key.typename" : "<Element, R where Element : TensorNumeric> (Tensor<Element>) -> ((UnsafeRawBufferPointer) throws -> R) throws -> R",
            "key.typeusr" : "$syqd__qd__SWKXEKcluD",
            "key.usr" : "s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public mutating func withUnsafeMutableBytes&lt;R&gt;(_ body: (<Type usr=\"s:Sw\">UnsafeMutableRawBufferPointer<\/Type>) throws -&gt; <Type usr=\"s:4main6TensorV22withUnsafeMutableBytesyqd__qd__SwKXEKlF1RL_qd__mfp\">R<\/Type>) rethrows -&gt; <Type usr=\"s:4main6TensorV22withUnsafeMutableBytesyqd__qd__SwKXEKlF1RL_qd__mfp\">R<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.rethrows",
                "key.length" : 8,
                "key.offset" : 22574
              },
              {
                "key.attribute" : "source.decl.attribute.mutating",
                "key.length" : 8,
                "key.offset" : 22473
              },
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 22466
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 22453
              }
            ],
            "key.bodylength" : 167,
            "key.bodyoffset" : 22589,
            "key.column" : 24,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>mutating<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>withUnsafeMutableBytes<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV22withUnsafeMutableBytesyqd__qd__SwKXEKlF1RL_qd__mfp\"><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sw\">UnsafeMutableRawBufferPointer<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main6TensorV22withUnsafeMutableBytesyqd__qd__SwKXEKlF1RL_qd__mfp\">R<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main6TensorV22withUnsafeMutableBytesyqd__qd__SwKXEKlF1RL_qd__mfp\">R<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 275,
            "key.line" : 753,
            "key.modulename" : "main",
            "key.name" : "withUnsafeMutableBytes(_:)",
            "key.namelength" : 86,
            "key.nameoffset" : 22487,
            "key.offset" : 22482,
            "key.parsed_declaration" : "public mutating func withUnsafeMutableBytes<R>(\n  _ body: (UnsafeMutableRawBufferPointer) throws -> R\n) rethrows -> R",
            "key.parsed_scope.end" : 758,
            "key.parsed_scope.start" : 753,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>R<\/Declaration>",
                "key.column" : 47,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>",
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 1,
                "key.line" : 753,
                "key.modulename" : "main",
                "key.name" : "R",
                "key.namelength" : 1,
                "key.nameoffset" : 22510,
                "key.offset" : 22510,
                "key.parsed_declaration" : "public mutating func withUnsafeMutableBytes<R",
                "key.parsed_scope.end" : 753,
                "key.parsed_scope.start" : 753,
                "key.reusingastcontext" : false,
                "key.typename" : "R.Type",
                "key.typeusr" : "$sqd__mD",
                "key.usr" : "s:4main6TensorV22withUnsafeMutableBytesyqd__qd__SwKXEKlF1RL_qd__mfp"
              },
              {
                "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 62,
                "key.line" : 756,
                "key.modulename" : "main",
                "key.name" : "count",
                "key.namelength" : 5,
                "key.nameoffset" : 22598,
                "key.offset" : 22594,
                "key.parsed_declaration" : "let count = strides[0] * shape[0] * MemoryLayout<Element>.size",
                "key.parsed_scope.end" : 756,
                "key.parsed_scope.start" : 756,
                "key.reusingastcontext" : false,
                "key.typename" : "Int",
                "key.typeusr" : "$sSiD",
                "key.usr" : "s:4main6TensorV22withUnsafeMutableBytesyqd__qd__SwKXEKlF5countL_Sivp"
              }
            ],
            "key.typename" : "<Element, R where Element : TensorNumeric> (inout Tensor<Element>) -> ((UnsafeMutableRawBufferPointer) throws -> R) throws -> R",
            "key.typeusr" : "$syqd__qd__SwKXEKcluD",
            "key.usr" : "s:4main6TensorV22withUnsafeMutableBytesyqd__qd__SwKXEKlF"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 22784
          }
        ],
        "key.bodylength" : 5833,
        "key.bodyoffset" : 22841,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.comment" : "Basic tensor type.",
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.doclength" : 23,
        "key.docoffset" : 22761,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 9,
            "key.offset" : 22830
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "AnyTensor"
          }
        ],
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 5884,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 22798,
        "key.offset" : 22791,
        "key.parsed_declaration" : "public struct Tensor<Element: TensorNumeric>: AnyTensor",
        "key.parsed_scope.end" : 949,
        "key.parsed_scope.start" : 762,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
            "key.column" : 22,
            "key.decl_lang" : "source.lang.swift",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 13,
                "key.offset" : 22814
              }
            ],
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Element<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "TensorNumeric"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 22,
            "key.line" : 762,
            "key.modulename" : "main",
            "key.name" : "Element",
            "key.namelength" : 7,
            "key.nameoffset" : 22805,
            "key.offset" : 22805,
            "key.parsed_declaration" : "public struct Tensor<Element: TensorNumeric",
            "key.parsed_scope.end" : 762,
            "key.parsed_scope.start" : 762,
            "key.reusingastcontext" : false,
            "key.typename" : "Element.Type",
            "key.typeusr" : "$sxmD",
            "key.usr" : "s:4main6TensorV7Elementxmfp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var storage: <Type usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 22845
              }
            ],
            "key.bodylength" : 10,
            "key.bodyoffset" : 22883,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>storage<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/ref.class><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 42,
            "key.line" : 764,
            "key.modulename" : "main",
            "key.name" : "storage",
            "key.namelength" : 7,
            "key.nameoffset" : 22856,
            "key.offset" : 22852,
            "key.parsed_declaration" : "public var storage: AnyTensorStorage",
            "key.parsed_scope.end" : 764,
            "key.parsed_scope.start" : 764,
            "key.reusingastcontext" : false,
            "key.typename" : "AnyTensorStorage",
            "key.typeusr" : "$s4main16AnyTensorStorageCD",
            "key.usr" : "s:4main6TensorV7storageAA03AnyB7StorageCvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var cTensor: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt; { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 22897
              }
            ],
            "key.bodylength" : 18,
            "key.bodyoffset" : 22957,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cTensor<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 72,
            "key.line" : 765,
            "key.modulename" : "main",
            "key.name" : "cTensor",
            "key.namelength" : 7,
            "key.nameoffset" : 22908,
            "key.offset" : 22904,
            "key.parsed_declaration" : "public var cTensor: UnsafeMutablePointer<ccv_nnc_tensor_t>",
            "key.parsed_scope.end" : 765,
            "key.parsed_scope.start" : 765,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main6TensorV01cB0Xevp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline var _storage: <Type usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 22980
              }
            ],
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_storage<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/ref.class><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 30,
            "key.line" : 768,
            "key.modulename" : "main",
            "key.name" : "_storage",
            "key.namelength" : 8,
            "key.nameoffset" : 23004,
            "key.offset" : 23000,
            "key.parsed_declaration" : "var _storage: AnyTensorStorage",
            "key.parsed_scope.end" : 768,
            "key.parsed_scope.start" : 768,
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
            "key.typename" : "AnyTensorStorage",
            "key.typeusr" : "$s4main16AnyTensorStorageCD",
            "key.usr" : "s:4main6TensorV8_storageAA03AnyB7StorageCvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private init(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type>, format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 23034
              }
            ],
            "key.bodylength" : 182,
            "key.bodyoffset" : 23130,
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dataType<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>shape<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 271,
            "key.line" : 770,
            "key.modulename" : "main",
            "key.name" : "init(_:dataType:format:shape:)",
            "key.namelength" : 86,
            "key.nameoffset" : 23042,
            "key.offset" : 23042,
            "key.parsed_declaration" : "private init(_ kind: DeviceKind, dataType: DataType, format: TensorFormat, shape: TensorShape)",
            "key.parsed_scope.end" : 776,
            "key.parsed_scope.start" : 770,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_: DeviceKind, _: DataType, _: TensorShapeFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc\">init(_:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc\">init(_:kind:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: DeviceKind, _: TensorShapeFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc\">init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSayxGcfc\">init(_: [Element])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc\">init(data:using:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let cTensor: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensor<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 133,
                "key.line" : 771,
                "key.modulename" : "main",
                "key.name" : "cTensor",
                "key.namelength" : 7,
                "key.nameoffset" : 23139,
                "key.offset" : 23135,
                "key.parsed_declaration" : "let cTensor = ccv_nnc_tensor_new(\n  nil,\n  toCTensorParams(kind, dataType: dataType, format: format, shape: shape),\n  0)!",
                "key.parsed_scope.end" : 771,
                "key.parsed_scope.start" : 771,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc01cB0L_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (DeviceKind, DataType, TensorFormat, TensorShape) -> Tensor<Element>",
            "key.typeusr" : "$s_8dataType6format5shape4main6TensorVyxGAD10DeviceKindO_AD04DataB0OAD0F6FormatOAD0F5ShapeVtcD",
            "key.usr" : "s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private init(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, _ dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type>, _ dimensionFormat: <Type usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 23317
              }
            ],
            "key.bodylength" : 118,
            "key.bodyoffset" : 23411,
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dataType<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 205,
            "key.line" : 778,
            "key.modulename" : "main",
            "key.name" : "init(_:_:_:)",
            "key.namelength" : 84,
            "key.nameoffset" : 23325,
            "key.offset" : 23325,
            "key.parsed_declaration" : "private init(_ kind: DeviceKind, _ dataType: DataType, _ dimensionFormat: TensorShapeFormat)",
            "key.parsed_scope.end" : 782,
            "key.parsed_scope.start" : 778,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc\">init(_:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc\">init(_:kind:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: DeviceKind, _: TensorShapeFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc\">init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSayxGcfc\">init(_: [Element])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc\">init(data:using:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (DeviceKind, DataType, TensorShapeFormat) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtcD",
            "key.usr" : "s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline init(_ tensor: <Type usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 23534
              }
            ],
            "key.bodylength" : 25,
            "key.bodyoffset" : 23588,
            "key.column" : 3,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tensor<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 60,
            "key.line" : 785,
            "key.modulename" : "main",
            "key.name" : "init(_:)",
            "key.namelength" : 32,
            "key.nameoffset" : 23554,
            "key.offset" : 23554,
            "key.parsed_declaration" : "init(_ tensor: AnyTensorStorage)",
            "key.parsed_scope.end" : 787,
            "key.parsed_scope.start" : 785,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_: DeviceKind, _: DataType, _: TensorShapeFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc\">init(_:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc\">init(_:kind:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: DeviceKind, _: TensorShapeFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc\">init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSayxGcfc\">init(_: [Element])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc\">init(data:using:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (AnyTensorStorage) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGAA03AnyB7StorageCcD",
            "key.usr" : "s:4main6TensorVyACyxGAA03AnyB7StorageCcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ tensor: <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 23736
              }
            ],
            "key.bodylength" : 87,
            "key.bodyoffset" : 23770,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 10,
            "key.doc.comment" : " Create a typed tensor from a type-erased tensor.\n\n - Parameter tensor: A type-erased tensor.",
            "key.doc.declaration" : "public init(_ tensor: AnyTensor)",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"794\" column=\"10\"><Name>init(_:)<\/Name><USR>s:4main6TensorVyACyxGAA03AnyB0_pcfc<\/USR><Declaration>public init(_ tensor: AnyTensor)<\/Declaration><CommentParts><Abstract><Para>Create a typed tensor from a type-erased tensor.<\/Para><\/Abstract><Parameters><Parameter><Name>tensor<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A type-erased tensor.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
            "key.doc.line" : 794,
            "key.doc.name" : "init(_:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "A type-erased tensor."
                  }
                ],
                "name" : "tensor"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 115,
            "key.docoffset" : 23618,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tensor<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 115,
            "key.line" : 794,
            "key.modulename" : "main",
            "key.name" : "init(_:)",
            "key.namelength" : 25,
            "key.nameoffset" : 23743,
            "key.offset" : 23743,
            "key.parsed_declaration" : "public init(_ tensor: AnyTensor)",
            "key.parsed_scope.end" : 797,
            "key.parsed_scope.start" : 794,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_: DeviceKind, _: DataType, _: TensorShapeFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc\">init(_:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc\">init(_:kind:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: DeviceKind, _: TensorShapeFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc\">init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSayxGcfc\">init(_: [Element])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc\">init(data:using:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (any AnyTensor) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGAA03AnyB0_pcD",
            "key.usr" : "s:4main6TensorVyACyxGAA03AnyB0_pcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(from tensor: <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 24060
              }
            ],
            "key.bodylength" : 705,
            "key.bodyoffset" : 24097,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 10,
            "key.doc.comment" : "Convert from a different type tensor to this tensor. If the given tensor is not contiguous,\nthis method will make it contiguous.\n- Parameter tensor: A type-erased tensor.",
            "key.doc.declaration" : "public init(from tensor: AnyTensor)",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"804\" column=\"10\"><Name>init(from:)<\/Name><USR>s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc<\/USR><Declaration>public init(from tensor: AnyTensor)<\/Declaration><CommentParts><Abstract><Para>Convert from a different type tensor to this tensor. If the given tensor is not contiguous, this method will make it contiguous.<\/Para><\/Abstract><Parameters><Parameter><Name>tensor<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A type-erased tensor.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
            "key.doc.line" : 804,
            "key.doc.name" : "init(from:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "A type-erased tensor."
                  }
                ],
                "name" : "tensor"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 195,
            "key.docoffset" : 23862,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>from<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tensor<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 736,
            "key.line" : 804,
            "key.modulename" : "main",
            "key.name" : "init(from:)",
            "key.namelength" : 28,
            "key.nameoffset" : 24067,
            "key.offset" : 24067,
            "key.parsed_declaration" : "public init(from tensor: AnyTensor)",
            "key.parsed_scope.end" : 825,
            "key.parsed_scope.start" : 804,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_: DeviceKind, _: DataType, _: TensorShapeFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc\">init(_:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc\">init(_:kind:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: DeviceKind, _: TensorShapeFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc\">init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSayxGcfc\">init(_: [Element])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc\">init(data:using:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (any AnyTensor) -> Tensor<Element>",
            "key.typeusr" : "$s4from4main6TensorVyxGAB03AnyC0_p_tcD",
            "key.usr" : "s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 24807
              }
            ],
            "key.bodylength" : 81,
            "key.bodyoffset" : 24882,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>shape<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 150,
            "key.line" : 827,
            "key.modulename" : "main",
            "key.name" : "init(_:format:shape:)",
            "key.namelength" : 66,
            "key.nameoffset" : 24814,
            "key.offset" : 24814,
            "key.parsed_declaration" : "public init(_ kind: DeviceKind, format: TensorFormat, shape: TensorShape)",
            "key.parsed_scope.end" : 829,
            "key.parsed_scope.start" : 827,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_: DeviceKind, _: DataType, _: TensorShapeFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc\">init(_:kind:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: DeviceKind, _: TensorShapeFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc\">init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSayxGcfc\">init(_: [Element])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc\">init(data:using:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (DeviceKind, TensorFormat, TensorShape) -> Tensor<Element>",
            "key.typeusr" : "$s_6format5shape4main6TensorVyxGAC10DeviceKindO_AC0D6FormatOAC0D5ShapeVtcD",
            "key.usr" : "s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, _ dimensionFormat: <Type usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 25161
              }
            ],
            "key.bodylength" : 58,
            "key.bodyoffset" : 25232,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 10,
            "key.doc.comment" : " Create a new uninitialized tensor.\n\n - Parameters:\n   - kind: Which device this new tensor is on.\n   - dimensionFormat: The format and shape of the new tensor.",
            "key.doc.declaration" : "public init(_ kind: DeviceKind, _ dimensionFormat: TensorShapeFormat)",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"838\" column=\"10\"><Name>init(_:_:)<\/Name><USR>s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc<\/USR><Declaration>public init(_ kind: DeviceKind, _ dimensionFormat: TensorShapeFormat)<\/Declaration><CommentParts><Abstract><Para>Create a new uninitialized tensor.<\/Para><\/Abstract><Parameters><Parameter><Name>kind<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Which device this new tensor is on.<\/Para><\/Discussion><\/Parameter><Parameter><Name>dimensionFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The format and shape of the new tensor.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
            "key.doc.line" : 838,
            "key.doc.name" : "init(_:_:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "Which device this new tensor is on."
                  }
                ],
                "name" : "kind"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The format and shape of the new tensor."
                  }
                ],
                "name" : "dimensionFormat"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 190,
            "key.docoffset" : 24968,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 123,
            "key.line" : 838,
            "key.modulename" : "main",
            "key.name" : "init(_:_:)",
            "key.namelength" : 62,
            "key.nameoffset" : 25168,
            "key.offset" : 25168,
            "key.parsed_declaration" : "public init(_ kind: DeviceKind, _ dimensionFormat: TensorShapeFormat)",
            "key.parsed_scope.end" : 840,
            "key.parsed_scope.start" : 838,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_: DeviceKind, _: DataType, _: TensorShapeFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc\">init(_:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc\">init(_:kind:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: DeviceKind, _: TensorShapeFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc\">init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSayxGcfc\">init(_: [Element])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc\">init(data:using:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (DeviceKind, TensorShapeFormat) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGAA10DeviceKindO_AA0B11ShapeFormatOtcD",
            "key.usr" : "s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init&lt;S&gt;(_ sequence: <Type usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/Type>, kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>) where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> == <Type usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/Type>.<Type usr=\"s:ST7ElementQa\">Element<\/Type>, <Type usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/Type> : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 25295
              }
            ],
            "key.bodylength" : 703,
            "key.bodyoffset" : 25433,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\"><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>sequence<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>kind<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>shape<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> == <ref.generic_type_param usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:ST7ElementQa\">Element<\/ref.associatedtype><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/ref.generic_type_param> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 835,
            "key.line" : 842,
            "key.modulename" : "main",
            "key.name" : "init(_:kind:format:shape:)",
            "key.namelength" : 100,
            "key.nameoffset" : 25302,
            "key.offset" : 25302,
            "key.parsed_declaration" : "public init<S: Sequence>(\n  _ sequence: S, kind: DeviceKind, format: TensorFormat, shape: TensorShape\n)\nwhere S.Element == Element",
            "key.parsed_scope.end" : 861,
            "key.parsed_scope.start" : 842,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_: DeviceKind, _: DataType, _: TensorShapeFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc\">init(_:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: DeviceKind, _: TensorShapeFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc\">init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSayxGcfc\">init(_: [Element])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc\">init(data:using:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>S : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
                "key.column" : 15,
                "key.decl_lang" : "source.lang.swift",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 8,
                    "key.offset" : 25310
                  }
                ],
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>S<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "Sequence"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 11,
                "key.line" : 842,
                "key.modulename" : "main",
                "key.name" : "S",
                "key.namelength" : 1,
                "key.nameoffset" : 25307,
                "key.offset" : 25307,
                "key.parsed_declaration" : "public init<S: Sequence",
                "key.parsed_scope.end" : 842,
                "key.parsed_scope.start" : 842,
                "key.reusingastcontext" : false,
                "key.typename" : "S.Type",
                "key.typeusr" : "$sqd__mD",
                "key.usr" : "s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp"
              },
              {
                "key.annotated_decl" : "<Declaration>let cArray: <Type usr=\"s:s15ContiguousArrayV\">ContiguousArray<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cArray<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s15ContiguousArrayV\">ContiguousArray<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 38,
                "key.line" : 847,
                "key.modulename" : "main",
                "key.name" : "cArray",
                "key.namelength" : 6,
                "key.nameoffset" : 25492,
                "key.offset" : 25488,
                "key.parsed_declaration" : "let cArray = ContiguousArray(sequence)",
                "key.parsed_scope.end" : 847,
                "key.parsed_scope.start" : 847,
                "key.reusingastcontext" : false,
                "key.typename" : "ContiguousArray<Element>",
                "key.typeusr" : "$ss15ContiguousArrayVyxGD",
                "key.usr" : "s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc6cArrayL_s010ContiguousK0VyxGvp"
              }
            ],
            "key.typename" : "<Element, S where Element : TensorNumeric, Element == S.Element, S : Sequence> (Tensor<Element>.Type) -> (S, DeviceKind, TensorFormat, TensorShape) -> Tensor<Element>",
            "key.typeusr" : "$s_4kind6format5shape4main6TensorVyxGqd___AD10DeviceKindOAD0E6FormatOAD0E5ShapeVtc7ElementQyd__RszSTRd__luD",
            "key.usr" : "s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init&lt;S&gt;(_ sequence: <Type usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/Type>, _ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, _ dimensionFormat: <Type usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/Type>) where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> == <Type usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/Type>.<Type usr=\"s:ST7ElementQa\">Element<\/Type>, <Type usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/Type> : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 26380
              }
            ],
            "key.bodylength" : 108,
            "key.bodyoffset" : 26516,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 10,
            "key.doc.comment" : " Create a new tensor and initialize with content from a sequence.\n\n - Parameters:\n   - sequence: The sequence to initialize the new tensor with.\n   - dimensionFormat: The format and shape of the new tensor.",
            "key.doc.declaration" : "public init<S>(_ sequence: S, _ kind: DeviceKind, _ dimensionFormat: TensorShapeFormat) where Element == S.Element, S : Sequence",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"870\" column=\"10\"><Name>init(_:_:_:)<\/Name><USR>s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc<\/USR><Declaration>public init&lt;S&gt;(_ sequence: S, _ kind: DeviceKind, _ dimensionFormat: TensorShapeFormat) where Element == S.Element, S : Sequence<\/Declaration><CommentParts><Abstract><Para>Create a new tensor and initialize with content from a sequence.<\/Para><\/Abstract><Parameters><Parameter><Name>sequence<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The sequence to initialize the new tensor with.<\/Para><\/Discussion><\/Parameter><Parameter><Name>dimensionFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The format and shape of the new tensor.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
            "key.doc.line" : 870,
            "key.doc.name" : "init(_:_:_:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "The sequence to initialize the new tensor with."
                  }
                ],
                "name" : "sequence"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The format and shape of the new tensor."
                  }
                ],
                "name" : "dimensionFormat"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 236,
            "key.docoffset" : 26141,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\"><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>sequence<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> == <ref.generic_type_param usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:ST7ElementQa\">Element<\/ref.associatedtype><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/ref.generic_type_param> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 238,
            "key.line" : 870,
            "key.modulename" : "main",
            "key.name" : "init(_:_:_:)",
            "key.namelength" : 98,
            "key.nameoffset" : 26387,
            "key.offset" : 26387,
            "key.parsed_declaration" : "public init<S: Sequence>(\n  _ sequence: S, _ kind: DeviceKind, _ dimensionFormat: TensorShapeFormat\n)\nwhere S.Element == Element",
            "key.parsed_scope.end" : 876,
            "key.parsed_scope.start" : 870,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_: DeviceKind, _: DataType, _: TensorShapeFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc\">init(_:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc\">init(_:kind:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc\">init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSayxGcfc\">init(_: [Element])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc\">init(data:using:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>S : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
                "key.column" : 15,
                "key.decl_lang" : "source.lang.swift",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 8,
                    "key.offset" : 26395
                  }
                ],
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>S<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "Sequence"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 11,
                "key.line" : 870,
                "key.modulename" : "main",
                "key.name" : "S",
                "key.namelength" : 1,
                "key.nameoffset" : 26392,
                "key.offset" : 26392,
                "key.parsed_declaration" : "public init<S: Sequence",
                "key.parsed_scope.end" : 870,
                "key.parsed_scope.start" : 870,
                "key.reusingastcontext" : false,
                "key.typename" : "S.Type",
                "key.typeusr" : "$sqd__mD",
                "key.usr" : "s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp"
              }
            ],
            "key.typename" : "<Element, S where Element : TensorNumeric, Element == S.Element, S : Sequence> (Tensor<Element>.Type) -> (S, DeviceKind, TensorShapeFormat) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__luD",
            "key.usr" : "s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>, unsafeMutablePointer: <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt;, bindLifetimeOf: Any)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 26629
              }
            ],
            "key.bodylength" : 233,
            "key.bodyoffset" : 26790,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>shape<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>unsafeMutablePointer<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>bindLifetimeOf<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 388,
            "key.line" : 878,
            "key.modulename" : "main",
            "key.name" : "init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)",
            "key.namelength" : 152,
            "key.nameoffset" : 26636,
            "key.offset" : 26636,
            "key.parsed_declaration" : "public init(\n  _ kind: DeviceKind, format: TensorFormat, shape: TensorShape,\n  unsafeMutablePointer: UnsafeMutablePointer<Element>, bindLifetimeOf: Any\n)",
            "key.parsed_scope.end" : 887,
            "key.parsed_scope.start" : 878,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_: DeviceKind, _: DataType, _: TensorShapeFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc\">init(_:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc\">init(_:kind:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: DeviceKind, _: TensorShapeFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSayxGcfc\">init(_: [Element])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc\">init(data:using:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let cTensor: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensor<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 158,
                "key.line" : 882,
                "key.modulename" : "main",
                "key.name" : "cTensor",
                "key.namelength" : 7,
                "key.nameoffset" : 26799,
                "key.offset" : 26795,
                "key.parsed_declaration" : "let cTensor = ccv_nnc_tensor_new(\n  unsafeMutablePointer,\n  toCTensorParams(kind, dataType: Element.dataType, format: format, shape: shape),\n  0)!",
                "key.parsed_scope.end" : 882,
                "key.parsed_scope.start" : 882,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc01cB0L_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (DeviceKind, TensorFormat, TensorShape, UnsafeMutablePointer<Element>, Any) -> Tensor<Element>",
            "key.typeusr" : "$s_6format5shape20unsafeMutablePointer14bindLifetimeOf4main6TensorVyxGAE10DeviceKindO_AE0J6FormatOAE0J5ShapeVSpyxGyptcD",
            "key.usr" : "s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(indices: <Type usr=\"s:Si\">Int<\/Type>...) -&gt; <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 27041
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 27028
              }
            ],
            "key.bodylength" : 352,
            "key.bodyoffset" : 27087,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>indices<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct>...<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 392,
            "key.line" : 890,
            "key.modulename" : "main",
            "key.name" : "subscript(_:)",
            "key.namelength" : 26,
            "key.nameoffset" : 27048,
            "key.offset" : 27048,
            "key.parsed_declaration" : "public subscript(indices: Int...) -> Element",
            "key.parsed_scope.end" : 904,
            "key.parsed_scope.start" : 890,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int...) -> Element",
            "key.typeusr" : "$syxSid_tcD",
            "key.usr" : "s:4main6TensorVyxSid_tcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(ranges: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;...) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 27457
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 27444
              }
            ],
            "key.bodylength" : 281,
            "key.bodyoffset" : 27517,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>ranges<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;...<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 335,
            "key.line" : 907,
            "key.modulename" : "main",
            "key.name" : "subscript(_:)",
            "key.namelength" : 32,
            "key.nameoffset" : 27464,
            "key.offset" : 27464,
            "key.parsed_declaration" : "public subscript(ranges: Range<Int>...) -> Tensor<Element>",
            "key.parsed_scope.end" : 918,
            "key.parsed_scope.start" : 907,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Range<Int>...) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSnySiGd_tcD",
            "key.usr" : "s:4main6TensorVyACyxGSnySiGd_tcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline subscript(indices: [<Type usr=\"s:Si\">Int<\/Type>], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 27803
              }
            ],
            "key.bodylength" : 297,
            "key.bodyoffset" : 27888,
            "key.column" : 3,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>indices<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 363,
            "key.line" : 921,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:)",
            "key.namelength" : 44,
            "key.nameoffset" : 27823,
            "key.offset" : 27823,
            "key.parsed_declaration" : "subscript(indices: [Int], range: Range<Int>) -> Tensor<Element>",
            "key.parsed_scope.end" : 932,
            "key.parsed_scope.start" : 921,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> ([Int], Range<Int>) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSaySiG_SnySiGtcD",
            "key.usr" : "s:4main6TensorVyACyxGSaySiG_SnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>@usableFromInline subscript(indices: [<Type usr=\"s:Si\">Int<\/Type>], range: <Type usr=\"s:s14UnboundedRangea\">UnboundedRange<\/Type>) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.usableFromInline",
                "key.length" : 17,
                "key.offset" : 28190
              }
            ],
            "key.bodylength" : 393,
            "key.bodyoffset" : 28279,
            "key.column" : 3,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>indices<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:s14UnboundedRangea\">UnboundedRange<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 463,
            "key.line" : 935,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:)",
            "key.namelength" : 48,
            "key.nameoffset" : 28210,
            "key.offset" : 28210,
            "key.parsed_declaration" : "subscript(indices: [Int], range: UnboundedRange) -> Tensor<Element>",
            "key.parsed_scope.end" : 948,
            "key.parsed_scope.start" : 935,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> ([Int], (UnboundedRange_) -> ()) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSaySiG_ys15UnboundedRange_OXEtcD",
            "key.usr" : "s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip"
          },
          {
            "key.annotated_decl" : "<Declaration>let shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>shape<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 22,
            "key.line" : 937,
            "key.modulename" : "main",
            "key.name" : "shape",
            "key.namelength" : 5,
            "key.nameoffset" : 28300,
            "key.offset" : 28296,
            "key.parsed_declaration" : "let shape = self.shape",
            "key.parsed_scope.end" : 937,
            "key.parsed_scope.start" : 937,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcig5shapeL_AA0B5ShapeVvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
            "key.column" : 11,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>shape<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 22,
            "key.line" : 945,
            "key.modulename" : "main",
            "key.name" : "shape",
            "key.namelength" : 5,
            "key.nameoffset" : 28568,
            "key.offset" : 28564,
            "key.parsed_declaration" : "let shape = self.shape",
            "key.parsed_scope.end" : 945,
            "key.parsed_scope.start" : 945,
            "key.reusingastcontext" : false,
            "key.typename" : "TensorShape",
            "key.typeusr" : "$s4main11TensorShapeVD",
            "key.usr" : "s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcis5shapeL_AA0B5ShapeVvp"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 433,
        "key.bodyoffset" : 28722,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 25,
            "key.offset" : 28695
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "ExpressibleByArrayLiteral"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 479,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 28687,
        "key.offset" : 28677,
        "key.parsed_declaration" : "extension Tensor: ExpressibleByArrayLiteral",
        "key.parsed_scope.end" : 965,
        "key.parsed_scope.start" : 951,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ elements: [<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>])<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 28725
              }
            ],
            "key.bodylength" : 313,
            "key.bodyoffset" : 28761,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>elements<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 343,
            "key.line" : 952,
            "key.modulename" : "main",
            "key.name" : "init(_:)",
            "key.namelength" : 27,
            "key.nameoffset" : 28732,
            "key.offset" : 28732,
            "key.parsed_declaration" : "public init(_ elements: [Element])",
            "key.parsed_scope.end" : 961,
            "key.parsed_scope.start" : 952,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_: DeviceKind, _: DataType, _: TensorShapeFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc\">init(_:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc\">init(_:kind:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: DeviceKind, _: TensorShapeFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc\">init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc\">init(data:using:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let wrapped: <Type usr=\"s:4main7WrappedC\">Wrapped<\/Type>&lt;[<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>]&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>wrapped<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main7WrappedC\">Wrapped<\/ref.class>&lt;[<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>]&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 31,
                "key.line" : 953,
                "key.modulename" : "main",
                "key.name" : "wrapped",
                "key.namelength" : 7,
                "key.nameoffset" : 28770,
                "key.offset" : 28766,
                "key.parsed_declaration" : "let wrapped = Wrapped(elements)",
                "key.parsed_scope.end" : 953,
                "key.parsed_scope.start" : 953,
                "key.reusingastcontext" : false,
                "key.typename" : "Wrapped<[Element]>",
                "key.typeusr" : "$s4main7WrappedCySayxGGD",
                "key.usr" : "s:4main6TensorVyACyxGSayxGcfc7wrappedL_AA7WrappedCyAEGvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let newt: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>newt<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 212,
                "key.line" : 954,
                "key.modulename" : "main",
                "key.name" : "newt",
                "key.namelength" : 4,
                "key.nameoffset" : 28806,
                "key.offset" : 28802,
                "key.parsed_declaration" : "let newt = wrapped.value.withUnsafeBytes {\n  ccv_nnc_tensor_new(\n    $0.baseAddress,\n    toCTensorParams(\n      .CPU, dataType: Element.dataType, format: .NCHW, shape: [elements.count]), 0)!\n}",
                "key.parsed_scope.end" : 954,
                "key.parsed_scope.start" : 954,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorVyACyxGSayxGcfc4newtL_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> ([Element]) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSayxGcD",
            "key.usr" : "s:4main6TensorVyACyxGSayxGcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(arrayLiteral elements: <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>...)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 29078
              }
            ],
            "key.bodylength" : 27,
            "key.bodyoffset" : 29126,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "init(arrayLiteral elements: Self.ArrayLiteralElement...)",
            "key.doc.discussion" : [
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Function><Name>init(arrayLiteral:)<\/Name><USR>s:s25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc<\/USR><Declaration>init(arrayLiteral elements: Self.ArrayLiteralElement...)<\/Declaration><CommentParts><Abstract><Para>Creates an instance initialized with the given elements.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>ExpressibleByArrayLiteral<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.name" : "init(arrayLiteral:)",
            "key.doc.type" : "Function",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>arrayLiteral<\/decl.var.parameter.argument_label> <decl.var.parameter.name>elements<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>...<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 69,
            "key.line" : 962,
            "key.modulename" : "main",
            "key.name" : "init(arrayLiteral:)",
            "key.namelength" : 39,
            "key.nameoffset" : 29085,
            "key.offset" : 29085,
            "key.overrides" : [
              {
                "key.usr" : "s:s25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc"
              }
            ],
            "key.parsed_declaration" : "public init(arrayLiteral elements: Element...)",
            "key.parsed_scope.end" : 964,
            "key.parsed_scope.start" : 962,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_: DeviceKind, _: DataType, _: TensorShapeFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc\">init(_:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc\">init(_:kind:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: DeviceKind, _: TensorShapeFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc\">init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSayxGcfc\">init(_: [Element])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc\">init(data:using:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (Element...) -> Tensor<Element>",
            "key.typeusr" : "$s12arrayLiteral4main6TensorVyxGxd_tcD",
            "key.usr" : "s:s25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>@frozen @_eagerMove struct Array&lt;Element&gt; : <Type usr=\"s:s24_DestructorSafeContainerP\">_DestructorSafeContainer<\/Type><\/Declaration>",
        "key.bodylength" : 261,
        "key.bodyoffset" : 29204,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "@frozen struct Array<Element> : _DestructorSafeContainer",
        "key.doc.discussion" : [
          {
            "Para" : "Arrays are one of the most commonly used data types in an app. You use arrays to organize your app’s data. Specifically, you use the `Array` type to hold elements of a single type, the array’s `Element` type. An array can store any kind of elements—from integers to strings to classes."
          },
          {
            "Para" : "Swift makes it easy to create arrays in your code using an array literal: simply surround a comma-separated list of values with square brackets. Without any other information, Swift creates an array that includes the specified values, automatically inferring the array’s `Element` type. For example:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can create an empty array by specifying the `Element` type of your array in the declaration. For example:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you need an array that is preinitialized with a fixed number of default values, use the `Array(repeating:count:)` initializer."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "When you need to perform an operation on all of an array’s elements, use a `for`-`in` loop to iterate through the array’s contents."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Use the `isEmpty` property to check quickly whether an array has any elements, or use the `count` property to find the number of elements in the array."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Use the `first` and `last` properties for safe access to the value of the array’s first and last elements. If the array is empty, these properties are `nil`."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can access individual array elements through a subscript. The first element of a nonempty array is always at index zero. You can subscript an array with any integer from zero up to, but not including, the count of the array. Using a negative number or an index equal to or greater than `count` triggers a runtime error. For example:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Suppose you need to store a list of the names of students that are signed up for a class you’re teaching. During the registration period, you need to add and remove names as students add and drop the class."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "To add single elements to the end of an array, use the `append(_:)` method. Add multiple elements at the same time by passing another array or a sequence of any kind to the `append(contentsOf:)` method."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can add new elements in the middle of an array by using the `insert(_:at:)` method for single elements and by using `insert(contentsOf:at:)` to insert multiple elements from another collection or array literal. The elements at that index and later indices are shifted back to make room."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "To remove elements from an array, use the `remove(at:)`, `removeSubrange(_:)`, and `removeLast()` methods."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can replace an existing element with a new value by assigning the new value to the subscript."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Every array reserves a specific amount of memory to hold its contents. When you add elements to an array and that array begins to exceed its reserved capacity, the array allocates a larger region of memory and copies its elements into the new storage. The new storage is a multiple of the old storage’s size. This exponential growth strategy means that appending an element happens in constant time, averaging the performance of many append operations. Append operations that trigger reallocation have a performance cost, but they occur less and less often as the array grows larger."
          },
          {
            "Para" : "If you know approximately how many elements you will need to store, use the `reserveCapacity(_:)` method before appending to the array to avoid intermediate reallocations. Use the `capacity` and `count` properties to determine how many more elements the array can store without allocating larger storage."
          },
          {
            "Para" : "For arrays of most `Element` types, this storage is a contiguous block of memory. For arrays with an `Element` type that is a class or `@objc` protocol type, this storage can be a contiguous block of memory or an instance of `NSArray`. Because any arbitrary subclass of `NSArray` can become an `Array`, there are no guarantees about representation or efficiency in this case."
          },
          {
            "Para" : "Each array has an independent value that includes the values of all of its elements. For simple types such as integers and other structures, this means that when you change a value in one array, the value of that element does not change in any copies of the array. For example:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If the elements in an array are instances of a class, the semantics are the same, though they might appear different at first. In this case, the values stored in the array are references to objects that live outside the array. If you change a reference to an object in one array, only that array has a reference to the new object. However, if two arrays contain references to the same object, you can observe changes to that object’s properties from both arrays. For example:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Arrays, like all variable-size collections in the standard library, use copy-on-write optimization. Multiple copies of an array share the same storage until you modify one of the copies. When that happens, the array being modified replaces its storage with a uniquely owned copy of itself, which is then modified in place. Optimizations are sometimes applied that can reduce the amount of copying."
          },
          {
            "Para" : "This means that if an array is sharing storage with other copies, the first mutating operation on that array incurs the cost of copying the array. An array that is the sole owner of its storage can perform mutating operations in place."
          },
          {
            "Para" : "In the example below, a `numbers` array is created along with two copies that share the same storage. When the original `numbers` array is modified, it makes a unique copy of its storage before making the modification. Further modifications to `numbers` are made in place, while the two copies continue to share the original storage."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "When you need to access APIs that require data in an `NSArray` instance instead of `Array`, use the type-cast operator (`as`) to bridge your instance. For bridging to be possible, the `Element` type of your array must be a class, an `@objc` protocol (a protocol imported from Objective-C or marked with the `@objc` attribute), or a type that bridges to a Foundation type."
          },
          {
            "Para" : "The following example shows how you can bridge an `Array` instance to `NSArray` to use the `write(to:atomically:)` method. In this example, the `colors` array can be bridged to `NSArray` because the `colors` array’s `String` elements bridge to `NSString`. The compiler prevents bridging the `moreColors` array, on the other hand, because its `Element` type is `Optional<String>`, which does  bridge to a Foundation type."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Bridging from `Array` to `NSArray` takes O(1) time and O(1) space if the array’s elements are already instances of a class or an `@objc` protocol; otherwise, it takes O() time and space."
          },
          {
            "Para" : "When the destination array’s element type is a class or an `@objc` protocol, bridging from `NSArray` to `Array` first calls the `copy(with:)` (`- copyWithZone:` in Objective-C) method on the array to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time. For instances of `NSArray` that are already immutable, `copy(with:)` usually returns the same array in O(1) time; otherwise, the copying performance is unspecified. If `copy(with:)` returns the same array, the instances of `NSArray` and `Array` share storage using the same copy-on-write optimization that is used when two instances of `Array` share storage."
          },
          {
            "Para" : "When the destination array’s element type is a nonclass type that bridges to a Foundation type, bridging from `NSArray` to `Array` performs a bridging copy of the elements to contiguous storage in O() time. For example, bridging from `NSArray` to `Array<Int>` performs such a copy. No further bridging is required when accessing elements of the `Array` instance."
          },
          {
            "Note" : ""
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Array<\/Name><USR>s:Sa<\/USR><Declaration>@frozen struct Array&lt;Element&gt; : _DestructorSafeContainer<\/Declaration><CommentParts><Abstract><Para>An ordered, random-access collection.<\/Para><\/Abstract><Discussion><Para>Arrays are one of the most commonly used data types in an app. You use arrays to organize your app’s data. Specifically, you use the <codeVoice>Array<\/codeVoice> type to hold elements of a single type, the array’s <codeVoice>Element<\/codeVoice> type. An array can store any kind of elements—from integers to strings to classes.<\/Para><Para>Swift makes it easy to create arrays in your code using an array literal: simply surround a comma-separated list of values with square brackets. Without any other information, Swift creates an array that includes the specified values, automatically inferring the array’s <codeVoice>Element<\/codeVoice> type. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ An array of 'Int' elements]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let oddNumbers = [1, 3, 5, 7, 9, 11, 13, 15]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ An array of 'String' elements]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let streets = [\"Albemarle\", \"Brandywine\", \"Chesapeake\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can create an empty array by specifying the <codeVoice>Element<\/codeVoice> type of your array in the declaration. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ Shortened forms are preferred]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var emptyDoubles: [Double] = []]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ The full type name is also allowed]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var emptyFloats: Array<Float> = Array()]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>If you need an array that is preinitialized with a fixed number of default values, use the <codeVoice>Array(repeating:count:)<\/codeVoice> initializer.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var digitCounts = Array(repeating: 0, count: 10)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(digitCounts)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Array Values<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>When you need to perform an operation on all of an array’s elements, use a <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> loop to iterate through the array’s contents.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[for street in streets {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"I don't live on \\(street).\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"I don't live on Albemarle.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"I don't live on Brandywine.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"I don't live on Chesapeake.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Use the <codeVoice>isEmpty<\/codeVoice> property to check quickly whether an array has any elements, or use the <codeVoice>count<\/codeVoice> property to find the number of elements in the array.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if oddNumbers.isEmpty {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"I don't know any odd numbers.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[} else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"I know \\(oddNumbers.count) odd numbers.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"I know 8 odd numbers.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Use the <codeVoice>first<\/codeVoice> and <codeVoice>last<\/codeVoice> properties for safe access to the value of the array’s first and last elements. If the array is empty, these properties are <codeVoice>nil<\/codeVoice>.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstElement = oddNumbers.first, let lastElement = oddNumbers.last {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(firstElement, lastElement, separator: \", \")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1, 15\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(emptyDoubles.first, emptyDoubles.last, separator: \", \")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"nil, nil\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can access individual array elements through a subscript. The first element of a nonempty array is always at index zero. You can subscript an array with any integer from zero up to, but not including, the count of the array. Using a negative number or an index equal to or greater than <codeVoice>count<\/codeVoice> triggers a runtime error. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(oddNumbers[0], oddNumbers[3], separator: \", \")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1, 7\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(emptyDoubles[0])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Triggers runtime error: Index out of range]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Adding and Removing Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Suppose you need to store a list of the names of students that are signed up for a class you’re teaching. During the registration period, you need to add and remove names as students add and drop the class.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var students = [\"Ben\", \"Ivy\", \"Jordell\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>To add single elements to the end of an array, use the <codeVoice>append(_:)<\/codeVoice> method. Add multiple elements at the same time by passing another array or a sequence of any kind to the <codeVoice>append(contentsOf:)<\/codeVoice> method.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[students.append(\"Maxime\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[students.append(contentsOf: [\"Shakia\", \"William\"])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\", \"Shakia\", \"William\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can add new elements in the middle of an array by using the <codeVoice>insert(_:at:)<\/codeVoice> method for single elements and by using <codeVoice>insert(contentsOf:at:)<\/codeVoice> to insert multiple elements from another collection or array literal. The elements at that index and later indices are shifted back to make room.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[students.insert(\"Liam\", at: 3)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ben\", \"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\", \"William\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>To remove elements from an array, use the <codeVoice>remove(at:)<\/codeVoice>, <codeVoice>removeSubrange(_:)<\/codeVoice>, and <codeVoice>removeLast()<\/codeVoice> methods.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ Ben's family is moving to another state]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[students.remove(at: 0)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\", \"William\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ William is signing up for a different class]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[students.removeLast()]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can replace an existing element with a new value by assigning the new value to the subscript.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let i = students.firstIndex(of: \"Maxime\") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    students[i] = \"Max\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ [\"Ivy\", \"Jordell\", \"Liam\", \"Max\", \"Shakia\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Growing the Size of an Array<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>Every array reserves a specific amount of memory to hold its contents. When you add elements to an array and that array begins to exceed its reserved capacity, the array allocates a larger region of memory and copies its elements into the new storage. The new storage is a multiple of the old storage’s size. This exponential growth strategy means that appending an element happens in constant time, averaging the performance of many append operations. Append operations that trigger reallocation have a performance cost, but they occur less and less often as the array grows larger.<\/Para><Para>If you know approximately how many elements you will need to store, use the <codeVoice>reserveCapacity(_:)<\/codeVoice> method before appending to the array to avoid intermediate reallocations. Use the <codeVoice>capacity<\/codeVoice> and <codeVoice>count<\/codeVoice> properties to determine how many more elements the array can store without allocating larger storage.<\/Para><Para>For arrays of most <codeVoice>Element<\/codeVoice> types, this storage is a contiguous block of memory. For arrays with an <codeVoice>Element<\/codeVoice> type that is a class or <codeVoice>@objc<\/codeVoice> protocol type, this storage can be a contiguous block of memory or an instance of <codeVoice>NSArray<\/codeVoice>. Because any arbitrary subclass of <codeVoice>NSArray<\/codeVoice> can become an <codeVoice>Array<\/codeVoice>, there are no guarantees about representation or efficiency in this case.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Modifying Copies of Arrays<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Each array has an independent value that includes the values of all of its elements. For simple types such as integers and other structures, this means that when you change a value in one array, the value of that element does not change in any copies of the array. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var numbers = [1, 2, 3, 4, 5]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var numbersCopy = numbers]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[0] = 100]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(numbers)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[100, 2, 3, 4, 5]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(numbersCopy)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[1, 2, 3, 4, 5]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>If the elements in an array are instances of a class, the semantics are the same, though they might appear different at first. In this case, the values stored in the array are references to objects that live outside the array. If you change a reference to an object in one array, only that array has a reference to the new object. However, if two arrays contain references to the same object, you can observe changes to that object’s properties from both arrays. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[\/\/ An integer type with reference semantics]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[class IntegerReference {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var value = 10]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var firstIntegers = [IntegerReference(), IntegerReference()]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var secondIntegers = firstIntegers]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Modifications to an instance are visible from either array]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[firstIntegers[0].value = 100]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondIntegers[0].value)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"100\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Replacements, additions, and removals are still visible]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ only in the modified array]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[firstIntegers[0] = IntegerReference()]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstIntegers[0].value)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"10\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondIntegers[0].value)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"100\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Arrays, like all variable-size collections in the standard library, use copy-on-write optimization. Multiple copies of an array share the same storage until you modify one of the copies. When that happens, the array being modified replaces its storage with a uniquely owned copy of itself, which is then modified in place. Optimizations are sometimes applied that can reduce the amount of copying.<\/Para><Para>This means that if an array is sharing storage with other copies, the first mutating operation on that array incurs the cost of copying the array. An array that is the sole owner of its storage can perform mutating operations in place.<\/Para><Para>In the example below, a <codeVoice>numbers<\/codeVoice> array is created along with two copies that share the same storage. When the original <codeVoice>numbers<\/codeVoice> array is modified, it makes a unique copy of its storage before making the modification. Further modifications to <codeVoice>numbers<\/codeVoice> are made in place, while the two copies continue to share the original storage.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var numbers = [1, 2, 3, 4, 5]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var firstCopy = numbers]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var secondCopy = numbers]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ The storage for 'numbers' is copied here]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[0] = 100]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[1] = 200]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[2] = 300]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ 'numbers' is [100, 200, 300, 4, 5]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ 'firstCopy' and 'secondCopy' are [1, 2, 3, 4, 5]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Bridging Between Array and NSArray<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>When you need to access APIs that require data in an <codeVoice>NSArray<\/codeVoice> instance instead of <codeVoice>Array<\/codeVoice>, use the type-cast operator (<codeVoice>as<\/codeVoice>) to bridge your instance. For bridging to be possible, the <codeVoice>Element<\/codeVoice> type of your array must be a class, an <codeVoice>@objc<\/codeVoice> protocol (a protocol imported from Objective-C or marked with the <codeVoice>@objc<\/codeVoice> attribute), or a type that bridges to a Foundation type.<\/Para><Para>The following example shows how you can bridge an <codeVoice>Array<\/codeVoice> instance to <codeVoice>NSArray<\/codeVoice> to use the <codeVoice>write(to:atomically:)<\/codeVoice> method. In this example, the <codeVoice>colors<\/codeVoice> array can be bridged to <codeVoice>NSArray<\/codeVoice> because the <codeVoice>colors<\/codeVoice> array’s <codeVoice>String<\/codeVoice> elements bridge to <codeVoice>NSString<\/codeVoice>. The compiler prevents bridging the <codeVoice>moreColors<\/codeVoice> array, on the other hand, because its <codeVoice>Element<\/codeVoice> type is <codeVoice>Optional&lt;String&gt;<\/codeVoice>, which does <emphasis>not<\/emphasis> bridge to a Foundation type.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let colors = [\"periwinkle\", \"rose\", \"moss\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let moreColors: [String?] = [\"ochre\", \"pine\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let url = URL(fileURLWithPath: \"names.plist\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[(colors as NSArray).write(to: url, atomically: true)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ true]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[(moreColors as NSArray).write(to: url, atomically: true)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ error: cannot convert value of type '[String?]' to type 'NSArray']]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Bridging from <codeVoice>Array<\/codeVoice> to <codeVoice>NSArray<\/codeVoice> takes O(1) time and O(1) space if the array’s elements are already instances of a class or an <codeVoice>@objc<\/codeVoice> protocol; otherwise, it takes O(<emphasis>n<\/emphasis>) time and space.<\/Para><Para>When the destination array’s element type is a class or an <codeVoice>@objc<\/codeVoice> protocol, bridging from <codeVoice>NSArray<\/codeVoice> to <codeVoice>Array<\/codeVoice> first calls the <codeVoice>copy(with:)<\/codeVoice> (<codeVoice>- copyWithZone:<\/codeVoice> in Objective-C) method on the array to get an immutable copy and then performs additional Swift bookkeeping work that takes O(1) time. For instances of <codeVoice>NSArray<\/codeVoice> that are already immutable, <codeVoice>copy(with:)<\/codeVoice> usually returns the same array in O(1) time; otherwise, the copying performance is unspecified. If <codeVoice>copy(with:)<\/codeVoice> returns the same array, the instances of <codeVoice>NSArray<\/codeVoice> and <codeVoice>Array<\/codeVoice> share storage using the same copy-on-write optimization that is used when two instances of <codeVoice>Array<\/codeVoice> share storage.<\/Para><Para>When the destination array’s element type is a nonclass type that bridges to a Foundation type, bridging from <codeVoice>NSArray<\/codeVoice> to <codeVoice>Array<\/codeVoice> performs a bridging copy of the elements to contiguous storage in O(<emphasis>n<\/emphasis>) time. For example, bridging from <codeVoice>NSArray<\/codeVoice> to <codeVoice>Array&lt;Int&gt;<\/codeVoice> performs such a copy. No further bridging is required when accessing elements of the <codeVoice>Array<\/codeVoice> instance.<\/Para><Note><Para>The <codeVoice>ContiguousArray<\/codeVoice> and <codeVoice>ArraySlice<\/codeVoice> types are not bridged; instances of those types always have a contiguous block of memory as their storage.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Array",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.attribute.builtin><syntaxtype.attribute.name>@_eagerMove<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Array<\/decl.name>&lt;<decl.generic_type_param usr=\"s:Sa7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s24_DestructorSafeContainerP\">_DestructorSafeContainer<\/ref.protocol><\/decl.struct>",
        "key.groupname" : "Collection\/Array",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 308,
        "key.modulename" : "Swift",
        "key.name" : "Array",
        "key.namelength" : 5,
        "key.nameoffset" : 29168,
        "key.offset" : 29158,
        "key.parsed_declaration" : "extension Array where Element: TensorNumeric",
        "key.parsed_scope.end" : 973,
        "key.parsed_scope.start" : 967,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ tensor: <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:Sa4mainAA13TensorNumericRzlE7Elementxmfp\">Element<\/Type>&gt;)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 29207
              }
            ],
            "key.bodylength" : 216,
            "key.bodyoffset" : 29247,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tensor<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:Sa4mainAA13TensorNumericRzlE7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 250,
            "key.line" : 968,
            "key.modulename" : "main",
            "key.name" : "init(_:)",
            "key.namelength" : 31,
            "key.nameoffset" : 29214,
            "key.offset" : 29214,
            "key.parsed_declaration" : "public init(_ tensor: Tensor<Element>)",
            "key.parsed_scope.end" : 972,
            "key.parsed_scope.start" : 968,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sa4mainSiRszlEySaySiGAA11TensorShapeVcfc\">init(_: TensorShape)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sa12arrayLiteralSayxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:S2ayxGycfc\">init()<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SaySayxGqd__c7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sa9repeating5countSayxGx_Sitcfc\">init(repeating:count:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sa27unsafeUninitializedCapacity16initializingWithSayxGSi_ySryxGz_SiztKXEtKcfc\">init(unsafeUninitializedCapacity:initializingWith:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SasSeRzlE4fromSayxGs7Decoder_p_tKcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sa10FoundationAA26DecodableWithConfigurationRzlE4from13configurationSayxGs7Decoder_p_08DecodingD0QztKcfc\">init(from:configuration:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>.<Type usr=\"s:4main11TensorShapeV7Elementa\">Element<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>.<ref.typealias usr=\"s:4main11TensorShapeV7Elementa\">Element<\/ref.typealias><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 47,
                "key.line" : 969,
                "key.modulename" : "main",
                "key.name" : "count",
                "key.namelength" : 5,
                "key.nameoffset" : 29256,
                "key.offset" : 29252,
                "key.parsed_declaration" : "let count = tensor.strides[0] * tensor.shape[0]",
                "key.parsed_scope.end" : 969,
                "key.parsed_scope.start" : 969,
                "key.reusingastcontext" : false,
                "key.typename" : "Int",
                "key.typeusr" : "$sSiD",
                "key.usr" : "s:Sa4mainAA13TensorNumericRzlEySayxGAA0B0VyxGcfc5countL_Sivp"
              },
              {
                "key.annotated_decl" : "<Declaration>let pointer: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pointer<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 91,
                "key.line" : 970,
                "key.modulename" : "main",
                "key.name" : "pointer",
                "key.namelength" : 7,
                "key.nameoffset" : 29308,
                "key.offset" : 29304,
                "key.parsed_declaration" : "let pointer = tensor.cTensor.pointee.data.ptr.bindMemory(to: Element.self, capacity: count)",
                "key.parsed_scope.end" : 970,
                "key.parsed_scope.start" : 970,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:Sa4mainAA13TensorNumericRzlEySayxGAA0B0VyxGcfc7pointerL_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Array<Element>.Type) -> (Tensor<Element>) -> Array<Element>",
            "key.typeusr" : "$sySayxG4main6TensorVyxGcD",
            "key.usr" : "s:Sa4mainAA13TensorNumericRzlEySayxGAA0B0VyxGcfc"
          }
        ],
        "key.typename" : "Array<Element>.Type",
        "key.typeusr" : "$sSayxGmD",
        "key.usr" : "s:Sa"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 1620,
        "key.bodyoffset" : 29486,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1639,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 29478,
        "key.offset" : 29468,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 1029,
        "key.parsed_scope.start" : 975,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 29502
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 29489
              }
            ],
            "key.bodylength" : 70,
            "key.bodyoffset" : 29558,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 120,
            "key.line" : 977,
            "key.modulename" : "main",
            "key.name" : "subscript(_:)",
            "key.namelength" : 28,
            "key.nameoffset" : 29509,
            "key.offset" : 29509,
            "key.parsed_declaration" : "public subscript(range: Range<Int>) -> Tensor<Element>",
            "key.parsed_scope.end" : 980,
            "key.parsed_scope.start" : 977,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Range<Int>) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSnySiGcD",
            "key.usr" : "s:4main6TensorVyACyxGSnySiGcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 29646
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 29633
              }
            ],
            "key.bodylength" : 74,
            "key.bodyoffset" : 29711,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 133,
            "key.line" : 983,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:)",
            "key.namelength" : 37,
            "key.nameoffset" : 29653,
            "key.offset" : 29653,
            "key.parsed_declaration" : "public subscript(i0: Int, range: Range<Int>) -> Tensor<Element>",
            "key.parsed_scope.end" : 986,
            "key.parsed_scope.start" : 983,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Range<Int>) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_SnySiGtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_SnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 29803
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 29790
              }
            ],
            "key.bodylength" : 82,
            "key.bodyoffset" : 29877,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 150,
            "key.line" : 989,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:)",
            "key.namelength" : 46,
            "key.nameoffset" : 29810,
            "key.offset" : 29810,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, range: Range<Int>) -> Tensor<Element>",
            "key.parsed_scope.end" : 992,
            "key.parsed_scope.start" : 989,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Range<Int>) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_SiSnySiGtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_SiSnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 29977
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 29964
              }
            ],
            "key.bodylength" : 90,
            "key.bodyoffset" : 30060,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 167,
            "key.line" : 995,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:_:)",
            "key.namelength" : 55,
            "key.nameoffset" : 29984,
            "key.offset" : 29984,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, range: Range<Int>) -> Tensor<Element>",
            "key.parsed_scope.end" : 998,
            "key.parsed_scope.start" : 995,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Range<Int>) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_S2iSnySiGtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_S2iSnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, i3: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 30168
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 30155
              }
            ],
            "key.bodylength" : 98,
            "key.bodyoffset" : 30260,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i3<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 184,
            "key.line" : 1001,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:_:_:)",
            "key.namelength" : 64,
            "key.nameoffset" : 30175,
            "key.offset" : 30175,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, i3: Int, range: Range<Int>) -> Tensor<Element>",
            "key.parsed_scope.end" : 1004,
            "key.parsed_scope.start" : 1001,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Int, Range<Int>) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_S3iSnySiGtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_S3iSnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, i3: <Type usr=\"s:Si\">Int<\/Type>, i4: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 30376
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 30363
              }
            ],
            "key.bodylength" : 106,
            "key.bodyoffset" : 30485,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i3<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i4<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 209,
            "key.line" : 1007,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:_:_:_:)",
            "key.namelength" : 73,
            "key.nameoffset" : 30383,
            "key.offset" : 30383,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, i3: Int, i4: Int, range: Range<Int>) -> Tensor<\n  Element\n>",
            "key.parsed_scope.end" : 1012,
            "key.parsed_scope.start" : 1007,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Int, Int, Range<Int>) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_S4iSnySiGtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_S4iSnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, i3: <Type usr=\"s:Si\">Int<\/Type>, i4: <Type usr=\"s:Si\">Int<\/Type>, i5: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 30609
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 30596
              }
            ],
            "key.bodylength" : 114,
            "key.bodyoffset" : 30725,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i3<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i4<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i5<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 224,
            "key.line" : 1015,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:_:_:_:_:)",
            "key.namelength" : 82,
            "key.nameoffset" : 30616,
            "key.offset" : 30616,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, range: Range<Int>)\n  -> Tensor<Element>",
            "key.parsed_scope.end" : 1020,
            "key.parsed_scope.start" : 1015,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Int, Int, Int, Range<Int>) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_S5iSnySiGtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_S5iSnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, i3: <Type usr=\"s:Si\">Int<\/Type>, i4: <Type usr=\"s:Si\">Int<\/Type>, i5: <Type usr=\"s:Si\">Int<\/Type>, i6: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 30857
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 30844
              }
            ],
            "key.bodylength" : 122,
            "key.bodyoffset" : 30982,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i3<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i4<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i5<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i6<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 241,
            "key.line" : 1023,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:_:_:_:_:_:)",
            "key.namelength" : 91,
            "key.nameoffset" : 30864,
            "key.offset" : 30864,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, range: Range<Int>)\n  -> Tensor<Element>",
            "key.parsed_scope.end" : 1028,
            "key.parsed_scope.start" : 1023,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Int, Int, Int, Int, Range<Int>) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_S6iSnySiGtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_S6iSnySiGtcip"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 1650,
        "key.bodyoffset" : 31127,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1669,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 31119,
        "key.offset" : 31109,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 1088,
        "key.parsed_scope.start" : 1031,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(range: <Type usr=\"s:s14UnboundedRangea\">UnboundedRange<\/Type>) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 31143
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 31130
              }
            ],
            "key.bodylength" : 59,
            "key.bodyoffset" : 31203,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:s14UnboundedRangea\">UnboundedRange<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 113,
            "key.line" : 1033,
            "key.modulename" : "main",
            "key.name" : "subscript(_:)",
            "key.namelength" : 32,
            "key.nameoffset" : 31150,
            "key.offset" : 31150,
            "key.parsed_declaration" : "public subscript(range: UnboundedRange) -> Tensor<Element>",
            "key.parsed_scope.end" : 1036,
            "key.parsed_scope.start" : 1033,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> ((UnboundedRange_) -> ()) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGys15UnboundedRange_OXEcD",
            "key.usr" : "s:4main6TensorVyACyxGys15UnboundedRange_OXEcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:s14UnboundedRangea\">UnboundedRange<\/Type>) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 31280
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 31267
              }
            ],
            "key.bodylength" : 74,
            "key.bodyoffset" : 31349,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:s14UnboundedRangea\">UnboundedRange<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 137,
            "key.line" : 1039,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:)",
            "key.namelength" : 41,
            "key.nameoffset" : 31287,
            "key.offset" : 31287,
            "key.parsed_declaration" : "public subscript(i0: Int, range: UnboundedRange) -> Tensor<Element>",
            "key.parsed_scope.end" : 1042,
            "key.parsed_scope.start" : 1039,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, (UnboundedRange_) -> ()) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_ys15UnboundedRange_OXEtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:s14UnboundedRangea\">UnboundedRange<\/Type>) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 31441
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 31428
              }
            ],
            "key.bodylength" : 82,
            "key.bodyoffset" : 31519,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:s14UnboundedRangea\">UnboundedRange<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 154,
            "key.line" : 1045,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:)",
            "key.namelength" : 50,
            "key.nameoffset" : 31448,
            "key.offset" : 31448,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, range: UnboundedRange) -> Tensor<Element>",
            "key.parsed_scope.end" : 1048,
            "key.parsed_scope.start" : 1045,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, (UnboundedRange_) -> ()) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_Siys15UnboundedRange_OXEtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:s14UnboundedRangea\">UnboundedRange<\/Type>) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 31619
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 31606
              }
            ],
            "key.bodylength" : 90,
            "key.bodyoffset" : 31706,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:s14UnboundedRangea\">UnboundedRange<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 171,
            "key.line" : 1051,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:_:)",
            "key.namelength" : 59,
            "key.nameoffset" : 31626,
            "key.offset" : 31626,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, range: UnboundedRange) -> Tensor<Element>",
            "key.parsed_scope.end" : 1054,
            "key.parsed_scope.start" : 1051,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, (UnboundedRange_) -> ()) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_S2iys15UnboundedRange_OXEtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, i3: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:s14UnboundedRangea\">UnboundedRange<\/Type>) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 31814
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 31801
              }
            ],
            "key.bodylength" : 98,
            "key.bodyoffset" : 31910,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i3<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:s14UnboundedRangea\">UnboundedRange<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 188,
            "key.line" : 1057,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:_:_:)",
            "key.namelength" : 68,
            "key.nameoffset" : 31821,
            "key.offset" : 31821,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, i3: Int, range: UnboundedRange) -> Tensor<Element>",
            "key.parsed_scope.end" : 1060,
            "key.parsed_scope.start" : 1057,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Int, (UnboundedRange_) -> ()) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_S3iys15UnboundedRange_OXEtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, i3: <Type usr=\"s:Si\">Int<\/Type>, i4: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:s14UnboundedRangea\">UnboundedRange<\/Type>) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 32026
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 32013
              }
            ],
            "key.bodylength" : 106,
            "key.bodyoffset" : 32141,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i3<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i4<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:s14UnboundedRangea\">UnboundedRange<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 215,
            "key.line" : 1063,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:_:_:_:)",
            "key.namelength" : 77,
            "key.nameoffset" : 32033,
            "key.offset" : 32033,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, i3: Int, i4: Int, range: UnboundedRange) -> Tensor<\n  Element\n>",
            "key.parsed_scope.end" : 1069,
            "key.parsed_scope.start" : 1063,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Int, Int, (UnboundedRange_) -> ()) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_S4iys15UnboundedRange_OXEtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, i3: <Type usr=\"s:Si\">Int<\/Type>, i4: <Type usr=\"s:Si\">Int<\/Type>, i5: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:s14UnboundedRangea\">UnboundedRange<\/Type>) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 32265
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 32252
              }
            ],
            "key.bodylength" : 114,
            "key.bodyoffset" : 32385,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i3<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i4<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i5<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:s14UnboundedRangea\">UnboundedRange<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 228,
            "key.line" : 1072,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:_:_:_:_:)",
            "key.namelength" : 86,
            "key.nameoffset" : 32272,
            "key.offset" : 32272,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, range: UnboundedRange)\n  -> Tensor<Element>",
            "key.parsed_scope.end" : 1077,
            "key.parsed_scope.start" : 1072,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Int, Int, Int, (UnboundedRange_) -> ()) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_S5iys15UnboundedRange_OXEtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>@inlinable public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, i3: <Type usr=\"s:Si\">Int<\/Type>, i4: <Type usr=\"s:Si\">Int<\/Type>, i5: <Type usr=\"s:Si\">Int<\/Type>, i6: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:s14UnboundedRangea\">UnboundedRange<\/Type>) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 32517
              },
              {
                "key.attribute" : "source.decl.attribute.inlinable",
                "key.length" : 10,
                "key.offset" : 32504
              }
            ],
            "key.bodylength" : 122,
            "key.bodyoffset" : 32653,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i3<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i4<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i5<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i6<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:s14UnboundedRangea\">UnboundedRange<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 252,
            "key.line" : 1080,
            "key.modulename" : "main",
            "key.name" : "subscript(_:_:_:_:_:_:_:_:)",
            "key.namelength" : 102,
            "key.nameoffset" : 32524,
            "key.offset" : 32524,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int,\n  range: UnboundedRange\n)\n  -> Tensor<Element>",
            "key.parsed_scope.end" : 1087,
            "key.parsed_scope.start" : 1080,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSaySiG_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGys15UnboundedRange_OXEcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_ys15UnboundedRange_OXEtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_Siys15UnboundedRange_OXEtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S2iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S3iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S4iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSi_S5iys15UnboundedRange_OXEtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Int, Int, Int, Int, (UnboundedRange_) -> ()) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSi_S6iys15UnboundedRange_OXEtcD",
            "key.usr" : "s:4main6TensorVyACyxGSi_S6iys15UnboundedRange_OXEtcip"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 1678,
        "key.bodyoffset" : 32798,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1697,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 32790,
        "key.offset" : 32780,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 1135,
        "key.parsed_scope.start" : 1090,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func toGPU(_ ordinal: <Type usr=\"s:Si\">Int<\/Type> = 0, streamContext: <Type usr=\"s:4main13StreamContextC\">StreamContext<\/Type>? = nil) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 33041
              }
            ],
            "key.bodylength" : 557,
            "key.bodyoffset" : 33125,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : " Move this tensor from CPU to GPU.\n\n - Parameters:\n   - ordinal: Which GPU the new tensor will reside.\n   - streamContext: Run the operation on the given stream context.\n - Returns: A new tensor on GPU.",
            "key.doc.declaration" : "public func toGPU(_ ordinal: Int = 0, streamContext: StreamContext? = nil) -> main.Tensor<Element>",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1100\" column=\"15\"><Name>toGPU(_:streamContext:)<\/Name><USR>s:4main6TensorV5toGPU_13streamContextACyxGSi_AA06StreamF0CSgtF<\/USR><Declaration>public func toGPU(_ ordinal: Int = 0, streamContext: StreamContext? = nil) -&gt; main.Tensor&lt;Element&gt;<\/Declaration><CommentParts><Abstract><Para>Move this tensor from CPU to GPU.<\/Para><\/Abstract><Parameters><Parameter><Name>ordinal<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Which GPU the new tensor will reside.<\/Para><\/Discussion><\/Parameter><Parameter><Name>streamContext<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Run the operation on the given stream context.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>A new tensor on GPU.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 1100,
            "key.doc.name" : "toGPU(_:streamContext:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "Which GPU the new tensor will reside."
                  }
                ],
                "name" : "ordinal"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Run the operation on the given stream context."
                  }
                ],
                "name" : "streamContext"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "A new tensor on GPU."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 236,
            "key.docoffset" : 32802,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toGPU<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>ordinal<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = 0<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>streamContext<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:4main13StreamContextC\">StreamContext<\/ref.class>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 635,
            "key.line" : 1100,
            "key.modulename" : "main",
            "key.name" : "toGPU(_:streamContext:)",
            "key.namelength" : 62,
            "key.nameoffset" : 33053,
            "key.offset" : 33048,
            "key.parsed_declaration" : "public func toGPU(_ ordinal: Int = 0, streamContext: StreamContext? = nil) -> Self",
            "key.parsed_scope.end" : 1112,
            "key.parsed_scope.start" : 1100,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var _output: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_output<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 141,
                "key.line" : 1102,
                "key.modulename" : "main",
                "key.name" : "_output",
                "key.namelength" : 7,
                "key.nameoffset" : 33187,
                "key.offset" : 33183,
                "key.parsed_declaration" : "var _output = ccv_nnc_tensor_new(\n  nil,\n  toCTensorParams(.GPU(ordinal), dataType: dataType, format: format, shape: shape),\n  0)",
                "key.parsed_scope.end" : 1102,
                "key.parsed_scope.start" : 1102,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV5toGPU_13streamContextACyxGSi_AA06StreamF0CSgtF7_outputL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>let cmd: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cmd<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 105,
                "key.line" : 1106,
                "key.modulename" : "main",
                "key.name" : "cmd",
                "key.namelength" : 3,
                "key.nameoffset" : 33333,
                "key.offset" : 33329,
                "key.parsed_declaration" : "let cmd = ccv_nnc_cmd(\n  CCV_NNC_DATA_TRANSFER_FORWARD, nil, CmdParamsFactory.factory.newParams(), 0)",
                "key.parsed_scope.end" : 1106,
                "key.parsed_scope.start" : 1106,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV5toGPU_13streamContextACyxGSi_AA06StreamF0CSgtF3cmdL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>let _streamContext: <Type usr=\"s:s13OpaquePointerV\">OpaquePointer<\/Type>?<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>_streamContext<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s13OpaquePointerV\">OpaquePointer<\/ref.struct>?<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 43,
                "key.line" : 1108,
                "key.modulename" : "main",
                "key.name" : "_streamContext",
                "key.namelength" : 14,
                "key.nameoffset" : 33443,
                "key.offset" : 33439,
                "key.parsed_declaration" : "let _streamContext = streamContext?._stream",
                "key.parsed_scope.end" : 1108,
                "key.parsed_scope.start" : 1108,
                "key.reusingastcontext" : false,
                "key.typename" : "OpaquePointer?",
                "key.typeusr" : "$ss13OpaquePointerVSgD",
                "key.usr" : "s:4main6TensorV5toGPU_13streamContextACyxGSi_AA06StreamF0CSgtF01_eF0L_s13OpaquePointerVSgvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var _input: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_input<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 61,
                "key.line" : 1109,
                "key.modulename" : "main",
                "key.name" : "_input",
                "key.namelength" : 6,
                "key.nameoffset" : 33491,
                "key.offset" : 33487,
                "key.parsed_declaration" : "var _input: UnsafeMutablePointer<ccv_nnc_tensor_t>? = cTensor",
                "key.parsed_scope.end" : 1109,
                "key.parsed_scope.start" : 1109,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV5toGPU_13streamContextACyxGSi_AA06StreamF0CSgtF6_inputL_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>) -> (Int, StreamContext?) -> Tensor<Element>",
            "key.typeusr" : "$s_13streamContext4main6TensorVyxGSi_AB06StreamB0CSgtcD",
            "key.usr" : "s:4main6TensorV5toGPU_13streamContextACyxGSi_AA06StreamF0CSgtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func toCPU(streamContext: <Type usr=\"s:4main13StreamContextC\">StreamContext<\/Type>? = nil) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 33870
              }
            ],
            "key.bodylength" : 539,
            "key.bodyoffset" : 33934,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : " Move this tensor from GPU to CPU.\n\n - Parameters:\n   - streamContext: Run the operation on the given stream context.\n - Returns: A new tensor on CPU.",
            "key.doc.declaration" : "public func toCPU(streamContext: StreamContext? = nil) -> main.Tensor<Element>",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1121\" column=\"15\"><Name>toCPU(streamContext:)<\/Name><USR>s:4main6TensorV5toCPU13streamContextACyxGAA06StreamF0CSg_tF<\/USR><Declaration>public func toCPU(streamContext: StreamContext? = nil) -&gt; main.Tensor&lt;Element&gt;<\/Declaration><CommentParts><Abstract><Para>Move this tensor from GPU to CPU.<\/Para><\/Abstract><Parameters><Parameter><Name>streamContext<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Run the operation on the given stream context.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>A new tensor on CPU.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 1121,
            "key.doc.name" : "toCPU(streamContext:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "Run the operation on the given stream context."
                  }
                ],
                "name" : "streamContext"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "A new tensor on CPU."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 180,
            "key.docoffset" : 33687,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toCPU<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>streamContext<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:4main13StreamContextC\">StreamContext<\/ref.class>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 597,
            "key.line" : 1121,
            "key.modulename" : "main",
            "key.name" : "toCPU(streamContext:)",
            "key.namelength" : 42,
            "key.nameoffset" : 33882,
            "key.offset" : 33877,
            "key.parsed_declaration" : "public func toCPU(streamContext: StreamContext? = nil) -> Self",
            "key.parsed_scope.end" : 1133,
            "key.parsed_scope.start" : 1121,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var _output: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_output<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 132,
                "key.line" : 1123,
                "key.modulename" : "main",
                "key.name" : "_output",
                "key.namelength" : 7,
                "key.nameoffset" : 33987,
                "key.offset" : 33983,
                "key.parsed_declaration" : "var _output = ccv_nnc_tensor_new(\n  nil,\n  toCTensorParams(.CPU, dataType: dataType, format: format, shape: shape),\n  0)",
                "key.parsed_scope.end" : 1123,
                "key.parsed_scope.start" : 1123,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV5toCPU13streamContextACyxGAA06StreamF0CSg_tF7_outputL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>let cmd: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cmd<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 105,
                "key.line" : 1127,
                "key.modulename" : "main",
                "key.name" : "cmd",
                "key.namelength" : 3,
                "key.nameoffset" : 34124,
                "key.offset" : 34120,
                "key.parsed_declaration" : "let cmd = ccv_nnc_cmd(\n  CCV_NNC_DATA_TRANSFER_FORWARD, nil, CmdParamsFactory.factory.newParams(), 0)",
                "key.parsed_scope.end" : 1127,
                "key.parsed_scope.start" : 1127,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV5toCPU13streamContextACyxGAA06StreamF0CSg_tF3cmdL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>let _streamContext: <Type usr=\"s:s13OpaquePointerV\">OpaquePointer<\/Type>?<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>_streamContext<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s13OpaquePointerV\">OpaquePointer<\/ref.struct>?<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 43,
                "key.line" : 1129,
                "key.modulename" : "main",
                "key.name" : "_streamContext",
                "key.namelength" : 14,
                "key.nameoffset" : 34234,
                "key.offset" : 34230,
                "key.parsed_declaration" : "let _streamContext = streamContext?._stream",
                "key.parsed_scope.end" : 1129,
                "key.parsed_scope.start" : 1129,
                "key.reusingastcontext" : false,
                "key.typename" : "OpaquePointer?",
                "key.typeusr" : "$ss13OpaquePointerVSgD",
                "key.usr" : "s:4main6TensorV5toCPU13streamContextACyxGAA06StreamF0CSg_tF01_eF0L_s13OpaquePointerVSgvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var _input: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_input<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 61,
                "key.line" : 1130,
                "key.modulename" : "main",
                "key.name" : "_input",
                "key.namelength" : 6,
                "key.nameoffset" : 34282,
                "key.offset" : 34278,
                "key.parsed_declaration" : "var _input: UnsafeMutablePointer<ccv_nnc_tensor_t>? = cTensor",
                "key.parsed_scope.end" : 1130,
                "key.parsed_scope.start" : 1130,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV5toCPU13streamContextACyxGAA06StreamF0CSg_tF6_inputL_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>) -> (StreamContext?) -> Tensor<Element>",
            "key.typeusr" : "$s13streamContext4main6TensorVyxGAB06StreamB0CSg_tcD",
            "key.usr" : "s:4main6TensorV5toCPU13streamContextACyxGAA06StreamF0CSg_tF"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 833,
        "key.bodyoffset" : 34497,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 852,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 34489,
        "key.offset" : 34479,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 1162,
        "key.parsed_scope.start" : 1137,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func copied() -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 34993
              }
            ],
            "key.bodylength" : 35,
            "key.bodyoffset" : 35023,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : " Make an explicit copy of the existing tensor. Raw tensors conforms to copy-on-write\n semantics. But sometimes, it is better to have explicit copy for better memory management\n hygiene. For example, if the tensor is obtained with .rawValue from a DynamicGraph\n variable, keeping that tensor alive would keep the whole computation graph available.\n Making an explicit copy would break that chain.\n\n - Returns: A new tensor copied from the existing one.",
            "key.doc.declaration" : "public func copied() -> main.Tensor<Element>",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1148\" column=\"15\"><Name>copied()<\/Name><USR>s:4main6TensorV6copiedACyxGyF<\/USR><Declaration>public func copied() -&gt; main.Tensor&lt;Element&gt;<\/Declaration><CommentParts><Abstract><Para>Make an explicit copy of the existing tensor. Raw tensors conforms to copy-on-write semantics. But sometimes, it is better to have explicit copy for better memory management hygiene. For example, if the tensor is obtained with .rawValue from a DynamicGraph variable, keeping that tensor alive would keep the whole computation graph available. Making an explicit copy would break that chain.<\/Para><\/Abstract><ResultDiscussion><Para>A new tensor copied from the existing one.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 1148,
            "key.doc.name" : "copied()",
            "key.doc.result_discussion" : [
              {
                "Para" : "A new tensor copied from the existing one."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 489,
            "key.docoffset" : 34501,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>copied<\/decl.name>() -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 59,
            "key.line" : 1148,
            "key.modulename" : "main",
            "key.name" : "copied()",
            "key.namelength" : 8,
            "key.nameoffset" : 35005,
            "key.offset" : 35000,
            "key.parsed_declaration" : "public func copied() -> Self",
            "key.parsed_scope.end" : 1150,
            "key.parsed_scope.start" : 1148,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>) -> () -> Tensor<Element>",
            "key.typeusr" : "$s4main6TensorVyxGycD",
            "key.usr" : "s:4main6TensorV6copiedACyxGyF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func contiguous() -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 35213
              }
            ],
            "key.bodylength" : 80,
            "key.bodyoffset" : 35247,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : " Only make explicit copy if the original is not contiguous in memory.\n\n - Returns: A new tensor copied from the existing one.",
            "key.doc.declaration" : "public func contiguous() -> main.Tensor<Element>",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1157\" column=\"15\"><Name>contiguous()<\/Name><USR>s:4main6TensorV10contiguousACyxGyF<\/USR><Declaration>public func contiguous() -&gt; main.Tensor&lt;Element&gt;<\/Declaration><CommentParts><Abstract><Para>Only make explicit copy if the original is not contiguous in memory.<\/Para><\/Abstract><ResultDiscussion><Para>A new tensor copied from the existing one.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 1157,
            "key.doc.name" : "contiguous()",
            "key.doc.result_discussion" : [
              {
                "Para" : "A new tensor copied from the existing one."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 147,
            "key.docoffset" : 35063,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>contiguous<\/decl.name>() -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 108,
            "key.line" : 1157,
            "key.modulename" : "main",
            "key.name" : "contiguous()",
            "key.namelength" : 12,
            "key.nameoffset" : 35225,
            "key.offset" : 35220,
            "key.parsed_declaration" : "public func contiguous() -> Self",
            "key.parsed_scope.end" : 1160,
            "key.parsed_scope.start" : 1157,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>) -> () -> Tensor<Element>",
            "key.typeusr" : "$s4main6TensorVyxGycD",
            "key.usr" : "s:4main6TensorV10contiguousACyxGyF"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 1338,
        "key.bodyoffset" : 35351,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1357,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 35343,
        "key.offset" : 35333,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 1198,
        "key.parsed_scope.start" : 1164,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var isNaN: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 35407
              }
            ],
            "key.bodylength" : 1256,
            "key.bodyoffset" : 35431,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 14,
            "key.doc.comment" : "Check if a tensor contains any NaN.",
            "key.doc.declaration" : "public var isNaN: Bool { get }",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1168\" column=\"14\"><Name>isNaN<\/Name><USR>s:4main6TensorV5isNaNSbvp<\/USR><Declaration>public var isNaN: Bool { get }<\/Declaration><CommentParts><Abstract><Para>Check if a tensor contains any NaN.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 1168,
            "key.doc.name" : "isNaN",
            "key.doc.type" : "Other",
            "key.doclength" : 50,
            "key.docoffset" : 35354,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isNaN<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 1274,
            "key.line" : 1168,
            "key.modulename" : "main",
            "key.name" : "isNaN",
            "key.namelength" : 5,
            "key.nameoffset" : 35418,
            "key.offset" : 35414,
            "key.parsed_declaration" : "public var isNaN: Bool",
            "key.parsed_scope.end" : 1197,
            "key.parsed_scope.start" : 1168,
            "key.reusingastcontext" : false,
            "key.typename" : "Bool",
            "key.typeusr" : "$sSbD",
            "key.usr" : "s:4main6TensorV5isNaNSbvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var params: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>params<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 49,
            "key.line" : 1169,
            "key.modulename" : "main",
            "key.name" : "params",
            "key.namelength" : 6,
            "key.nameoffset" : 35440,
            "key.offset" : 35436,
            "key.parsed_declaration" : "var params = CmdParamsFactory.factory.newParams()",
            "key.parsed_scope.end" : 1169,
            "key.parsed_scope.start" : 1169,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main6TensorV5isNaNSbvg6paramsL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let cmd: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cmd<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 67,
            "key.line" : 1172,
            "key.modulename" : "main",
            "key.name" : "cmd",
            "key.namelength" : 3,
            "key.nameoffset" : 35615,
            "key.offset" : 35611,
            "key.parsed_declaration" : "let cmd = ccv_nnc_cmd(CCV_NNC_REDUCE_ISNAN_FORWARD, nil, params, 0)",
            "key.parsed_scope.end" : 1172,
            "key.parsed_scope.start" : 1172,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main6TensorV5isNaNSbvg3cmdL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var _output: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_output<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 128,
            "key.line" : 1173,
            "key.modulename" : "main",
            "key.name" : "_output",
            "key.namelength" : 7,
            "key.nameoffset" : 35687,
            "key.offset" : 35683,
            "key.parsed_declaration" : "var _output = ccv_nnc_tensor_new(\n  nil,\n  toCTensorParams(kind, dataType: .Int32, format: format, shape: [1]),\n  0)",
            "key.parsed_scope.end" : 1173,
            "key.parsed_scope.start" : 1173,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main6TensorV5isNaNSbvg7_outputL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var _input: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_input<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 61,
            "key.line" : 1177,
            "key.modulename" : "main",
            "key.name" : "_input",
            "key.namelength" : 6,
            "key.nameoffset" : 35820,
            "key.offset" : 35816,
            "key.parsed_declaration" : "var _input: UnsafeMutablePointer<ccv_nnc_tensor_t>? = cTensor",
            "key.parsed_scope.end" : 1177,
            "key.parsed_scope.start" : 1177,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main6TensorV5isNaNSbvg6_inputL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var _cpu: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_cpu<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 127,
            "key.line" : 1185,
            "key.modulename" : "main",
            "key.name" : "_cpu",
            "key.namelength" : 4,
            "key.nameoffset" : 36173,
            "key.offset" : 36169,
            "key.parsed_declaration" : "var _cpu = ccv_nnc_tensor_new(\n  nil,\n  toCTensorParams(.CPU, dataType: dataType, format: format, shape: [1]),\n  0)",
            "key.parsed_scope.end" : 1185,
            "key.parsed_scope.start" : 1185,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main6TensorV5isNaNSbvg4_cpuL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let transfer: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>transfer<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 110,
            "key.line" : 1189,
            "key.modulename" : "main",
            "key.name" : "transfer",
            "key.namelength" : 8,
            "key.nameoffset" : 36305,
            "key.offset" : 36301,
            "key.parsed_declaration" : "let transfer = ccv_nnc_cmd(\n  CCV_NNC_DATA_TRANSFER_FORWARD, nil, CmdParamsFactory.factory.newParams(), 0)",
            "key.parsed_scope.end" : 1189,
            "key.parsed_scope.start" : 1189,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main6TensorV5isNaNSbvg8transferL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let pointer: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pointer<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 76,
            "key.line" : 1193,
            "key.modulename" : "main",
            "key.name" : "pointer",
            "key.namelength" : 7,
            "key.nameoffset" : 36532,
            "key.offset" : 36528,
            "key.parsed_declaration" : "let pointer = _cpu?.pointee.data.ptr.bindMemory(to: Int32.self, capacity: 1)",
            "key.parsed_scope.end" : 1193,
            "key.parsed_scope.start" : 1193,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main6TensorV5isNaNSbvg7pointerL0_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let isNaN: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>isNaN<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 23,
            "key.line" : 1194,
            "key.modulename" : "main",
            "key.name" : "isNaN",
            "key.namelength" : 5,
            "key.nameoffset" : 36613,
            "key.offset" : 36609,
            "key.parsed_declaration" : "let isNaN = pointer?[0]",
            "key.parsed_scope.end" : 1194,
            "key.parsed_scope.start" : 1194,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main6TensorV5isNaNSbvgADL0_Xevp"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 2472,
        "key.bodyoffset" : 36710,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 2491,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 36702,
        "key.offset" : 36692,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 1264,
        "key.parsed_scope.start" : 1200,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 36714
              }
            ],
            "key.bodylength" : 1711,
            "key.bodyoffset" : 36855,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>shape<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 1846,
            "key.line" : 1202,
            "key.modulename" : "main",
            "key.name" : "reshaped(format:shape:offset:strides:)",
            "key.namelength" : 119,
            "key.nameoffset" : 36726,
            "key.offset" : 36721,
            "key.parsed_declaration" : "public func reshaped(\n  format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil,\n  strides: TensorShape? = nil\n) -> Self",
            "key.parsed_scope.end" : 1245,
            "key.parsed_scope.start" : 1202,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV8reshaped_6offset7stridesACyxGAA0B11ShapeFormatO_AA0bF0VSgALtF\">reshaped(_:offset:strides:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let deviceKind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>deviceKind<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 26,
                "key.line" : 1206,
                "key.modulename" : "main",
                "key.name" : "deviceKind",
                "key.namelength" : 10,
                "key.nameoffset" : 36864,
                "key.offset" : 36860,
                "key.parsed_declaration" : "let deviceKind = self.kind",
                "key.parsed_scope.end" : 1206,
                "key.parsed_scope.start" : 1206,
                "key.reusingastcontext" : false,
                "key.typename" : "DeviceKind",
                "key.typeusr" : "$s4main10DeviceKindOD",
                "key.usr" : "s:4main6TensorV8reshaped6format5shape6offset7stridesACyxGAA0B6FormatO_AA0B5ShapeVAMSgANtF10deviceKindL_AA06DeviceK0Ovp"
              },
              {
                "key.annotated_decl" : "<Declaration>var cOffset: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cOffset<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 66,
                "key.line" : 1226,
                "key.modulename" : "main",
                "key.name" : "cOffset",
                "key.namelength" : 7,
                "key.nameoffset" : 37695,
                "key.offset" : 37691,
                "key.parsed_declaration" : "var cOffset = offset?.dims ?? (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)",
                "key.parsed_scope.end" : 1226,
                "key.parsed_scope.start" : 1226,
                "key.reusingastcontext" : false,
                "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
                "key.typeusr" : "$ss5Int32V_A11BtD",
                "key.usr" : "s:4main6TensorV8reshaped6format5shape6offset7stridesACyxGAA0B6FormatO_AA0B5ShapeVAMSgANtF7cOffsetL_s5Int32V_A11Qtvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var cStrides: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cStrides<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 27,
                "key.line" : 1227,
                "key.modulename" : "main",
                "key.name" : "cStrides",
                "key.namelength" : 8,
                "key.nameoffset" : 37766,
                "key.offset" : 37762,
                "key.parsed_declaration" : "var cStrides = strides.dims",
                "key.parsed_scope.end" : 1227,
                "key.parsed_scope.start" : 1227,
                "key.reusingastcontext" : false,
                "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
                "key.typeusr" : "$ss5Int32V_A11BtD",
                "key.usr" : "s:4main6TensorV8reshaped6format5shape6offset7stridesACyxGAA0B6FormatO_AA0B5ShapeVAMSgANtF8cStridesL_s5Int32V_A11Qtvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let newt: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>newt<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 604,
                "key.line" : 1228,
                "key.modulename" : "main",
                "key.name" : "newt",
                "key.namelength" : 4,
                "key.nameoffset" : 37798,
                "key.offset" : 37794,
                "key.parsed_declaration" : "let newt = withUnsafePointer(to: &cOffset) {\n  cOffset -> UnsafeMutablePointer<ccv_nnc_tensor_view_t> in\n  let cOffset = UnsafeRawPointer(cOffset).assumingMemoryBound(to: Int32.self)\n  return withUnsafePointer(to: &cStrides) {\n    cStrides -> UnsafeMutablePointer<ccv_nnc_tensor_view_t> in\n    let cStrides = UnsafeRawPointer(cStrides).assumingMemoryBound(to: Int32.self)\n    return ccv_nnc_tensor_view_new(\n      cTensor,\n      toCTensorParams(\n        deviceKind, dataType: Element.dataType, format: format, shape: shape), cOffset,\n      cStrides)!\n  }\n}",
                "key.parsed_scope.end" : 1228,
                "key.parsed_scope.start" : 1228,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV8reshaped6format5shape6offset7stridesACyxGAA0B6FormatO_AA0B5ShapeVAMSgANtF4newtL0_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>let anyTensor: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>anyTensor<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 133,
                "key.line" : 1241,
                "key.modulename" : "main",
                "key.name" : "anyTensor",
                "key.namelength" : 9,
                "key.nameoffset" : 38407,
                "key.offset" : 38403,
                "key.parsed_declaration" : "let anyTensor = newt.withMemoryRebound(to: ccv_nnc_tensor_t.self, capacity: 1) {\n  AnyTensorStorage($0, original: _storage)\n}",
                "key.parsed_scope.end" : 1241,
                "key.parsed_scope.start" : 1241,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV8reshaped6format5shape6offset7stridesACyxGAA0B6FormatO_AA0B5ShapeVAMSgANtF03anyB0L_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>) -> (TensorFormat, TensorShape, TensorShape?, TensorShape?) -> Tensor<Element>",
            "key.typeusr" : "$s6format5shape6offset7strides4main6TensorVyxGAE0F6FormatO_AE0F5ShapeVALSgAMtcD",
            "key.usr" : "s:4main6TensorV8reshaped6format5shape6offset7stridesACyxGAA0B6FormatO_AA0B5ShapeVAMSgANtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(_ shapeFormat: <Type usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 38926
              }
            ],
            "key.bodylength" : 124,
            "key.bodyoffset" : 39055,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : " Create a new tensor pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - shapeFormat: New format and shape for the tensor.\n   - offset: Whether offset on each shape.\n   - strides: The strides on each shape.\n - Returns: The new tensor with different format but the same memory content.",
            "key.doc.declaration" : "public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -> main.Tensor<Element>",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1256\" column=\"15\"><Name>reshaped(_:offset:strides:)<\/Name><USR>s:4main6TensorV8reshaped_6offset7stridesACyxGAA0B11ShapeFormatO_AA0bF0VSgALtF<\/USR><Declaration>public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; main.Tensor&lt;Element&gt;<\/Declaration><CommentParts><Abstract><Para>Create a new tensor pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>shapeFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and shape for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each shape.<\/Para><\/Discussion><\/Parameter><Parameter><Name>strides<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The strides on each shape.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensor with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 1256,
            "key.doc.name" : "reshaped(_:offset:strides:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and shape for the tensor."
                  }
                ],
                "name" : "shapeFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each shape."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The strides on each shape."
                  }
                ],
                "name" : "strides"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensor with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 352,
            "key.docoffset" : 38571,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>shapeFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 247,
            "key.line" : 1256,
            "key.modulename" : "main",
            "key.name" : "reshaped(_:offset:strides:)",
            "key.namelength" : 107,
            "key.nameoffset" : 38938,
            "key.offset" : 38933,
            "key.parsed_declaration" : "public func reshaped(\n  _ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil\n) -> Self",
            "key.parsed_scope.end" : 1262,
            "key.parsed_scope.start" : 1256,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV8reshaped6format5shape6offset7stridesACyxGAA0B6FormatO_AA0B5ShapeVAMSgANtF\">reshaped(format:shape:offset:strides:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>) -> (TensorShapeFormat, TensorShape?, TensorShape?) -> Tensor<Element>",
            "key.typeusr" : "$s_6offset7strides4main6TensorVyxGAC0D11ShapeFormatO_AC0dE0VSgAKtcD",
            "key.usr" : "s:4main6TensorV8reshaped_6offset7stridesACyxGAA0B11ShapeFormatO_AA0bF0VSgALtF"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 1603,
        "key.bodyoffset" : 39203,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1622,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 39195,
        "key.offset" : 39185,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 1308,
        "key.parsed_scope.start" : 1266,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func permuted(_ indices: <Type usr=\"s:Si\">Int<\/Type>...) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 39513
              }
            ],
            "key.bodylength" : 1242,
            "key.bodyoffset" : 39562,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : " Create a new tensor with dimensions permuted.\n\n - Parameters:\n   - indices: The indices for dimensions from the original tensor. For example, a [2, 3, 4] tensor with [2, 0, 1] indices will permute to a [4, 2, 3] tensor.\n - Returns: The new tensor with dimensions permuted.",
            "key.doc.declaration" : "public func permuted(_ indices: Int...) -> main.Tensor<Element>",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1275\" column=\"15\"><Name>permuted(_:)<\/Name><USR>s:4main6TensorV8permutedyACyxGSid_tF<\/USR><Declaration>public func permuted(_ indices: Int...) -&gt; main.Tensor&lt;Element&gt;<\/Declaration><CommentParts><Abstract><Para>Create a new tensor with dimensions permuted.<\/Para><\/Abstract><Parameters><Parameter><Name>indices<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The indices for dimensions from the original tensor. For example, a [2, 3, 4] tensor with [2, 0, 1] indices will permute to a [4, 2, 3] tensor.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensor with dimensions permuted.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 1275,
            "key.doc.name" : "permuted(_:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "The indices for dimensions from the original tensor. For example, a [2, 3, 4] tensor with [2, 0, 1] indices will permute to a [4, 2, 3] tensor."
                  }
                ],
                "name" : "indices"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensor with dimensions permuted."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 303,
            "key.docoffset" : 39207,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>permuted<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>indices<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct>...<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 1285,
            "key.line" : 1275,
            "key.modulename" : "main",
            "key.name" : "permuted(_:)",
            "key.namelength" : 27,
            "key.nameoffset" : 39525,
            "key.offset" : 39520,
            "key.parsed_declaration" : "public func permuted(_ indices: Int...) -> Self",
            "key.parsed_scope.end" : 1307,
            "key.parsed_scope.start" : 1275,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let deviceKind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>deviceKind<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 26,
                "key.line" : 1276,
                "key.modulename" : "main",
                "key.name" : "deviceKind",
                "key.namelength" : 10,
                "key.nameoffset" : 39571,
                "key.offset" : 39567,
                "key.parsed_declaration" : "let deviceKind = self.kind",
                "key.parsed_scope.end" : 1276,
                "key.parsed_scope.start" : 1276,
                "key.reusingastcontext" : false,
                "key.typename" : "DeviceKind",
                "key.typeusr" : "$s4main10DeviceKindOD",
                "key.usr" : "s:4main6TensorV8permutedyACyxGSid_tF10deviceKindL_AA06DeviceE0Ovp"
              },
              {
                "key.annotated_decl" : "<Declaration>let shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>shape<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 22,
                "key.line" : 1277,
                "key.modulename" : "main",
                "key.name" : "shape",
                "key.namelength" : 5,
                "key.nameoffset" : 39602,
                "key.offset" : 39598,
                "key.parsed_declaration" : "let shape = self.shape",
                "key.parsed_scope.end" : 1277,
                "key.parsed_scope.start" : 1277,
                "key.reusingastcontext" : false,
                "key.typename" : "TensorShape",
                "key.typeusr" : "$s4main11TensorShapeVD",
                "key.usr" : "s:4main6TensorV8permutedyACyxGSid_tF5shapeL_AA0B5ShapeVvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>strides<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 26,
                "key.line" : 1278,
                "key.modulename" : "main",
                "key.name" : "strides",
                "key.namelength" : 7,
                "key.nameoffset" : 39629,
                "key.offset" : 39625,
                "key.parsed_declaration" : "let strides = self.strides",
                "key.parsed_scope.end" : 1278,
                "key.parsed_scope.start" : 1278,
                "key.reusingastcontext" : false,
                "key.typename" : "TensorShape",
                "key.typeusr" : "$s4main11TensorShapeVD",
                "key.usr" : "s:4main6TensorV8permutedyACyxGSid_tF7stridesL_AA0B5ShapeVvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var newShape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>newShape<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 20,
                "key.line" : 1279,
                "key.modulename" : "main",
                "key.name" : "newShape",
                "key.namelength" : 8,
                "key.nameoffset" : 39660,
                "key.offset" : 39656,
                "key.parsed_declaration" : "var newShape = shape",
                "key.parsed_scope.end" : 1279,
                "key.parsed_scope.start" : 1279,
                "key.reusingastcontext" : false,
                "key.typename" : "TensorShape",
                "key.typeusr" : "$s4main11TensorShapeVD",
                "key.usr" : "s:4main6TensorV8permutedyACyxGSid_tF8newShapeL_AA0bE0Vvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var newStrides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>newStrides<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 24,
                "key.line" : 1280,
                "key.modulename" : "main",
                "key.name" : "newStrides",
                "key.namelength" : 10,
                "key.nameoffset" : 39685,
                "key.offset" : 39681,
                "key.parsed_declaration" : "var newStrides = strides",
                "key.parsed_scope.end" : 1280,
                "key.parsed_scope.start" : 1280,
                "key.reusingastcontext" : false,
                "key.typename" : "TensorShape",
                "key.typeusr" : "$s4main11TensorShapeVD",
                "key.usr" : "s:4main6TensorV8permutedyACyxGSid_tF10newStridesL_AA0B5ShapeVvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var cOffset: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cOffset<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 158,
                "key.line" : 1285,
                "key.modulename" : "main",
                "key.name" : "cOffset",
                "key.namelength" : 7,
                "key.nameoffset" : 39835,
                "key.offset" : 39831,
                "key.parsed_declaration" : "var cOffset:\n  (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32) = (\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n  )",
                "key.parsed_scope.end" : 1285,
                "key.parsed_scope.start" : 1285,
                "key.reusingastcontext" : false,
                "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
                "key.typeusr" : "$ss5Int32V_A11BtD",
                "key.usr" : "s:4main6TensorV8permutedyACyxGSid_tF7cOffsetL_s5Int32V_A11Htvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var cStrides: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cStrides<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 30,
                "key.line" : 1289,
                "key.modulename" : "main",
                "key.name" : "cStrides",
                "key.namelength" : 8,
                "key.nameoffset" : 39998,
                "key.offset" : 39994,
                "key.parsed_declaration" : "var cStrides = newStrides.dims",
                "key.parsed_scope.end" : 1289,
                "key.parsed_scope.start" : 1289,
                "key.reusingastcontext" : false,
                "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
                "key.typeusr" : "$ss5Int32V_A11BtD",
                "key.usr" : "s:4main6TensorV8permutedyACyxGSid_tF8cStridesL_s5Int32V_A11Htvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let newt: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>newt<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 607,
                "key.line" : 1290,
                "key.modulename" : "main",
                "key.name" : "newt",
                "key.namelength" : 4,
                "key.nameoffset" : 40033,
                "key.offset" : 40029,
                "key.parsed_declaration" : "let newt = withUnsafePointer(to: &cOffset) {\n  cOffset -> UnsafeMutablePointer<ccv_nnc_tensor_view_t> in\n  let cOffset = UnsafeRawPointer(cOffset).assumingMemoryBound(to: Int32.self)\n  return withUnsafePointer(to: &cStrides) {\n    cStrides -> UnsafeMutablePointer<ccv_nnc_tensor_view_t> in\n    let cStrides = UnsafeRawPointer(cStrides).assumingMemoryBound(to: Int32.self)\n    return ccv_nnc_tensor_view_new(\n      cTensor,\n      toCTensorParams(\n        deviceKind, dataType: Element.dataType, format: format, shape: newShape), cOffset,\n      cStrides)!\n  }\n}",
                "key.parsed_scope.end" : 1290,
                "key.parsed_scope.start" : 1290,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV8permutedyACyxGSid_tF4newtL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>let anyTensor: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>anyTensor<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 133,
                "key.line" : 1303,
                "key.modulename" : "main",
                "key.name" : "anyTensor",
                "key.namelength" : 9,
                "key.nameoffset" : 40645,
                "key.offset" : 40641,
                "key.parsed_declaration" : "let anyTensor = newt.withMemoryRebound(to: ccv_nnc_tensor_t.self, capacity: 1) {\n  AnyTensorStorage($0, original: _storage)\n}",
                "key.parsed_scope.end" : 1303,
                "key.parsed_scope.start" : 1303,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV8permutedyACyxGSid_tF03anyB0L_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>) -> (Int...) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSid_tcD",
            "key.usr" : "s:4main6TensorV8permutedyACyxGSid_tF"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection&lt;<Type usr=\"s:Sl7ElementQa\">Element<\/Type>&gt; : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.bodylength" : 833,
        "key.bodyoffset" : 40864,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "protocol Collection<Element> : Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection&lt;Element&gt; : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name>&lt;<decl.generic_type_param usr=\"s:Sl7ElementQa\"><ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 889,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 40819,
        "key.offset" : 40809,
        "key.parsed_declaration" : "extension Collection where Element == Tensor<Float64>",
        "key.parsed_scope.end" : 1333,
        "key.parsed_scope.start" : 1310,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 40867
              }
            ],
            "key.bodylength" : 108,
            "key.bodyoffset" : 41013,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>shape<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 248,
            "key.line" : 1311,
            "key.modulename" : "main",
            "key.name" : "reshaped(format:shape:offset:strides:)",
            "key.namelength" : 119,
            "key.nameoffset" : 40879,
            "key.offset" : 40874,
            "key.parsed_declaration" : "public func reshaped(\n  format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil,\n  strides: TensorShape? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 1318,
            "key.parsed_scope.start" : 1311,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Double>> (Self) -> (TensorFormat, TensorShape, TensorShape?, TensorShape?) -> [Self.Element]",
            "key.typeusr" : "$s6format5shape6offset7stridesSay4main6TensorVySdGGAE0F6FormatO_AE0F5ShapeVAMSgANtcD",
            "key.usr" : "s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(_ shapeFormat: <Type usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 41480
              }
            ],
            "key.bodylength" : 81,
            "key.bodyoffset" : 41614,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : " Create new tensors pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - shapeFormat: New format and shape for the tensor.\n   - offset: Whether offset on each shape.\n   - strides: The strides on each shape.\n - Returns: The new tensors with different format but the same memory content.",
            "key.doc.declaration" : "public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -> [Element]",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1328\" column=\"15\"><Name>reshaped(_:offset:strides:)<\/Name><USR>s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF<\/USR><Declaration>public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/Declaration><CommentParts><Abstract><Para>Create new tensors pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>shapeFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and shape for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each shape.<\/Para><\/Discussion><\/Parameter><Parameter><Name>strides<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The strides on each shape.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensors with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 1328,
            "key.doc.name" : "reshaped(_:offset:strides:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and shape for the tensor."
                  }
                ],
                "name" : "shapeFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each shape."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The strides on each shape."
                  }
                ],
                "name" : "strides"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensors with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 352,
            "key.docoffset" : 41125,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>shapeFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 209,
            "key.line" : 1328,
            "key.modulename" : "main",
            "key.name" : "reshaped(_:offset:strides:)",
            "key.namelength" : 107,
            "key.nameoffset" : 41492,
            "key.offset" : 41487,
            "key.parsed_declaration" : "public func reshaped(\n  _ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 1332,
            "key.parsed_scope.start" : 1328,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Double>> (Self) -> (TensorShapeFormat, TensorShape?, TensorShape?) -> [Self.Element]",
            "key.typeusr" : "$s_6offset7stridesSay4main6TensorVySdGGAC0D11ShapeFormatO_AC0dE0VSgALtcD",
            "key.usr" : "s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF"
          }
        ],
        "key.typename" : "Collection.Type",
        "key.typeusr" : "$sSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection&lt;<Type usr=\"s:Sl7ElementQa\">Element<\/Type>&gt; : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.bodylength" : 833,
        "key.bodyoffset" : 41753,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "protocol Collection<Element> : Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection&lt;Element&gt; : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name>&lt;<decl.generic_type_param usr=\"s:Sl7ElementQa\"><ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 887,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 41710,
        "key.offset" : 41700,
        "key.parsed_declaration" : "extension Collection where Element == Tensor<Int64>",
        "key.parsed_scope.end" : 1358,
        "key.parsed_scope.start" : 1335,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 41756
              }
            ],
            "key.bodylength" : 108,
            "key.bodyoffset" : 41902,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>shape<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 248,
            "key.line" : 1336,
            "key.modulename" : "main",
            "key.name" : "reshaped(format:shape:offset:strides:)",
            "key.namelength" : 119,
            "key.nameoffset" : 41768,
            "key.offset" : 41763,
            "key.parsed_declaration" : "public func reshaped(\n  format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil,\n  strides: TensorShape? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 1343,
            "key.parsed_scope.start" : 1336,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Int64>> (Self) -> (TensorFormat, TensorShape, TensorShape?, TensorShape?) -> [Self.Element]",
            "key.typeusr" : "$s6format5shape6offset7stridesSay4main6TensorVys5Int64VGGAE0F6FormatO_AE0F5ShapeVAOSgAPtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(_ shapeFormat: <Type usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 42369
              }
            ],
            "key.bodylength" : 81,
            "key.bodyoffset" : 42503,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : " Create new tensors pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - shapeFormat: New format and shape for the tensor.\n   - offset: Whether offset on each shape.\n   - strides: The strides on each shape.\n - Returns: The new tensors with different format but the same memory content.",
            "key.doc.declaration" : "public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -> [Element]",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1353\" column=\"15\"><Name>reshaped(_:offset:strides:)<\/Name><USR>s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF<\/USR><Declaration>public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/Declaration><CommentParts><Abstract><Para>Create new tensors pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>shapeFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and shape for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each shape.<\/Para><\/Discussion><\/Parameter><Parameter><Name>strides<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The strides on each shape.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensors with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 1353,
            "key.doc.name" : "reshaped(_:offset:strides:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and shape for the tensor."
                  }
                ],
                "name" : "shapeFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each shape."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The strides on each shape."
                  }
                ],
                "name" : "strides"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensors with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 352,
            "key.docoffset" : 42014,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>shapeFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 209,
            "key.line" : 1353,
            "key.modulename" : "main",
            "key.name" : "reshaped(_:offset:strides:)",
            "key.namelength" : 107,
            "key.nameoffset" : 42381,
            "key.offset" : 42376,
            "key.parsed_declaration" : "public func reshaped(\n  _ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 1357,
            "key.parsed_scope.start" : 1353,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Int64>> (Self) -> (TensorShapeFormat, TensorShape?, TensorShape?) -> [Self.Element]",
            "key.typeusr" : "$s_6offset7stridesSay4main6TensorVys5Int64VGGAC0D11ShapeFormatO_AC0dF0VSgANtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF"
          }
        ],
        "key.typename" : "Collection.Type",
        "key.typeusr" : "$sSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection&lt;<Type usr=\"s:Sl7ElementQa\">Element<\/Type>&gt; : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.bodylength" : 837,
        "key.bodyoffset" : 42644,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "protocol Collection<Element> : Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection&lt;Element&gt; : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name>&lt;<decl.generic_type_param usr=\"s:Sl7ElementQa\"><ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 893,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 42599,
        "key.offset" : 42589,
        "key.parsed_declaration" : "extension Collection where Element == Tensor<Float32>",
        "key.parsed_scope.end" : 1383,
        "key.parsed_scope.start" : 1360,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 42647
              }
            ],
            "key.bodylength" : 108,
            "key.bodyoffset" : 42793,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>shape<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 248,
            "key.line" : 1361,
            "key.modulename" : "main",
            "key.name" : "reshaped(format:shape:offset:strides:)",
            "key.namelength" : 119,
            "key.nameoffset" : 42659,
            "key.offset" : 42654,
            "key.parsed_declaration" : "public func reshaped(\n  format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil,\n  strides: TensorShape? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 1368,
            "key.parsed_scope.start" : 1361,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Float>> (Self) -> (TensorFormat, TensorShape, TensorShape?, TensorShape?) -> [Self.Element]",
            "key.typeusr" : "$s6format5shape6offset7stridesSay4main6TensorVySfGGAE0F6FormatO_AE0F5ShapeVAMSgANtcD",
            "key.usr" : "s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(_ shapeFormat: <Type usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 43264
              }
            ],
            "key.bodylength" : 81,
            "key.bodyoffset" : 43398,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : " Create new tensors pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - dimensionFormat: New format and shape for the tensor.\n   - offset: Whether offset on each shape.\n   - strides: The strides on each shape.\n - Returns: The new tensors with different format but the same memory content.",
            "key.doc.declaration" : "public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -> [Element]",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1378\" column=\"15\"><Name>reshaped(_:offset:strides:)<\/Name><USR>s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF<\/USR><Declaration>public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/Declaration><CommentParts><Abstract><Para>Create new tensors pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>dimensionFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and shape for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each shape.<\/Para><\/Discussion><\/Parameter><Parameter><Name>strides<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The strides on each shape.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensors with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 1378,
            "key.doc.name" : "reshaped(_:offset:strides:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and shape for the tensor."
                  }
                ],
                "name" : "dimensionFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each shape."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The strides on each shape."
                  }
                ],
                "name" : "strides"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensors with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 356,
            "key.docoffset" : 42905,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>shapeFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 209,
            "key.line" : 1378,
            "key.modulename" : "main",
            "key.name" : "reshaped(_:offset:strides:)",
            "key.namelength" : 107,
            "key.nameoffset" : 43276,
            "key.offset" : 43271,
            "key.parsed_declaration" : "public func reshaped(\n  _ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 1382,
            "key.parsed_scope.start" : 1378,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Float>> (Self) -> (TensorShapeFormat, TensorShape?, TensorShape?) -> [Self.Element]",
            "key.typeusr" : "$s_6offset7stridesSay4main6TensorVySfGGAC0D11ShapeFormatO_AC0dE0VSgALtcD",
            "key.usr" : "s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF"
          }
        ],
        "key.typename" : "Collection.Type",
        "key.typeusr" : "$sSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection&lt;<Type usr=\"s:Sl7ElementQa\">Element<\/Type>&gt; : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.bodylength" : 833,
        "key.bodyoffset" : 43537,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "protocol Collection<Element> : Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection&lt;Element&gt; : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name>&lt;<decl.generic_type_param usr=\"s:Sl7ElementQa\"><ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 887,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 43494,
        "key.offset" : 43484,
        "key.parsed_declaration" : "extension Collection where Element == Tensor<Int32>",
        "key.parsed_scope.end" : 1408,
        "key.parsed_scope.start" : 1385,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 43540
              }
            ],
            "key.bodylength" : 108,
            "key.bodyoffset" : 43686,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>shape<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 248,
            "key.line" : 1386,
            "key.modulename" : "main",
            "key.name" : "reshaped(format:shape:offset:strides:)",
            "key.namelength" : 119,
            "key.nameoffset" : 43552,
            "key.offset" : 43547,
            "key.parsed_declaration" : "public func reshaped(\n  format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil,\n  strides: TensorShape? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 1393,
            "key.parsed_scope.start" : 1386,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Int32>> (Self) -> (TensorFormat, TensorShape, TensorShape?, TensorShape?) -> [Self.Element]",
            "key.typeusr" : "$s6format5shape6offset7stridesSay4main6TensorVys5Int32VGGAE0F6FormatO_AE0F5ShapeVAOSgAPtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(_ shapeFormat: <Type usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 44153
              }
            ],
            "key.bodylength" : 81,
            "key.bodyoffset" : 44287,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : " Create new tensors pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - shapeFormat: New format and shape for the tensor.\n   - offset: Whether offset on each shape.\n   - strides: The strides on each shape.\n - Returns: The new tensors with different format but the same memory content.",
            "key.doc.declaration" : "public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -> [Element]",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1403\" column=\"15\"><Name>reshaped(_:offset:strides:)<\/Name><USR>s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF<\/USR><Declaration>public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/Declaration><CommentParts><Abstract><Para>Create new tensors pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>shapeFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and shape for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each shape.<\/Para><\/Discussion><\/Parameter><Parameter><Name>strides<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The strides on each shape.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensors with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 1403,
            "key.doc.name" : "reshaped(_:offset:strides:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and shape for the tensor."
                  }
                ],
                "name" : "shapeFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each shape."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The strides on each shape."
                  }
                ],
                "name" : "strides"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensors with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 352,
            "key.docoffset" : 43798,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>shapeFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 209,
            "key.line" : 1403,
            "key.modulename" : "main",
            "key.name" : "reshaped(_:offset:strides:)",
            "key.namelength" : 107,
            "key.nameoffset" : 44165,
            "key.offset" : 44160,
            "key.parsed_declaration" : "public func reshaped(\n  _ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 1407,
            "key.parsed_scope.start" : 1403,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Int32>> (Self) -> (TensorShapeFormat, TensorShape?, TensorShape?) -> [Self.Element]",
            "key.typeusr" : "$s_6offset7stridesSay4main6TensorVys5Int32VGGAC0D11ShapeFormatO_AC0dF0VSgANtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF"
          }
        ],
        "key.typename" : "Collection.Type",
        "key.typeusr" : "$sSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection&lt;<Type usr=\"s:Sl7ElementQa\">Element<\/Type>&gt; : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.bodylength" : 863,
        "key.bodyoffset" : 44528,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "protocol Collection<Element> : Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection&lt;Element&gt; : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name>&lt;<decl.generic_type_param usr=\"s:Sl7ElementQa\"><ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 919,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 44483,
        "key.offset" : 44473,
        "key.parsed_declaration" : "extension Collection where Element == Tensor<Float16>",
        "key.parsed_scope.end" : 1434,
        "key.parsed_scope.start" : 1411,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 44533
              }
            ],
            "key.bodylength" : 116,
            "key.bodyoffset" : 44685,
            "key.column" : 17,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>shape<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 262,
            "key.line" : 1412,
            "key.modulename" : "main",
            "key.name" : "reshaped(format:shape:offset:strides:)",
            "key.namelength" : 125,
            "key.nameoffset" : 44545,
            "key.offset" : 44540,
            "key.parsed_declaration" : "public func reshaped(\n  format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil,\n  strides: TensorShape? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 1419,
            "key.parsed_scope.start" : 1412,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Float16>> (Self) -> (TensorFormat, TensorShape, TensorShape?, TensorShape?) -> [Self.Element]",
            "key.typeusr" : "$s6format5shape6offset7stridesSay4main6TensorVys7Float16VGGAE0F6FormatO_AE0F5ShapeVAOSgAPtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(_ shapeFormat: <Type usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 45164
              }
            ],
            "key.bodylength" : 85,
            "key.bodyoffset" : 45302,
            "key.column" : 17,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 17,
            "key.doc.comment" : " Create new tensors pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - shapeFormat: New format and shape for the tensor.\n   - offset: Whether offset on each shape.\n   - strides: The strides on each shape.\n - Returns: The new tensors with different format but the same memory content.",
            "key.doc.declaration" : "public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -> [Element]",
            "key.doc.discussion" : [
              {
                "List-Bullet" : ""
              }
            ],
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1429\" column=\"17\"><Name>reshaped(_:offset:strides:)<\/Name><USR>s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF<\/USR><Declaration>public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/Declaration><CommentParts><Discussion><List-Bullet><Item><Para>Create new tensors pointing to the same memory region but with different sizes.<\/Para><\/Item><Item><\/Item><Item><List-Bullet><Item><Para>Parameters:<\/Para><\/Item><\/List-Bullet><\/Item><Item><List-Bullet><Item><Para>shapeFormat: New format and shape for the tensor.<\/Para><\/Item><\/List-Bullet><\/Item><Item><List-Bullet><Item><Para>offset: Whether offset on each shape.<\/Para><\/Item><\/List-Bullet><\/Item><Item><List-Bullet><Item><Para>strides: The strides on each shape.<\/Para><\/Item><\/List-Bullet><\/Item><Item><List-Bullet><Item><Para>Returns: The new tensors with different format but the same memory content.<\/Para><\/Item><\/List-Bullet><\/Item><\/List-Bullet><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 1429,
            "key.doc.name" : "reshaped(_:offset:strides:)",
            "key.doc.type" : "Function",
            "key.doclength" : 352,
            "key.docoffset" : 44807,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>shapeFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 217,
            "key.line" : 1429,
            "key.modulename" : "main",
            "key.name" : "reshaped(_:offset:strides:)",
            "key.namelength" : 111,
            "key.nameoffset" : 45176,
            "key.offset" : 45171,
            "key.parsed_declaration" : "public func reshaped(\n  _ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 1433,
            "key.parsed_scope.start" : 1429,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Float16>> (Self) -> (TensorShapeFormat, TensorShape?, TensorShape?) -> [Self.Element]",
            "key.typeusr" : "$s_6offset7stridesSay4main6TensorVys7Float16VGGAC0D11ShapeFormatO_AC0dF0VSgANtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF"
          }
        ],
        "key.typename" : "Collection.Type",
        "key.typeusr" : "$sSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection&lt;<Type usr=\"s:Sl7ElementQa\">Element<\/Type>&gt; : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.bodylength" : 833,
        "key.bodyoffset" : 45454,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.declaration" : "protocol Collection<Element> : Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection&lt;Element&gt; : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name>&lt;<decl.generic_type_param usr=\"s:Sl7ElementQa\"><ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 887,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 45411,
        "key.offset" : 45401,
        "key.parsed_declaration" : "extension Collection where Element == Tensor<UInt8>",
        "key.parsed_scope.end" : 1460,
        "key.parsed_scope.start" : 1437,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 45457
              }
            ],
            "key.bodylength" : 108,
            "key.bodyoffset" : 45603,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>shape<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 248,
            "key.line" : 1438,
            "key.modulename" : "main",
            "key.name" : "reshaped(format:shape:offset:strides:)",
            "key.namelength" : 119,
            "key.nameoffset" : 45469,
            "key.offset" : 45464,
            "key.parsed_declaration" : "public func reshaped(\n  format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil,\n  strides: TensorShape? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 1445,
            "key.parsed_scope.start" : 1438,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<UInt8>> (Self) -> (TensorFormat, TensorShape, TensorShape?, TensorShape?) -> [Self.Element]",
            "key.typeusr" : "$s6format5shape6offset7stridesSay4main6TensorVys5UInt8VGGAE0F6FormatO_AE0F5ShapeVAOSgAPtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshaped(_ shapeFormat: <Type usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/Type>, offset: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil, strides: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 46070
              }
            ],
            "key.bodylength" : 81,
            "key.bodyoffset" : 46204,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.column" : 15,
            "key.doc.comment" : " Create new tensors pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - shapeFormat: New format and shape for the tensor.\n   - offset: Whether offset on each shape.\n   - strides: The strides on each shape.\n - Returns: The new tensors with different format but the same memory content.",
            "key.doc.declaration" : "public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -> [Element]",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"1455\" column=\"15\"><Name>reshaped(_:offset:strides:)<\/Name><USR>s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF<\/USR><Declaration>public func reshaped(_ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/Declaration><CommentParts><Abstract><Para>Create new tensors pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>shapeFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and shape for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each shape.<\/Para><\/Discussion><\/Parameter><Parameter><Name>strides<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The strides on each shape.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensors with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 1455,
            "key.doc.name" : "reshaped(_:offset:strides:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and shape for the tensor."
                  }
                ],
                "name" : "shapeFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each shape."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The strides on each shape."
                  }
                ],
                "name" : "strides"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensors with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 352,
            "key.docoffset" : 45715,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshaped<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>shapeFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main17TensorShapeFormatO\">TensorShapeFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>strides<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 209,
            "key.line" : 1455,
            "key.modulename" : "main",
            "key.name" : "reshaped(_:offset:strides:)",
            "key.namelength" : 107,
            "key.nameoffset" : 46082,
            "key.offset" : 46077,
            "key.parsed_declaration" : "public func reshaped(\n  _ shapeFormat: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 1459,
            "key.parsed_scope.start" : 1455,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayADGAA0B6FormatO_AA0B5ShapeVAPSgAQtF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE8reshaped_6offset7stridesSayADGAA0B11ShapeFormatO_AA0bG0VSgAOtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF\">reshaped(_: TensorShapeFormat, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped6format5shape6offset7stridesSayAFGAA0B6FormatO_AA0B5ShapeVARSgAStF\">reshaped(format: TensorFormat, shape: TensorShape, offset: TensorShape? = nil, strides: TensorShape? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<UInt8>> (Self) -> (TensorShapeFormat, TensorShape?, TensorShape?) -> [Self.Element]",
            "key.typeusr" : "$s_6offset7stridesSay4main6TensorVys5UInt8VGGAC0D11ShapeFormatO_AC0dF0VSgANtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE8reshaped_6offset7stridesSayAFGAA0B11ShapeFormatO_AA0bH0VSgAQtF"
          }
        ],
        "key.typename" : "Collection.Type",
        "key.typeusr" : "$sSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>public final class AnyTensorStorage<\/Declaration>",
        "key.bodylength" : 2213,
        "key.bodyoffset" : 46318,
        "key.column" : 20,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>AnyTensorStorage<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 2242,
        "key.line" : 438,
        "key.modulename" : "main",
        "key.name" : "AnyTensorStorage",
        "key.namelength" : 16,
        "key.nameoffset" : 46300,
        "key.offset" : 46290,
        "key.parsed_declaration" : "extension AnyTensorStorage",
        "key.parsed_scope.end" : 1534,
        "key.parsed_scope.start" : 1462,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.bodylength" : 373,
            "key.bodyoffset" : 46456,
            "key.internal_diagnostic" : "Unable to resolve cursor info.",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 407,
            "key.name" : "toAnyTensor()",
            "key.namelength" : 13,
            "key.nameoffset" : 46428,
            "key.offset" : 46423,
            "key.substructure" : [

            ],
            "key.typename" : "AnyTensor"
          },
          {
            "key.bodylength" : 571,
            "key.bodyoffset" : 46893,
            "key.internal_diagnostic" : "Unable to resolve cursor info.",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 629,
            "key.name" : "toTensor(_:)",
            "key.namelength" : 39,
            "key.nameoffset" : 46841,
            "key.offset" : 46836,
            "key.substructure" : [
              {
                "key.internal_diagnostic" : "Unable to resolve cursor info.",
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 7,
                "key.name" : "Element",
                "key.namelength" : 7,
                "key.nameoffset" : 46850,
                "key.offset" : 46850
              }
            ],
            "key.typename" : "Element"
          },
          {
            "key.annotated_decl" : "<Declaration>func toAnyTensor() -&gt; <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type><\/Declaration>",
            "key.bodylength" : 373,
            "key.bodyoffset" : 47511,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toAnyTensor<\/decl.name>() -&gt; <decl.function.returntype><ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 407,
            "key.line" : 1499,
            "key.modulename" : "main",
            "key.name" : "toAnyTensor()",
            "key.namelength" : 13,
            "key.nameoffset" : 47483,
            "key.offset" : 47478,
            "key.parsed_declaration" : "func toAnyTensor() -> AnyTensor",
            "key.parsed_scope.end" : 1514,
            "key.parsed_scope.start" : 1499,
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "(AnyTensorStorage) -> () -> any AnyTensor",
            "key.typeusr" : "$s4main9AnyTensor_pycD",
            "key.usr" : "s:4main16AnyTensorStorageC02tobC0AA0bC0_pyF"
          },
          {
            "key.annotated_decl" : "<Declaration>func toTensor&lt;Element&gt;(_ type: <Type usr=\"s:4main16AnyTensorStorageC02toC0yxxmlF7ElementL_xmfp\">Element<\/Type>.Type) -&gt; <Type usr=\"s:4main16AnyTensorStorageC02toC0yxxmlF7ElementL_xmfp\">Element<\/Type><\/Declaration>",
            "key.bodylength" : 571,
            "key.bodyoffset" : 47948,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toTensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main16AnyTensorStorageC02toC0yxxmlF7ElementL_xmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>type<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main16AnyTensorStorageC02toC0yxxmlF7ElementL_xmfp\">Element<\/ref.generic_type_param>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main16AnyTensorStorageC02toC0yxxmlF7ElementL_xmfp\">Element<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 629,
            "key.line" : 1516,
            "key.modulename" : "main",
            "key.name" : "toTensor(_:)",
            "key.namelength" : 39,
            "key.nameoffset" : 47896,
            "key.offset" : 47891,
            "key.parsed_declaration" : "func toTensor<Element>(_ type: Element.Type) -> Element",
            "key.parsed_scope.end" : 1531,
            "key.parsed_scope.start" : 1516,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>Element<\/Declaration>",
                "key.column" : 19,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>",
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 7,
                "key.line" : 1516,
                "key.modulename" : "main",
                "key.name" : "Element",
                "key.namelength" : 7,
                "key.nameoffset" : 47905,
                "key.offset" : 47905,
                "key.parsed_declaration" : "func toTensor<Element",
                "key.parsed_scope.end" : 1516,
                "key.parsed_scope.start" : 1516,
                "key.reusingastcontext" : false,
                "key.typename" : "Element.Type",
                "key.typeusr" : "$sxmD",
                "key.usr" : "s:4main16AnyTensorStorageC02toC0yxxmlF7ElementL_xmfp"
              }
            ],
            "key.typename" : "<Element> (AnyTensorStorage) -> (Element.Type) -> Element",
            "key.typeusr" : "$syxxmcluD",
            "key.usr" : "s:4main16AnyTensorStorageC02toC0yxxmlF"
          }
        ],
        "key.typename" : "AnyTensorStorage.Type",
        "key.typeusr" : "$s4main16AnyTensorStorageCmD",
        "key.usr" : "s:4main16AnyTensorStorageC"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 153,
        "key.bodyoffset" : 48577,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 23,
            "key.offset" : 48552
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "CustomStringConvertible"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 197,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 48544,
        "key.offset" : 48534,
        "key.parsed_declaration" : "extension Tensor: CustomStringConvertible",
        "key.parsed_scope.end" : 1541,
        "key.parsed_scope.start" : 1536,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var description: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 48580
              }
            ],
            "key.bodylength" : 116,
            "key.bodyoffset" : 48612,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "var description: String { get }",
            "key.doc.discussion" : [
              {
                "Para" : "Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the `String(describing:)` initializer. This initializer works with any type, and uses the custom `description` property for types that conform to `CustomStringConvertible`:"
              },
              {
                "CodeListing" : ""
              },
              {
                "Para" : "The conversion of `p` to a string in the assignment to `s` uses the `Point` type’s `description` property."
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>description<\/Name><USR>s:s23CustomStringConvertibleP11descriptionSSvp<\/USR><Declaration>var description: String { get }<\/Declaration><CommentParts><Abstract><Para>A textual representation of this instance.<\/Para><\/Abstract><Discussion><Para>Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the <codeVoice>String(describing:)<\/codeVoice> initializer. This initializer works with any type, and uses the custom <codeVoice>description<\/codeVoice> property for types that conform to <codeVoice>CustomStringConvertible<\/codeVoice>:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct Point: CustomStringConvertible {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    let x: Int, y: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var description: String {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        return \"(\\(x), \\(y))\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let p = Point(x: 21, y: 30)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let s = String(describing: p)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(s)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"(21, 30)\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The conversion of <codeVoice>p<\/codeVoice> to a string in the assignment to <codeVoice>s<\/codeVoice> uses the <codeVoice>Point<\/codeVoice> type’s <codeVoice>description<\/codeVoice> property.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>CustomStringConvertible<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "description",
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>description<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 142,
            "key.line" : 1537,
            "key.modulename" : "main",
            "key.name" : "description",
            "key.namelength" : 11,
            "key.nameoffset" : 48591,
            "key.offset" : 48587,
            "key.overrides" : [
              {
                "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSvp"
              }
            ],
            "key.parsed_declaration" : "public var description: String",
            "key.parsed_scope.end" : 1540,
            "key.parsed_scope.start" : 1537,
            "key.reusingastcontext" : false,
            "key.typename" : "String",
            "key.typeusr" : "$sSSD",
            "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSvp"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>@inlinable func toCDimensions(_ dimensions: [<Type usr=\"s:Si\">Int<\/Type>]?) -&gt; (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.inlinable",
            "key.length" : 10,
            "key.offset" : 48733
          }
        ],
        "key.bodylength" : 2627,
        "key.bodyoffset" : 48878,
        "key.column" : 6,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toCDimensions<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensions<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 2762,
        "key.line" : 1544,
        "key.modulename" : "main",
        "key.name" : "toCDimensions(_:)",
        "key.namelength" : 35,
        "key.nameoffset" : 48749,
        "key.offset" : 48744,
        "key.parsed_declaration" : "func toCDimensions(_ dimensions: [Int]?) -> (\n  Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32\n)",
        "key.parsed_scope.end" : 1613,
        "key.parsed_scope.start" : 1544,
        "key.reusingastcontext" : false,
        "key.substructure" : [

        ],
        "key.typename" : "([Int]?) -> (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
        "key.typeusr" : "$sys5Int32V_A11BtSaySiGSgcD",
        "key.usr" : "s:4main13toCDimensionsys5Int32V_A11DtSaySiGSgF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>@inlinable func toCDimensionsArray(_ dimensions: [<Type usr=\"s:Si\">Int<\/Type>]?) -&gt; [<Type usr=\"s:s5Int32V\">Int32<\/Type>]<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.inlinable",
            "key.length" : 10,
            "key.offset" : 51508
          }
        ],
        "key.bodylength" : 2625,
        "key.bodyoffset" : 51577,
        "key.column" : 6,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toCDimensionsArray<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensions<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>]<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 2684,
        "key.line" : 1616,
        "key.modulename" : "main",
        "key.name" : "toCDimensionsArray(_:)",
        "key.namelength" : 40,
        "key.nameoffset" : 51524,
        "key.offset" : 51519,
        "key.parsed_declaration" : "func toCDimensionsArray(_ dimensions: [Int]?) -> [Int32]",
        "key.parsed_scope.end" : 1683,
        "key.parsed_scope.start" : 1616,
        "key.reusingastcontext" : false,
        "key.substructure" : [

        ],
        "key.typename" : "([Int]?) -> [Int32]",
        "key.typeusr" : "$sySays5Int32VGSaySiGSgcD",
        "key.usr" : "s:4main18toCDimensionsArrayySays5Int32VGSaySiGSgF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>@inlinable func fromCDimensions(_ dim: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)) -&gt; [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.inlinable",
            "key.length" : 10,
            "key.offset" : 54205
          }
        ],
        "key.bodylength" : 1503,
        "key.bodyoffset" : 54344,
        "key.column" : 6,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>fromCDimensions<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dim<\/decl.var.parameter.name>: <decl.var.parameter.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 1632,
        "key.line" : 1686,
        "key.modulename" : "main",
        "key.name" : "fromCDimensions(_:)",
        "key.namelength" : 112,
        "key.nameoffset" : 54221,
        "key.offset" : 54216,
        "key.parsed_declaration" : "func fromCDimensions(\n  _ dim: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n) -> [Int]",
        "key.parsed_scope.end" : 1731,
        "key.parsed_scope.start" : 1686,
        "key.reusingastcontext" : false,
        "key.substructure" : [

        ],
        "key.typename" : "((Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)) -> [Int]",
        "key.typeusr" : "$sySaySiGs5Int32V_A11Ct_tcD",
        "key.usr" : "s:4main15fromCDimensionsySaySiGs5Int32V_A11Et_tF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>@inlinable func toCTensorParams(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type>, format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>]) -&gt; ccv_nnc_tensor_param_t<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.inlinable",
            "key.length" : 10,
            "key.offset" : 55850
          }
        ],
        "key.bodylength" : 185,
        "key.bodyoffset" : 55994,
        "key.column" : 6,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toCTensorParams<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dataType<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>ccv_nnc_tensor_param_t<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 319,
        "key.line" : 1734,
        "key.modulename" : "main",
        "key.name" : "toCTensorParams(_:dataType:format:dimensions:)",
        "key.namelength" : 100,
        "key.nameoffset" : 55866,
        "key.offset" : 55861,
        "key.parsed_declaration" : "func toCTensorParams(\n  _ kind: DeviceKind, dataType: DataType, format: TensorFormat, dimensions: [Int]\n) -> ccv_nnc_tensor_param_t",
        "key.parsed_scope.end" : 1743,
        "key.parsed_scope.start" : 1734,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4main15toCTensorParamsyXeXeF\">toCTensorParams(_:dataType:format:shape:)<\/RelatedName>"
          }
        ],
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>var params: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>params<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 37,
            "key.line" : 1737,
            "key.modulename" : "main",
            "key.name" : "params",
            "key.namelength" : 6,
            "key.nameoffset" : 56001,
            "key.offset" : 55997,
            "key.parsed_declaration" : "var params = ccv_nnc_tensor_param_t()",
            "key.parsed_scope.end" : 1737,
            "key.parsed_scope.start" : 1737,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main15toCTensorParamsyXeXeF6paramsL_Xevp"
          }
        ],
        "key.typename" : "(DeviceKind, DataType, TensorFormat, [Int]) -> <<error type>>",
        "key.typeusr" : "$syXeXecD",
        "key.usr" : "s:4main15toCTensorParamsyXeXeF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>@inlinable func toCTensorParams(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type>, format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, shape: <Type usr=\"s:4main11TensorShapeV\">TensorShape<\/Type>) -&gt; ccv_nnc_tensor_param_t<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.inlinable",
            "key.length" : 10,
            "key.offset" : 56182
          }
        ],
        "key.bodylength" : 170,
        "key.bodyoffset" : 56327,
        "key.column" : 6,
        "key.decl_lang" : "source.lang.swift",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toCTensorParams<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dataType<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>shape<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:4main11TensorShapeV\">TensorShape<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>ccv_nnc_tensor_param_t<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 305,
        "key.line" : 1746,
        "key.modulename" : "main",
        "key.name" : "toCTensorParams(_:dataType:format:shape:)",
        "key.namelength" : 101,
        "key.nameoffset" : 56198,
        "key.offset" : 56193,
        "key.parsed_declaration" : "func toCTensorParams(\n  _ kind: DeviceKind, dataType: DataType, format: TensorFormat, shape: TensorShape\n) -> ccv_nnc_tensor_param_t",
        "key.parsed_scope.end" : 1755,
        "key.parsed_scope.start" : 1746,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4main15toCTensorParamsyXeXeF\">toCTensorParams(_:dataType:format:dimensions:)<\/RelatedName>"
          }
        ],
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>var params: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 7,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>params<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 37,
            "key.line" : 1749,
            "key.modulename" : "main",
            "key.name" : "params",
            "key.namelength" : 6,
            "key.nameoffset" : 56334,
            "key.offset" : 56330,
            "key.parsed_declaration" : "var params = ccv_nnc_tensor_param_t()",
            "key.parsed_scope.end" : 1749,
            "key.parsed_scope.start" : 1749,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main15toCTensorParamsyXeXeF6paramsL_Xevp"
          }
        ],
        "key.typename" : "(DeviceKind, DataType, TensorFormat, TensorShape) -> <<error type>>",
        "key.typeusr" : "$syXeXecD",
        "key.usr" : "s:4main15toCTensorParamsyXeXeF"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 319,
        "key.bodyoffset" : 56548,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 28,
            "key.offset" : 56518
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "CustomDebugStringConvertible"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 368,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 56510,
        "key.offset" : 56500,
        "key.parsed_declaration" : "extension Tensor: CustomDebugStringConvertible",
        "key.parsed_scope.end" : 1767,
        "key.parsed_scope.start" : 1757,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var debugDescription: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 56551
              }
            ],
            "key.bodylength" : 277,
            "key.bodyoffset" : 56588,
            "key.column" : 14,
            "key.decl_lang" : "source.lang.swift",
            "key.doc.declaration" : "var debugDescription: String { get }",
            "key.doc.discussion" : [
              {
                "Para" : "Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the `String(reflecting:)` initializer. This initializer works with any type, and uses the custom `debugDescription` property for types that conform to `CustomDebugStringConvertible`:"
              },
              {
                "CodeListing" : ""
              },
              {
                "Para" : "The conversion of `p` to a string in the assignment to `s` uses the `Point` type’s `debugDescription` property."
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>debugDescription<\/Name><USR>s:s28CustomDebugStringConvertibleP16debugDescriptionSSvp<\/USR><Declaration>var debugDescription: String { get }<\/Declaration><CommentParts><Abstract><Para>A textual representation of this instance, suitable for debugging.<\/Para><\/Abstract><Discussion><Para>Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the <codeVoice>String(reflecting:)<\/codeVoice> initializer. This initializer works with any type, and uses the custom <codeVoice>debugDescription<\/codeVoice> property for types that conform to <codeVoice>CustomDebugStringConvertible<\/codeVoice>:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct Point: CustomDebugStringConvertible {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    let x: Int, y: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var debugDescription: String {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        return \"(\\(x), \\(y))\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let p = Point(x: 21, y: 30)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let s = String(reflecting: p)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(s)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"(21, 30)\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The conversion of <codeVoice>p<\/codeVoice> to a string in the assignment to <codeVoice>s<\/codeVoice> uses the <codeVoice>Point<\/codeVoice> type’s <codeVoice>debugDescription<\/codeVoice> property.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>CustomDebugStringConvertible<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "debugDescription",
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>debugDescription<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 308,
            "key.line" : 1758,
            "key.modulename" : "main",
            "key.name" : "debugDescription",
            "key.namelength" : 16,
            "key.nameoffset" : 56562,
            "key.offset" : 56558,
            "key.overrides" : [
              {
                "key.usr" : "s:s28CustomDebugStringConvertibleP16debugDescriptionSSvp"
              }
            ],
            "key.parsed_declaration" : "public var debugDescription: String",
            "key.parsed_scope.end" : 1766,
            "key.parsed_scope.start" : 1758,
            "key.reusingastcontext" : false,
            "key.typename" : "String",
            "key.typeusr" : "$sSSD",
            "key.usr" : "s:s28CustomDebugStringConvertibleP16debugDescriptionSSvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let tensor: <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>tensor<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 47,
            "key.line" : 1759,
            "key.modulename" : "main",
            "key.name" : "tensor",
            "key.namelength" : 6,
            "key.nameoffset" : 56597,
            "key.offset" : 56593,
            "key.parsed_declaration" : "let tensor = kind == .CPU ? self : self.toCPU()",
            "key.parsed_scope.end" : 1759,
            "key.parsed_scope.start" : 1759,
            "key.reusingastcontext" : false,
            "key.typename" : "Tensor<Element>",
            "key.typeusr" : "$s4main6TensorVyxGD",
            "key.usr" : "s:4main6TensorV16debugDescriptionSSvg6tensorL_ACyxGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let debugDescription: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.column" : 9,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>debugDescription<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 67,
            "key.line" : 1763,
            "key.modulename" : "main",
            "key.name" : "debugDescription",
            "key.namelength" : 16,
            "key.nameoffset" : 56753,
            "key.offset" : 56749,
            "key.parsed_declaration" : "let debugDescription = description + \" \" + String(cString: cString)",
            "key.parsed_scope.end" : 1763,
            "key.parsed_scope.start" : 1763,
            "key.reusingastcontext" : false,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main6TensorV16debugDescriptionSSvgADL_Xevp"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 5322,
        "key.bodyoffset" : 56888,
        "key.column" : 15,
        "key.decl_lang" : "source.lang.swift",
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"762\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 762,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param> : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 5341,
        "key.line" : 762,
        "key.modulename" : "main",
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 56880,
        "key.offset" : 56870,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 1897,
        "key.parsed_scope.start" : 1769,
        "key.reusingastcontext" : false,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func data(using codec: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type> = []) -&gt; <Type usr=\"s:10Foundation4DataV\">Data<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 56891
              }
            ],
            "key.bodylength" : 2773,
            "key.bodyoffset" : 56961,
            "key.column" : 15,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>data<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>using<\/decl.var.parameter.argument_label> <decl.var.parameter.name>codec<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.parameter.type> = []<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 2837,
            "key.line" : 1770,
            "key.modulename" : "main",
            "key.name" : "data(using:)",
            "key.namelength" : 48,
            "key.nameoffset" : 56903,
            "key.offset" : 56898,
            "key.parsed_declaration" : "public func data(using codec: DynamicGraph.Store.Codec = []) -> Data",
            "key.parsed_scope.end" : 1836,
            "key.parsed_scope.start" : 1770,
            "key.reusingastcontext" : false,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let tensor: <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>tensor<\/decl.name>: <decl.var.type><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 42,
                "key.line" : 1771,
                "key.modulename" : "main",
                "key.name" : "tensor",
                "key.namelength" : 6,
                "key.nameoffset" : 56970,
                "key.offset" : 56966,
                "key.parsed_declaration" : "let tensor = kind == .CPU ? self : toCPU()",
                "key.parsed_scope.end" : 1771,
                "key.parsed_scope.start" : 1771,
                "key.reusingastcontext" : false,
                "key.typename" : "Tensor<Element>",
                "key.typeusr" : "$s4main6TensorVyxGD",
                "key.usr" : "s:4main6TensorV4data5using10Foundation4DataVAA12DynamicGraphC5StoreV5CodecV_tF6tensorL_ACyxGvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var codec: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type><\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>codec<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 17,
                "key.line" : 1772,
                "key.modulename" : "main",
                "key.name" : "codec",
                "key.namelength" : 5,
                "key.nameoffset" : 57017,
                "key.offset" : 57013,
                "key.parsed_declaration" : "var codec = codec",
                "key.parsed_scope.end" : 1772,
                "key.parsed_scope.start" : 1772,
                "key.reusingastcontext" : false,
                "key.typename" : "DynamicGraph.Store.Codec",
                "key.typeusr" : "$s4main12DynamicGraphC5StoreV5CodecVD",
                "key.usr" : "s:4main6TensorV4data5using10Foundation4DataVAA12DynamicGraphC5StoreV5CodecV_tF5codecL0_ANvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let encode: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.column" : 9,
                "key.decl_lang" : "source.lang.swift",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>encode<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 25,
                "key.line" : 1774,
                "key.modulename" : "main",
                "key.name" : "encode",
                "key.namelength" : 6,
                "key.nameoffset" : 57100,
                "key.offset" : 57096,
                "key.parsed_declaration" : "let encode = codec.encode",
                "key.parsed_scope.end" : 1774,
                "key.parsed_scope.start" : 1774,
                "key.reusingastcontext" : false,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV4data5using10Foundation4DataVAA12DynamicGraphC5StoreV5CodecV_tF6encodeL_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>) -> (DynamicGraph.Store.Codec) -> Data",
            "key.typeusr" : "$s5using10Foundation4DataV4main12DynamicGraphC5StoreV5CodecV_tcD",
            "key.usr" : "s:4main6TensorV4data5using10Foundation4DataVAA12DynamicGraphC5StoreV5CodecV_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init?(data: <Type usr=\"s:10Foundation4DataV\">Data<\/Type>, using codec: <Type usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/Type>.<Type usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 59739
              }
            ],
            "key.bodylength" : 2404,
            "key.bodyoffset" : 59804,
            "key.column" : 10,
            "key.decl_lang" : "source.lang.swift",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>?(<decl.var.parameter><decl.var.parameter.argument_label>data<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>using<\/decl.var.parameter.argument_label> <decl.var.parameter.name>codec<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:4main12DynamicGraphC\">DynamicGraph<\/ref.class>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV\">Store<\/ref.struct>.<ref.struct usr=\"s:4main12DynamicGraphC5StoreV5CodecV\">Codec<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 2463,
            "key.line" : 1838,
            "key.modulename" : "main",
            "key.name" : "init(data:using:)",
            "key.namelength" : 56,
            "key.nameoffset" : 59746,
            "key.offset" : 59746,
            "key.parsed_declaration" : "public init?(data: Data, using codec: DynamicGraph.Store.Codec)",
            "key.parsed_scope.end" : 1896,
            "key.parsed_scope.start" : 1838,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format5shapeACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOAA0B5ShapeVtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B11ShapeFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_: DeviceKind, _: DataType, _: TensorShapeFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV4fromACyxGAA03AnyB0_p_tcfc\">init(from:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shapeACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVtcfc\">init(_:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B11ShapeFormatOtcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_4kind6format5shapeACyxGqd___AA10DeviceKindOAA0B6FormatOAA0B5ShapeVtc7ElementQyd__RszSTRd__lufc\">init(_:kind:format:shape:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA10DeviceKindOAA0B11ShapeFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: DeviceKind, _: TensorShapeFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format5shape20unsafeMutablePointer14bindLifetimeOfACyxGAA10DeviceKindO_AA0B6FormatOAA0B5ShapeVSpyxGyptcfc\">init(_:format:shape:unsafeMutablePointer:bindLifetimeOf:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(mjArray:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSayxGcfc\">init(_: [Element])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              }
            ],
            "key.reusingastcontext" : false,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (Data, DynamicGraph.Store.Codec) -> Tensor<Element>?",
            "key.typeusr" : "$s4data5using4main6TensorVyxGSg10Foundation4DataV_AC12DynamicGraphC5StoreV5CodecVtcD",
            "key.usr" : "s:4main6TensorV4data5usingACyxGSg10Foundation4DataV_AA12DynamicGraphC5StoreV5CodecVtcfc"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      }
    ]
  }
}
