{
  "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 32667,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>final class CmdParamsFactory<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.final",
            "key.length" : 5,
            "key.offset" : 14
          }
        ],
        "key.bodylength" : 178,
        "key.bodyoffset" : 44,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>CmdParamsFactory<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 203,
        "key.name" : "CmdParamsFactory",
        "key.namelength" : 16,
        "key.nameoffset" : 26,
        "key.offset" : 20,
        "key.parsed_declaration" : "final class CmdParamsFactory",
        "key.parsed_scope.end" : 13,
        "key.parsed_scope.start" : 3,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>static let factory: <Type usr=\"s:4main16CmdParamsFactoryC\">CmdParamsFactory<\/Type><\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>factory<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main16CmdParamsFactoryC\">CmdParamsFactory<\/ref.class><\/decl.var.type><\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 39,
            "key.name" : "factory",
            "key.namelength" : 7,
            "key.nameoffset" : 58,
            "key.offset" : 47,
            "key.parsed_declaration" : "static let factory = CmdParamsFactory()",
            "key.parsed_scope.end" : 4,
            "key.parsed_scope.start" : 4,
            "key.typename" : "CmdParamsFactory",
            "key.typeusr" : "$s4main16CmdParamsFactoryCD",
            "key.usr" : "s:4main16CmdParamsFactoryC7factoryACvpZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>init()<\/Declaration>",
            "key.bodylength" : 22,
            "key.bodyoffset" : 97,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>()<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 31,
            "key.name" : "init()",
            "key.namelength" : 6,
            "key.nameoffset" : 89,
            "key.offset" : 89,
            "key.parsed_declaration" : "init()",
            "key.parsed_scope.end" : 7,
            "key.parsed_scope.start" : 5,
            "key.substructure" : [

            ],
            "key.typename" : "(CmdParamsFactory.Type) -> () -> CmdParamsFactory",
            "key.typeusr" : "$s4main16CmdParamsFactoryCycD",
            "key.usr" : "s:4main16CmdParamsFactoryCACycfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>func newParams() -&gt; ccv_nnc_cmd_param_t<\/Declaration>",
            "key.bodylength" : 36,
            "key.bodyoffset" : 164,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>newParams<\/decl.name>() -&gt; <decl.function.returntype>ccv_nnc_cmd_param_t<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 78,
            "key.name" : "newParams()",
            "key.namelength" : 11,
            "key.nameoffset" : 128,
            "key.offset" : 123,
            "key.parsed_declaration" : "func newParams() -> ccv_nnc_cmd_param_t",
            "key.parsed_scope.end" : 10,
            "key.parsed_scope.start" : 8,
            "key.substructure" : [

            ],
            "key.typename" : "(CmdParamsFactory) -> () -> <<error type>>",
            "key.typeusr" : "$syXeXecD",
            "key.usr" : "s:4main16CmdParamsFactoryC03newC0yXeXeF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>func sink()<\/Declaration>",
            "key.bodylength" : 3,
            "key.bodyoffset" : 217,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>sink<\/decl.name>()<\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 17,
            "key.name" : "sink()",
            "key.namelength" : 6,
            "key.nameoffset" : 209,
            "key.offset" : 204,
            "key.parsed_declaration" : "func sink()",
            "key.parsed_scope.end" : 12,
            "key.parsed_scope.start" : 11,
            "key.typename" : "(CmdParamsFactory) -> () -> ()",
            "key.typeusr" : "$syycD",
            "key.usr" : "s:4main16CmdParamsFactoryC4sinkyyF"
          }
        ],
        "key.typename" : "CmdParamsFactory.Type",
        "key.typeusr" : "$s4main16CmdParamsFactoryCmD",
        "key.usr" : "s:4main16CmdParamsFactoryC"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public enum DeviceKind<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 272
          }
        ],
        "key.bodylength" : 625,
        "key.bodyoffset" : 296,
        "key.doc.column" : 13,
        "key.doc.comment" : "The kind of devices the tensor resides on.",
        "key.doc.declaration" : "public enum DeviceKind",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"16\" column=\"13\"><Name>DeviceKind<\/Name><USR>s:4main10DeviceKindO<\/USR><Declaration>public enum DeviceKind<\/Declaration><CommentParts><Abstract><Para>The kind of devices the tensor resides on.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 16,
        "key.doc.name" : "DeviceKind",
        "key.doc.type" : "Other",
        "key.doclength" : 47,
        "key.docoffset" : 225,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>DeviceKind<\/decl.name><\/decl.enum>",
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 643,
        "key.name" : "DeviceKind",
        "key.namelength" : 10,
        "key.nameoffset" : 284,
        "key.offset" : 279,
        "key.parsed_declaration" : "public enum DeviceKind",
        "key.parsed_scope.end" : 42,
        "key.parsed_scope.start" : 16,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 8,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 299,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case CPU<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>CPU<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 3,
                "key.name" : "CPU",
                "key.namelength" : 3,
                "key.nameoffset" : 304,
                "key.offset" : 304,
                "key.parsed_declaration" : "case CPU",
                "key.parsed_scope.end" : 17,
                "key.parsed_scope.start" : 17,
                "key.typename" : "(DeviceKind.Type) -> DeviceKind",
                "key.typeusr" : "$sy4main10DeviceKindOACmcD",
                "key.usr" : "s:4main10DeviceKindO3CPUyA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 13,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 310,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case GPU(<Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>GPU<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 8,
                "key.name" : "GPU(_:)",
                "key.namelength" : 8,
                "key.nameoffset" : 315,
                "key.offset" : 315,
                "key.parsed_declaration" : "case GPU(Int)",
                "key.parsed_scope.end" : 18,
                "key.parsed_scope.start" : 18,
                "key.substructure" : [

                ],
                "key.typename" : "(DeviceKind.Type) -> (Int) -> DeviceKind",
                "key.typeusr" : "$sy4main10DeviceKindOSicACmcD",
                "key.usr" : "s:4main10DeviceKindO3GPUyACSicACmF"
              }
            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>static func from(cTensorParams: ccv_nnc_tensor_param_t) -&gt; <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type><\/Declaration>",
            "key.bodylength" : 283,
            "key.bodyoffset" : 398,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>from<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>cTensorParams<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 355,
            "key.name" : "from(cTensorParams:)",
            "key.namelength" : 43,
            "key.nameoffset" : 339,
            "key.offset" : 327,
            "key.parsed_declaration" : "static func from(cTensorParams: ccv_nnc_tensor_param_t) -> DeviceKind",
            "key.parsed_scope.end" : 29,
            "key.parsed_scope.start" : 20,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let type: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>type<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 34,
                "key.name" : "type",
                "key.namelength" : 4,
                "key.nameoffset" : 407,
                "key.offset" : 403,
                "key.parsed_declaration" : "let type = Int(cTensorParams.type)",
                "key.parsed_scope.end" : 21,
                "key.parsed_scope.start" : 21,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s4type2ofq_x_tr0_lF\">type(of:)<\/RelatedName>"
                  }
                ],
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main10DeviceKindO4fromyXeXeFZ4typeL_Xevp"
              }
            ],
            "key.typename" : "(DeviceKind.Type) -> (<<error type>>) -> DeviceKind",
            "key.typeusr" : "$syXeXecD",
            "key.usr" : "s:4main10DeviceKindO4fromyXeXeFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public enum <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>.GPUInfo<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 735
              }
            ],
            "key.bodylength" : 163,
            "key.bodyoffset" : 756,
            "key.doc.column" : 15,
            "key.doc.comment" : "GPU device related information.",
            "key.doc.declaration" : "public enum main.DeviceKind.GPUInfo",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"34\" column=\"15\"><Name>GPUInfo<\/Name><USR>s:4main10DeviceKindO7GPUInfoO<\/USR><Declaration>public enum main.DeviceKind.GPUInfo<\/Declaration><CommentParts><Abstract><Para>GPU device related information.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 34,
            "key.doc.name" : "GPUInfo",
            "key.doc.type" : "Other",
            "key.doclength" : 46,
            "key.docoffset" : 686,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum>.<decl.name>GPUInfo<\/decl.name><\/decl.enum>",
            "key.kind" : "source.lang.swift.decl.enum",
            "key.length" : 178,
            "key.name" : "GPUInfo",
            "key.namelength" : 7,
            "key.nameoffset" : 747,
            "key.offset" : 742,
            "key.parsed_declaration" : "public enum GPUInfo",
            "key.parsed_scope.end" : 41,
            "key.parsed_scope.start" : 34,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>public static var count: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
                "key.attributes" : [
                  {
                    "key.attribute" : "source.decl.attribute.public",
                    "key.length" : 6,
                    "key.offset" : 817
                  }
                ],
                "key.bodylength" : 68,
                "key.bodyoffset" : 847,
                "key.doc.column" : 23,
                "key.doc.comment" : "Number of available GPU devices.",
                "key.doc.declaration" : "public static var count: Int { get }",
                "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"38\" column=\"23\"><Name>count<\/Name><USR>s:4main10DeviceKindO7GPUInfoO5countSivpZ<\/USR><Declaration>public static var count: Int { get }<\/Declaration><CommentParts><Abstract><Para>Number of available GPU devices.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 38,
                "key.doc.name" : "count",
                "key.doc.type" : "Other",
                "key.doclength" : 51,
                "key.docoffset" : 761,
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
                "key.kind" : "source.lang.swift.decl.var.static",
                "key.length" : 92,
                "key.name" : "count",
                "key.namelength" : 5,
                "key.nameoffset" : 835,
                "key.offset" : 824,
                "key.parsed_declaration" : "public static var count: Int",
                "key.parsed_scope.end" : 40,
                "key.parsed_scope.start" : 38,
                "key.typename" : "Int",
                "key.typeusr" : "$sSiD",
                "key.usr" : "s:4main10DeviceKindO7GPUInfoO5countSivpZ"
              }
            ],
            "key.typename" : "DeviceKind.GPUInfo.Type",
            "key.typeusr" : "$s4main10DeviceKindO7GPUInfoOmD",
            "key.usr" : "s:4main10DeviceKindO7GPUInfoO"
          }
        ],
        "key.typename" : "DeviceKind.Type",
        "key.typeusr" : "$s4main10DeviceKindOmD",
        "key.usr" : "s:4main10DeviceKindO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public enum TensorFormat<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 949
          }
        ],
        "key.bodylength" : 596,
        "key.bodyoffset" : 975,
        "key.doc.column" : 13,
        "key.doc.comment" : "Tensor arrangements.",
        "key.doc.declaration" : "public enum TensorFormat",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"45\" column=\"13\"><Name>TensorFormat<\/Name><USR>s:4main12TensorFormatO<\/USR><Declaration>public enum TensorFormat<\/Declaration><CommentParts><Abstract><Para>Tensor arrangements.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 45,
        "key.doc.name" : "TensorFormat",
        "key.doc.type" : "Other",
        "key.doclength" : 25,
        "key.docoffset" : 924,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>TensorFormat<\/decl.name><\/decl.enum>",
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 616,
        "key.name" : "TensorFormat",
        "key.namelength" : 12,
        "key.nameoffset" : 961,
        "key.offset" : 956,
        "key.parsed_declaration" : "public enum TensorFormat",
        "key.parsed_scope.end" : 73,
        "key.parsed_scope.start" : 45,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 9,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 978,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case NHWC<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>NHWC<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 4,
                "key.name" : "NHWC",
                "key.namelength" : 4,
                "key.nameoffset" : 983,
                "key.offset" : 983,
                "key.parsed_declaration" : "case NHWC",
                "key.parsed_scope.end" : 46,
                "key.parsed_scope.start" : 46,
                "key.typename" : "(TensorFormat.Type) -> TensorFormat",
                "key.typeusr" : "$sy4main12TensorFormatOACmcD",
                "key.usr" : "s:4main12TensorFormatO4NHWCyA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 9,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 990,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case NCHW<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>NCHW<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 4,
                "key.name" : "NCHW",
                "key.namelength" : 4,
                "key.nameoffset" : 995,
                "key.offset" : 995,
                "key.parsed_declaration" : "case NCHW",
                "key.parsed_scope.end" : 47,
                "key.parsed_scope.start" : 47,
                "key.typename" : "(TensorFormat.Type) -> TensorFormat",
                "key.typeusr" : "$sy4main12TensorFormatOACmcD",
                "key.usr" : "s:4main12TensorFormatO4NCHWyA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 9,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1002,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case CHWN<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>CHWN<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 4,
                "key.name" : "CHWN",
                "key.namelength" : 4,
                "key.nameoffset" : 1007,
                "key.offset" : 1007,
                "key.parsed_declaration" : "case CHWN",
                "key.parsed_scope.end" : 48,
                "key.parsed_scope.start" : 48,
                "key.typename" : "(TensorFormat.Type) -> TensorFormat",
                "key.typeusr" : "$sy4main12TensorFormatOACmcD",
                "key.usr" : "s:4main12TensorFormatO4CHWNyA2CmF"
              }
            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>static func from(cTensorParams: ccv_nnc_tensor_param_t) -&gt; <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type><\/Declaration>",
            "key.bodylength" : 256,
            "key.bodyoffset" : 1088,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>from<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>cTensorParams<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 330,
            "key.name" : "from(cTensorParams:)",
            "key.namelength" : 43,
            "key.nameoffset" : 1027,
            "key.offset" : 1015,
            "key.parsed_declaration" : "static func from(cTensorParams: ccv_nnc_tensor_param_t) -> TensorFormat",
            "key.parsed_scope.end" : 61,
            "key.parsed_scope.start" : 50,
            "key.substructure" : [

            ],
            "key.typename" : "(TensorFormat.Type) -> (<<error type>>) -> TensorFormat",
            "key.typeusr" : "$syXeXecD",
            "key.usr" : "s:4main12TensorFormatO4fromyXeXeFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>var toC: <Type usr=\"s:s5Int32V\">Int32<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 204,
            "key.bodyoffset" : 1365,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>toC<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 221,
            "key.name" : "toC",
            "key.namelength" : 3,
            "key.nameoffset" : 1353,
            "key.offset" : 1349,
            "key.parsed_declaration" : "var toC: Int32",
            "key.parsed_scope.end" : 72,
            "key.parsed_scope.start" : 63,
            "key.typename" : "Int32",
            "key.typeusr" : "$ss5Int32VD",
            "key.usr" : "s:4main12TensorFormatO3toCs5Int32Vvp"
          }
        ],
        "key.typename" : "TensorFormat.Type",
        "key.typeusr" : "$s4main12TensorFormatOmD",
        "key.usr" : "s:4main12TensorFormatO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public enum TensorDimensionFormat<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 1618
          }
        ],
        "key.bodylength" : 1383,
        "key.bodyoffset" : 1653,
        "key.doc.column" : 13,
        "key.doc.comment" : "Tensor dimensions and its arrangements.",
        "key.doc.declaration" : "public enum TensorDimensionFormat",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"76\" column=\"13\"><Name>TensorDimensionFormat<\/Name><USR>s:4main21TensorDimensionFormatO<\/USR><Declaration>public enum TensorDimensionFormat<\/Declaration><CommentParts><Abstract><Para>Tensor dimensions and its arrangements.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 76,
        "key.doc.name" : "TensorDimensionFormat",
        "key.doc.type" : "Other",
        "key.doclength" : 44,
        "key.docoffset" : 1574,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>TensorDimensionFormat<\/decl.name><\/decl.enum>",
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 1412,
        "key.name" : "TensorDimensionFormat",
        "key.namelength" : 21,
        "key.nameoffset" : 1630,
        "key.offset" : 1625,
        "key.parsed_declaration" : "public enum TensorDimensionFormat",
        "key.parsed_scope.end" : 143,
        "key.parsed_scope.start" : 76,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 11,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1656,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case C(<Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>C<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 6,
                "key.name" : "C(_:)",
                "key.namelength" : 6,
                "key.nameoffset" : 1661,
                "key.offset" : 1661,
                "key.parsed_declaration" : "case C(Int)",
                "key.parsed_scope.end" : 77,
                "key.parsed_scope.start" : 77,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorDimensionFormat.Type) -> (Int) -> TensorDimensionFormat",
                "key.typeusr" : "$sy4main21TensorDimensionFormatOSicACmcD",
                "key.usr" : "s:4main21TensorDimensionFormatO1CyACSicACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 17,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1688,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case NC(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>NC<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 12,
                "key.name" : "NC(_:_:)",
                "key.namelength" : 12,
                "key.nameoffset" : 1693,
                "key.offset" : 1693,
                "key.parsed_declaration" : "case NC(Int, Int)",
                "key.parsed_scope.end" : 78,
                "key.parsed_scope.start" : 78,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorDimensionFormat.Type) -> (Int, Int) -> TensorDimensionFormat",
                "key.typeusr" : "$sy4main21TensorDimensionFormatOSi_SitcACmcD",
                "key.usr" : "s:4main21TensorDimensionFormatO2NCyACSi_SitcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 23,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1726,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case HWC(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>HWC<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 18,
                "key.name" : "HWC(_:_:_:)",
                "key.namelength" : 18,
                "key.nameoffset" : 1731,
                "key.offset" : 1731,
                "key.parsed_declaration" : "case HWC(Int, Int, Int)",
                "key.parsed_scope.end" : 79,
                "key.parsed_scope.start" : 79,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorDimensionFormat.Type) -> (Int, Int, Int) -> TensorDimensionFormat",
                "key.typeusr" : "$sy4main21TensorDimensionFormatOSi_S2itcACmcD",
                "key.usr" : "s:4main21TensorDimensionFormatO3HWCyACSi_S2itcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 23,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1770,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case CHW(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>CHW<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 18,
                "key.name" : "CHW(_:_:_:)",
                "key.namelength" : 18,
                "key.nameoffset" : 1775,
                "key.offset" : 1775,
                "key.parsed_declaration" : "case CHW(Int, Int, Int)",
                "key.parsed_scope.end" : 80,
                "key.parsed_scope.start" : 80,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorDimensionFormat.Type) -> (Int, Int, Int) -> TensorDimensionFormat",
                "key.typeusr" : "$sy4main21TensorDimensionFormatOSi_S2itcACmcD",
                "key.usr" : "s:4main21TensorDimensionFormatO3CHWyACSi_S2itcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 29,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1814,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case NHWC(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>NHWC<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 24,
                "key.name" : "NHWC(_:_:_:_:)",
                "key.namelength" : 24,
                "key.nameoffset" : 1819,
                "key.offset" : 1819,
                "key.parsed_declaration" : "case NHWC(Int, Int, Int, Int)",
                "key.parsed_scope.end" : 81,
                "key.parsed_scope.start" : 81,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorDimensionFormat.Type) -> (Int, Int, Int, Int) -> TensorDimensionFormat",
                "key.typeusr" : "$sy4main21TensorDimensionFormatOSi_S3itcACmcD",
                "key.usr" : "s:4main21TensorDimensionFormatO4NHWCyACSi_S3itcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 29,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1846,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case NCHW(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>NCHW<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 24,
                "key.name" : "NCHW(_:_:_:_:)",
                "key.namelength" : 24,
                "key.nameoffset" : 1851,
                "key.offset" : 1851,
                "key.parsed_declaration" : "case NCHW(Int, Int, Int, Int)",
                "key.parsed_scope.end" : 82,
                "key.parsed_scope.start" : 82,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorDimensionFormat.Type) -> (Int, Int, Int, Int) -> TensorDimensionFormat",
                "key.typeusr" : "$sy4main21TensorDimensionFormatOSi_S3itcACmcD",
                "key.usr" : "s:4main21TensorDimensionFormatO4NCHWyACSi_S3itcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 29,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1878,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case CHWN(<Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>CHWN<\/decl.name>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 24,
                "key.name" : "CHWN(_:_:_:_:)",
                "key.namelength" : 24,
                "key.nameoffset" : 1883,
                "key.offset" : 1883,
                "key.parsed_declaration" : "case CHWN(Int, Int, Int, Int)",
                "key.parsed_scope.end" : 83,
                "key.parsed_scope.start" : 83,
                "key.substructure" : [

                ],
                "key.typename" : "(TensorDimensionFormat.Type) -> (Int, Int, Int, Int) -> TensorDimensionFormat",
                "key.typeusr" : "$sy4main21TensorDimensionFormatOSi_S3itcACmcD",
                "key.usr" : "s:4main21TensorDimensionFormatO4CHWNyACSi_S3itcACmF"
              }
            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>var format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 265,
            "key.bodyoffset" : 1937,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>format<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 292,
            "key.name" : "format",
            "key.namelength" : 6,
            "key.nameoffset" : 1915,
            "key.offset" : 1911,
            "key.parsed_declaration" : "var format: TensorFormat",
            "key.parsed_scope.end" : 102,
            "key.parsed_scope.start" : 85,
            "key.typename" : "TensorFormat",
            "key.typeusr" : "$s4main12TensorFormatOD",
            "key.usr" : "s:4main21TensorDimensionFormatO6formatAA0bD0Ovp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>var dimensions: [<Type usr=\"s:Si\">Int<\/Type>] { get }<\/Declaration>",
            "key.bodylength" : 804,
            "key.bodyoffset" : 2230,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dimensions<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 828,
            "key.name" : "dimensions",
            "key.namelength" : 10,
            "key.nameoffset" : 2211,
            "key.offset" : 2207,
            "key.parsed_declaration" : "var dimensions: [Int]",
            "key.parsed_scope.end" : 142,
            "key.parsed_scope.start" : 104,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main21TensorDimensionFormatO10dimensionsSaySiGvp"
          }
        ],
        "key.typename" : "TensorDimensionFormat.Type",
        "key.typeusr" : "$s4main21TensorDimensionFormatOmD",
        "key.usr" : "s:4main21TensorDimensionFormatO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public enum DataType<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 3074
          }
        ],
        "key.bodylength" : 861,
        "key.bodyoffset" : 3096,
        "key.doc.column" : 13,
        "key.doc.comment" : "Data types for a given tensor.",
        "key.doc.declaration" : "public enum DataType",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"146\" column=\"13\"><Name>DataType<\/Name><USR>s:4main8DataTypeO<\/USR><Declaration>public enum DataType<\/Declaration><CommentParts><Abstract><Para>Data types for a given tensor.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 146,
        "key.doc.name" : "DataType",
        "key.doc.type" : "Other",
        "key.doclength" : 35,
        "key.docoffset" : 3039,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>DataType<\/decl.name><\/decl.enum>",
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 877,
        "key.name" : "DataType",
        "key.namelength" : 8,
        "key.nameoffset" : 3086,
        "key.offset" : 3081,
        "key.parsed_declaration" : "public enum DataType",
        "key.parsed_scope.end" : 189,
        "key.parsed_scope.start" : 146,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 12,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 3099,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Float64<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Float64<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 7,
                "key.name" : "Float64",
                "key.namelength" : 7,
                "key.nameoffset" : 3104,
                "key.offset" : 3104,
                "key.parsed_declaration" : "case Float64",
                "key.parsed_scope.end" : 147,
                "key.parsed_scope.start" : 147,
                "key.typename" : "(DataType.Type) -> DataType",
                "key.typeusr" : "$sy4main8DataTypeOACmcD",
                "key.usr" : "s:4main8DataTypeO7Float64yA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 10,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 3114,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Int64<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Int64<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 5,
                "key.name" : "Int64",
                "key.namelength" : 5,
                "key.nameoffset" : 3119,
                "key.offset" : 3119,
                "key.parsed_declaration" : "case Int64",
                "key.parsed_scope.end" : 148,
                "key.parsed_scope.start" : 148,
                "key.typename" : "(DataType.Type) -> DataType",
                "key.typeusr" : "$sy4main8DataTypeOACmcD",
                "key.usr" : "s:4main8DataTypeO5Int64yA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 12,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 3127,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Float32<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Float32<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 7,
                "key.name" : "Float32",
                "key.namelength" : 7,
                "key.nameoffset" : 3132,
                "key.offset" : 3132,
                "key.parsed_declaration" : "case Float32",
                "key.parsed_scope.end" : 149,
                "key.parsed_scope.start" : 149,
                "key.typename" : "(DataType.Type) -> DataType",
                "key.typeusr" : "$sy4main8DataTypeOACmcD",
                "key.usr" : "s:4main8DataTypeO7Float32yA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 10,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 3142,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Int32<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Int32<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 5,
                "key.name" : "Int32",
                "key.namelength" : 5,
                "key.nameoffset" : 3147,
                "key.offset" : 3147,
                "key.parsed_declaration" : "case Int32",
                "key.parsed_scope.end" : 150,
                "key.parsed_scope.start" : 150,
                "key.typename" : "(DataType.Type) -> DataType",
                "key.typeusr" : "$sy4main8DataTypeOACmcD",
                "key.usr" : "s:4main8DataTypeO5Int32yA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 12,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 3155,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Float16<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Float16<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 7,
                "key.name" : "Float16",
                "key.namelength" : 7,
                "key.nameoffset" : 3160,
                "key.offset" : 3160,
                "key.parsed_declaration" : "case Float16",
                "key.parsed_scope.end" : 151,
                "key.parsed_scope.start" : 151,
                "key.typename" : "(DataType.Type) -> DataType",
                "key.typeusr" : "$sy4main8DataTypeOACmcD",
                "key.usr" : "s:4main8DataTypeO7Float16yA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 10,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 3170,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case UInt8<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>UInt8<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 5,
                "key.name" : "UInt8",
                "key.namelength" : 5,
                "key.nameoffset" : 3175,
                "key.offset" : 3175,
                "key.parsed_declaration" : "case UInt8",
                "key.parsed_scope.end" : 152,
                "key.parsed_scope.start" : 152,
                "key.typename" : "(DataType.Type) -> DataType",
                "key.typeusr" : "$sy4main8DataTypeOACmcD",
                "key.usr" : "s:4main8DataTypeO5UInt8yA2CmF"
              }
            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>static func from(cTensorParams: ccv_nnc_tensor_param_t) -&gt; <Type usr=\"s:4main8DataTypeO\">DataType<\/Type><\/Declaration>",
            "key.bodylength" : 337,
            "key.bodyoffset" : 3253,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>from<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>cTensorParams<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>ccv_nnc_tensor_param_t<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 407,
            "key.name" : "from(cTensorParams:)",
            "key.namelength" : 43,
            "key.nameoffset" : 3196,
            "key.offset" : 3184,
            "key.parsed_declaration" : "static func from(cTensorParams: ccv_nnc_tensor_param_t) -> DataType",
            "key.parsed_scope.end" : 171,
            "key.parsed_scope.start" : 154,
            "key.substructure" : [

            ],
            "key.typename" : "(DataType.Type) -> (<<error type>>) -> DataType",
            "key.typeusr" : "$syXeXecD",
            "key.usr" : "s:4main8DataTypeO4fromyXeXeFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>var toC: Swift.<Type usr=\"s:s5Int32V\">Int32<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 338,
            "key.bodyoffset" : 3617,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>toC<\/decl.name>: <decl.var.type>Swift.<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 361,
            "key.name" : "toC",
            "key.namelength" : 3,
            "key.nameoffset" : 3599,
            "key.offset" : 3595,
            "key.parsed_declaration" : "var toC: Swift.Int32",
            "key.parsed_scope.end" : 188,
            "key.parsed_scope.start" : 173,
            "key.typename" : "Int32",
            "key.typeusr" : "$ss5Int32VD",
            "key.usr" : "s:4main8DataTypeO3toCs5Int32Vvp"
          }
        ],
        "key.typename" : "DataType.Type",
        "key.typeusr" : "$s4main8DataTypeOmD",
        "key.usr" : "s:4main8DataTypeO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public protocol TensorNumeric : <Type usr=\"s:Sj\">Numeric<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 3960
          }
        ],
        "key.bodylength" : 41,
        "key.bodyoffset" : 4000,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 7,
            "key.offset" : 3991
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>TensorNumeric<\/decl.name> : <ref.protocol usr=\"s:Sj\">Numeric<\/ref.protocol><\/decl.protocol>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Numeric"
          }
        ],
        "key.kind" : "source.lang.swift.decl.protocol",
        "key.length" : 75,
        "key.name" : "TensorNumeric",
        "key.namelength" : 13,
        "key.nameoffset" : 3976,
        "key.offset" : 3967,
        "key.parsed_declaration" : "public protocol TensorNumeric: Numeric",
        "key.parsed_scope.end" : 193,
        "key.parsed_scope.start" : 191,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 4034,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 37,
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 4014,
            "key.offset" : 4003,
            "key.parsed_declaration" : "static var dataType: DataType",
            "key.parsed_scope.end" : 192,
            "key.parsed_scope.start" : 192,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
          }
        ],
        "key.typename" : "TensorNumeric.Protocol",
        "key.typeusr" : "$s4main13TensorNumeric_pmD",
        "key.usr" : "s:4main13TensorNumericP"
      },
      {
        "key.annotated_decl" : "<Declaration>typealias Float64 = <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
        "key.bodylength" : 53,
        "key.bodyoffset" : 4078,
        "key.doc.declaration" : "typealias Float64 = Double",
        "key.doc.full_as_xml" : "<Other><Name>Float64<\/Name><USR>s:s7Float64a<\/USR><Declaration>typealias Float64 = Double<\/Declaration><CommentParts><Abstract><Para>A 64-bit floating point type.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.name" : "Float64",
        "key.doc.type" : "Other",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 4063
          }
        ],
        "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Float64<\/decl.name> = <ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.typealias>",
        "key.groupname" : "Misc",
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 88,
        "key.modulename" : "Swift",
        "key.name" : "Float64",
        "key.namelength" : 7,
        "key.nameoffset" : 4054,
        "key.offset" : 4044,
        "key.parsed_declaration" : "extension Float64: TensorNumeric",
        "key.parsed_scope.end" : 197,
        "key.parsed_scope.start" : 195,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4081
              }
            ],
            "key.bodylength" : 10,
            "key.bodyoffset" : 4119,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.groupname" : "Math\/Floating",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 42,
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 4099,
            "key.offset" : 4088,
            "key.overrides" : [
              {
                "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
              }
            ],
            "key.parsed_declaration" : "public static var dataType: DataType",
            "key.parsed_scope.end" : 196,
            "key.parsed_scope.start" : 196,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:Sd4mainE8dataTypeAA04DataC0OvpZ"
          }
        ],
        "key.typename" : "Double.Type",
        "key.typeusr" : "$sSdmD",
        "key.usr" : "s:s7Float64a"
      },
      {
        "key.annotated_decl" : "<Declaration>@frozen struct Int64 : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type>, <Type usr=\"s:SZ\">SignedInteger<\/Type>, <Type usr=\"s:s35_ExpressibleByBuiltinIntegerLiteralP\">_ExpressibleByBuiltinIntegerLiteral<\/Type><\/Declaration>",
        "key.bodylength" : 51,
        "key.bodyoffset" : 4166,
        "key.doc.declaration" : "@frozen struct Int64 : FixedWidthInteger, SignedInteger",
        "key.doc.full_as_xml" : "<Class><Name>Int64<\/Name><USR>s:s5Int64V<\/USR><Declaration>@frozen struct Int64 : FixedWidthInteger, SignedInteger<\/Declaration><CommentParts><Abstract><Para>A 64-bit signed integer value type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.name" : "Int64",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 4151
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Int64<\/decl.name> : <ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol>, <ref.protocol usr=\"s:SZ\">SignedInteger<\/ref.protocol>, <ref.protocol usr=\"s:s35_ExpressibleByBuiltinIntegerLiteralP\">_ExpressibleByBuiltinIntegerLiteral<\/ref.protocol><\/decl.struct>",
        "key.groupname" : "Math\/Integers",
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 84,
        "key.modulename" : "Swift",
        "key.name" : "Int64",
        "key.namelength" : 5,
        "key.nameoffset" : 4144,
        "key.offset" : 4134,
        "key.parsed_declaration" : "extension Int64: TensorNumeric",
        "key.parsed_scope.end" : 201,
        "key.parsed_scope.start" : 199,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4169
              }
            ],
            "key.bodylength" : 8,
            "key.bodyoffset" : 4207,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 40,
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 4187,
            "key.offset" : 4176,
            "key.overrides" : [
              {
                "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
              }
            ],
            "key.parsed_declaration" : "public static var dataType: DataType",
            "key.parsed_scope.end" : 200,
            "key.parsed_scope.start" : 200,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:s5Int64V4mainE8dataTypeAC04DataD0OvpZ"
          }
        ],
        "key.typename" : "Int64.Type",
        "key.typeusr" : "$ss5Int64VmD",
        "key.usr" : "s:s5Int64V"
      },
      {
        "key.annotated_decl" : "<Declaration>typealias Float32 = <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
        "key.bodylength" : 53,
        "key.bodyoffset" : 4254,
        "key.doc.declaration" : "typealias Float32 = Float",
        "key.doc.full_as_xml" : "<Other><Name>Float32<\/Name><USR>s:s7Float32a<\/USR><Declaration>typealias Float32 = Float<\/Declaration><CommentParts><Abstract><Para>A 32-bit floating point type.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.name" : "Float32",
        "key.doc.type" : "Other",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 4239
          }
        ],
        "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Float32<\/decl.name> = <ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.typealias>",
        "key.groupname" : "Misc",
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 88,
        "key.modulename" : "Swift",
        "key.name" : "Float32",
        "key.namelength" : 7,
        "key.nameoffset" : 4230,
        "key.offset" : 4220,
        "key.parsed_declaration" : "extension Float32: TensorNumeric",
        "key.parsed_scope.end" : 205,
        "key.parsed_scope.start" : 203,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4257
              }
            ],
            "key.bodylength" : 10,
            "key.bodyoffset" : 4295,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.groupname" : "Math\/Floating",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 42,
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 4275,
            "key.offset" : 4264,
            "key.overrides" : [
              {
                "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
              }
            ],
            "key.parsed_declaration" : "public static var dataType: DataType",
            "key.parsed_scope.end" : 204,
            "key.parsed_scope.start" : 204,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:Sf4mainE8dataTypeAA04DataC0OvpZ"
          }
        ],
        "key.typename" : "Float.Type",
        "key.typeusr" : "$sSfmD",
        "key.usr" : "s:s7Float32a"
      },
      {
        "key.annotated_decl" : "<Declaration>@frozen struct Int32 : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type>, <Type usr=\"s:SZ\">SignedInteger<\/Type>, <Type usr=\"s:s35_ExpressibleByBuiltinIntegerLiteralP\">_ExpressibleByBuiltinIntegerLiteral<\/Type><\/Declaration>",
        "key.bodylength" : 51,
        "key.bodyoffset" : 4342,
        "key.doc.declaration" : "@frozen struct Int32 : FixedWidthInteger, SignedInteger",
        "key.doc.full_as_xml" : "<Class><Name>Int32<\/Name><USR>s:s5Int32V<\/USR><Declaration>@frozen struct Int32 : FixedWidthInteger, SignedInteger<\/Declaration><CommentParts><Abstract><Para>A 32-bit signed integer value type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.name" : "Int32",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 4327
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Int32<\/decl.name> : <ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol>, <ref.protocol usr=\"s:SZ\">SignedInteger<\/ref.protocol>, <ref.protocol usr=\"s:s35_ExpressibleByBuiltinIntegerLiteralP\">_ExpressibleByBuiltinIntegerLiteral<\/ref.protocol><\/decl.struct>",
        "key.groupname" : "Math\/Integers",
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 84,
        "key.modulename" : "Swift",
        "key.name" : "Int32",
        "key.namelength" : 5,
        "key.nameoffset" : 4320,
        "key.offset" : 4310,
        "key.parsed_declaration" : "extension Int32: TensorNumeric",
        "key.parsed_scope.end" : 209,
        "key.parsed_scope.start" : 207,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4345
              }
            ],
            "key.bodylength" : 8,
            "key.bodyoffset" : 4383,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 40,
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 4363,
            "key.offset" : 4352,
            "key.overrides" : [
              {
                "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
              }
            ],
            "key.parsed_declaration" : "public static var dataType: DataType",
            "key.parsed_scope.end" : 208,
            "key.parsed_scope.start" : 208,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:s5Int32V4mainE8dataTypeAC04DataD0OvpZ"
          }
        ],
        "key.typename" : "Int32.Type",
        "key.typeusr" : "$ss5Int32VmD",
        "key.usr" : "s:s5Int32V"
      },
      {
        "key.annotated_decl" : "<Declaration>@frozen struct Float16<\/Declaration>",
        "key.bodylength" : 53,
        "key.bodyoffset" : 4430,
        "key.doc.declaration" : "@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)\n@frozen struct Float16",
        "key.doc.full_as_xml" : "<Class><Name>Float16<\/Name><USR>s:s7Float16V<\/USR><Declaration>@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)\n@frozen struct Float16<\/Declaration><CommentParts><Abstract><Para>A half-precision (16b), floating-point value type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.name" : "Float16",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 4415
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Float16<\/decl.name><\/decl.struct>",
        "key.groupname" : "Math\/Floating",
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 88,
        "key.modulename" : "Swift",
        "key.name" : "Float16",
        "key.namelength" : 7,
        "key.nameoffset" : 4406,
        "key.offset" : 4396,
        "key.parsed_declaration" : "extension Float16: TensorNumeric",
        "key.parsed_scope.end" : 213,
        "key.parsed_scope.start" : 211,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4433
              }
            ],
            "key.bodylength" : 10,
            "key.bodyoffset" : 4471,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.groupname" : "Math\/Floating",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 42,
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 4451,
            "key.offset" : 4440,
            "key.overrides" : [
              {
                "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
              }
            ],
            "key.parsed_declaration" : "public static var dataType: DataType",
            "key.parsed_scope.end" : 212,
            "key.parsed_scope.start" : 212,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:s7Float16V4mainE8dataTypeAC04DataD0OvpZ"
          }
        ],
        "key.typename" : "Float16.Type",
        "key.typeusr" : "$ss7Float16VmD",
        "key.usr" : "s:s7Float16V"
      },
      {
        "key.annotated_decl" : "<Declaration>@frozen struct UInt8 : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type>, <Type usr=\"s:SU\">UnsignedInteger<\/Type>, <Type usr=\"s:s35_ExpressibleByBuiltinIntegerLiteralP\">_ExpressibleByBuiltinIntegerLiteral<\/Type><\/Declaration>",
        "key.bodylength" : 51,
        "key.bodyoffset" : 4518,
        "key.doc.declaration" : "@frozen struct UInt8 : FixedWidthInteger, UnsignedInteger",
        "key.doc.full_as_xml" : "<Class><Name>UInt8<\/Name><USR>s:s5UInt8V<\/USR><Declaration>@frozen struct UInt8 : FixedWidthInteger, UnsignedInteger<\/Declaration><CommentParts><Abstract><Para>An 8-bit unsigned integer value type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.name" : "UInt8",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 4503
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>UInt8<\/decl.name> : <ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol>, <ref.protocol usr=\"s:SU\">UnsignedInteger<\/ref.protocol>, <ref.protocol usr=\"s:s35_ExpressibleByBuiltinIntegerLiteralP\">_ExpressibleByBuiltinIntegerLiteral<\/ref.protocol><\/decl.struct>",
        "key.groupname" : "Math\/Integers",
        "key.inheritedtypes" : [
          {
            "key.name" : "TensorNumeric"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 84,
        "key.modulename" : "Swift",
        "key.name" : "UInt8",
        "key.namelength" : 5,
        "key.nameoffset" : 4496,
        "key.offset" : 4486,
        "key.parsed_declaration" : "extension UInt8: TensorNumeric",
        "key.parsed_scope.end" : 217,
        "key.parsed_scope.start" : 215,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4521
              }
            ],
            "key.bodylength" : 8,
            "key.bodyoffset" : 4559,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 40,
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 4539,
            "key.offset" : 4528,
            "key.overrides" : [
              {
                "key.usr" : "s:4main13TensorNumericP8dataTypeAA04DataE0OvpZ"
              }
            ],
            "key.parsed_declaration" : "public static var dataType: DataType",
            "key.parsed_scope.end" : 216,
            "key.parsed_scope.start" : 216,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:s5UInt8V4mainE8dataTypeAC04DataD0OvpZ"
          }
        ],
        "key.typename" : "UInt8.Type",
        "key.typeusr" : "$ss5UInt8VmD",
        "key.usr" : "s:s5UInt8V"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public final class AnyTensorStorage<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.final",
            "key.length" : 5,
            "key.offset" : 4579
          },
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 4572
          }
        ],
        "key.bodylength" : 2248,
        "key.bodyoffset" : 4609,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>AnyTensorStorage<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 2273,
        "key.name" : "AnyTensorStorage",
        "key.namelength" : 16,
        "key.nameoffset" : 4591,
        "key.offset" : 4585,
        "key.parsed_declaration" : "public final class AnyTensorStorage",
        "key.parsed_scope.end" : 289,
        "key.parsed_scope.start" : 219,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate let cTensor: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.fileprivate",
                "key.length" : 11,
                "key.offset" : 4612
              }
            ],
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensor<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 51,
            "key.name" : "cTensor",
            "key.namelength" : 7,
            "key.nameoffset" : 4628,
            "key.offset" : 4624,
            "key.parsed_declaration" : "fileprivate let cTensor: UnsafeMutablePointer<ccv_nnc_tensor_t>",
            "key.parsed_scope.end" : 220,
            "key.parsed_scope.start" : 220,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageC01cC033_C59670EF05D79618B17EDFA5C2551CEDLLXevp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate let original: Any?<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.fileprivate",
                "key.length" : 11,
                "key.offset" : 4678
              }
            ],
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>original<\/decl.name>: <decl.var.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>?<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 18,
            "key.name" : "original",
            "key.namelength" : 8,
            "key.nameoffset" : 4694,
            "key.offset" : 4690,
            "key.parsed_declaration" : "fileprivate let original: Any?",
            "key.parsed_scope.end" : 221,
            "key.parsed_scope.start" : 221,
            "key.typename" : "Any?",
            "key.typeusr" : "$sypSgD",
            "key.usr" : "s:4main16AnyTensorStorageC8original33_C59670EF05D79618B17EDFA5C2551CEDLLypSgvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private let selfOwned: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 4711
              }
            ],
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>selfOwned<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 19,
            "key.name" : "selfOwned",
            "key.namelength" : 9,
            "key.nameoffset" : 4723,
            "key.offset" : 4719,
            "key.parsed_declaration" : "private let selfOwned: Bool",
            "key.parsed_scope.end" : 222,
            "key.parsed_scope.start" : 222,
            "key.typename" : "Bool",
            "key.typeusr" : "$sSbD",
            "key.usr" : "s:4main16AnyTensorStorageC9selfOwned33_C59670EF05D79618B17EDFA5C2551CEDLLSbvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>init(_ cTensor: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;, original: Any? = nil, selfOwned: <Type usr=\"s:Sb\">Bool<\/Type> = true)<\/Declaration>",
            "key.bodylength" : 90,
            "key.bodyoffset" : 4853,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>cTensor<\/decl.var.parameter.name>: <decl.var.parameter.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>original<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>selfOwned<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type> = true<\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 202,
            "key.name" : "init(_:original:selfOwned:)",
            "key.namelength" : 109,
            "key.nameoffset" : 4742,
            "key.offset" : 4742,
            "key.parsed_declaration" : "init(\n  _ cTensor: UnsafeMutablePointer<ccv_nnc_tensor_t>, original: Any? = nil, selfOwned: Bool = true\n)",
            "key.parsed_scope.end" : 230,
            "key.parsed_scope.start" : 224,
            "key.substructure" : [

            ],
            "key.typename" : "(AnyTensorStorage.Type) -> (<<error type>>, Any?, Bool) -> AnyTensorStorage",
            "key.typeusr" : "$syXeXecD",
            "key.usr" : "s:4main16AnyTensorStorageCyXeXecfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>deinit<\/Declaration>",
            "key.bodylength" : 114,
            "key.bodyoffset" : 4956,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.destructor><syntaxtype.keyword>deinit<\/syntaxtype.keyword><\/decl.function.destructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 123,
            "key.name" : "deinit",
            "key.namelength" : 6,
            "key.nameoffset" : 4948,
            "key.offset" : 4948,
            "key.parsed_declaration" : "deinit",
            "key.parsed_scope.end" : 236,
            "key.parsed_scope.start" : 232,
            "key.substructure" : [

            ],
            "key.typename" : "(AnyTensorStorage) -> () -> ()",
            "key.typeusr" : "$syycD",
            "key.usr" : "s:4main16AnyTensorStorageCfd"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 58,
            "key.bodyoffset" : 5099,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 83,
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 5079,
            "key.offset" : 5075,
            "key.parsed_declaration" : "var dataType: DataType",
            "key.parsed_scope.end" : 240,
            "key.parsed_scope.start" : 238,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:4main16AnyTensorStorageC8dataTypeAA04DataF0Ovp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>func copy() -&gt; <Type usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/Type><\/Declaration>",
            "key.bodylength" : 343,
            "key.bodyoffset" : 5195,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>copy<\/decl.name>() -&gt; <decl.function.returntype><ref.class usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/ref.class><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 377,
            "key.name" : "copy()",
            "key.namelength" : 6,
            "key.nameoffset" : 5167,
            "key.offset" : 5162,
            "key.parsed_declaration" : "func copy() -> AnyTensorStorage",
            "key.parsed_scope.end" : 249,
            "key.parsed_scope.start" : 242,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var input: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>input<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 60,
                "key.name" : "input",
                "key.namelength" : 5,
                "key.nameoffset" : 5204,
                "key.offset" : 5200,
                "key.parsed_declaration" : "var input: UnsafeMutablePointer<ccv_nnc_tensor_t>? = cTensor",
                "key.parsed_scope.end" : 243,
                "key.parsed_scope.start" : 243,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main16AnyTensorStorageC4copyACyF5inputL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>var output: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>output<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 61,
                "key.name" : "output",
                "key.namelength" : 6,
                "key.nameoffset" : 5269,
                "key.offset" : 5265,
                "key.parsed_declaration" : "var output = ccv_nnc_tensor_new(nil, cTensor.pointee.info, 0)",
                "key.parsed_scope.end" : 244,
                "key.parsed_scope.start" : 244,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main16AnyTensorStorageC4copyACyF6outputL_Xevp"
              }
            ],
            "key.typename" : "(AnyTensorStorage) -> () -> AnyTensorStorage",
            "key.typeusr" : "$s4main16AnyTensorStorageCycD",
            "key.usr" : "s:4main16AnyTensorStorageC4copyACyF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>var increments: [<Type usr=\"s:Si\">Int<\/Type>] { get }<\/Declaration>",
            "key.bodylength" : 325,
            "key.bodyoffset" : 5566,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>increments<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 349,
            "key.name" : "increments",
            "key.namelength" : 10,
            "key.nameoffset" : 5547,
            "key.offset" : 5543,
            "key.parsed_declaration" : "var increments: [Int]",
            "key.parsed_scope.end" : 260,
            "key.parsed_scope.start" : 251,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageC10incrementsSaySiGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let type: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>type<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 36,
            "key.name" : "type",
            "key.namelength" : 4,
            "key.nameoffset" : 5575,
            "key.offset" : 5571,
            "key.parsed_declaration" : "let type = Int(cTensor.pointee.type)",
            "key.parsed_scope.end" : 252,
            "key.parsed_scope.start" : 252,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4type2ofq_x_tr0_lF\">type(of:)<\/RelatedName>"
              }
            ],
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageC10incrementsSaySiGvg4typeL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let inc: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>inc<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 122,
            "key.name" : "inc",
            "key.namelength" : 3,
            "key.nameoffset" : 5738,
            "key.offset" : 5734,
            "key.parsed_declaration" : "let inc = UnsafeMutableRawPointer(cTensor).bindMemory(\n  to: ccv_nnc_tensor_view_t.self, capacity: 1\n).pointee.inc",
            "key.parsed_scope.end" : 256,
            "key.parsed_scope.start" : 256,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageC10incrementsSaySiGvg3incL_Xevp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>subscript&lt;Element&gt;(indices: [<Type usr=\"s:Si\">Int<\/Type>], type: <Type usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/Type>.Type) -&gt; <Type usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/Type> where Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type> { get set }<\/Declaration>",
            "key.bodylength" : 877,
            "key.bodyoffset" : 5978,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>subscript<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>indices<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>type<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/ref.generic_type_param>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/ref.generic_type_param><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 960,
            "key.name" : "subscript(_:_:)",
            "key.namelength" : 69,
            "key.nameoffset" : 5896,
            "key.offset" : 5896,
            "key.parsed_declaration" : "subscript<Element: TensorNumeric>(indices: [Int], type: Element.Type) -> Element",
            "key.parsed_scope.end" : 288,
            "key.parsed_scope.start" : 262,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluip\">subscript(_:_:_:)<\/RelatedName>"
              }
            ],
            "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 13,
                    "key.offset" : 5915
                  }
                ],
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Element<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "TensorNumeric"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 22,
                "key.name" : "Element",
                "key.namelength" : 7,
                "key.nameoffset" : 5906,
                "key.offset" : 5906,
                "key.parsed_declaration" : "subscript<Element: TensorNumeric",
                "key.parsed_scope.end" : 262,
                "key.parsed_scope.start" : 262,
                "key.typename" : "Element.Type",
                "key.typeusr" : "$sxmD",
                "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip7ElementL_xmfp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> ([Int], Element.Type) -> Element",
            "key.typeusr" : "$syxSaySiG_xmtc4main13TensorNumericRzluD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip"
          },
          {
            "key.annotated_decl" : "<Declaration>let increments: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>increments<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 32,
            "key.name" : "increments",
            "key.namelength" : 10,
            "key.nameoffset" : 5999,
            "key.offset" : 5995,
            "key.parsed_declaration" : "let increments = self.increments",
            "key.parsed_scope.end" : 264,
            "key.parsed_scope.start" : 264,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageC10incrementsSaySiGvp\">increments<\/RelatedName>"
              }
            ],
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluig10incrementsL_ADvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 35,
            "key.name" : "count",
            "key.namelength" : 5,
            "key.nameoffset" : 6086,
            "key.offset" : 6082,
            "key.parsed_declaration" : "let count = increments.reduce(1, *)",
            "key.parsed_scope.end" : 266,
            "key.parsed_scope.start" : 266,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluig5countL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let pointer: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pointer<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 84,
            "key.name" : "pointer",
            "key.namelength" : 7,
            "key.nameoffset" : 6128,
            "key.offset" : 6124,
            "key.parsed_declaration" : "let pointer = cTensor.pointee.data.ptr.bindMemory(to: Element.self, capacity: count)",
            "key.parsed_scope.end" : 267,
            "key.parsed_scope.start" : 267,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluig7pointerL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var offset: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>offset<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 14,
            "key.name" : "offset",
            "key.namelength" : 6,
            "key.nameoffset" : 6219,
            "key.offset" : 6215,
            "key.parsed_declaration" : "var offset = 0",
            "key.parsed_scope.end" : 268,
            "key.parsed_scope.start" : 268,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluig6offsetL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let increments: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>increments<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 32,
            "key.name" : "increments",
            "key.namelength" : 10,
            "key.nameoffset" : 6418,
            "key.offset" : 6414,
            "key.parsed_declaration" : "let increments = self.increments",
            "key.parsed_scope.end" : 276,
            "key.parsed_scope.start" : 276,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageC10incrementsSaySiGvp\">increments<\/RelatedName>"
              }
            ],
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluis10incrementsL_ADvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 35,
            "key.name" : "count",
            "key.namelength" : 5,
            "key.nameoffset" : 6505,
            "key.offset" : 6501,
            "key.parsed_declaration" : "let count = increments.reduce(1, *)",
            "key.parsed_scope.end" : 278,
            "key.parsed_scope.start" : 278,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluis5countL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let pointer: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pointer<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 84,
            "key.name" : "pointer",
            "key.namelength" : 7,
            "key.nameoffset" : 6589,
            "key.offset" : 6585,
            "key.parsed_declaration" : "let pointer = cTensor.pointee.data.ptr.bindMemory(to: Element.self, capacity: count)",
            "key.parsed_scope.end" : 280,
            "key.parsed_scope.start" : 280,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluis7pointerL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var offset: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>offset<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 14,
            "key.name" : "offset",
            "key.namelength" : 6,
            "key.nameoffset" : 6680,
            "key.offset" : 6676,
            "key.parsed_declaration" : "var offset = 0",
            "key.parsed_scope.end" : 281,
            "key.parsed_scope.start" : 281,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluis6offsetL_Sivp"
          }
        ],
        "key.typename" : "AnyTensorStorage.Type",
        "key.typeusr" : "$s4main16AnyTensorStorageCmD",
        "key.usr" : "s:4main16AnyTensorStorageC"
      },
      {
        "key.annotated_decl" : "<Declaration>public final class AnyTensorStorage<\/Declaration>",
        "key.bodylength" : 2983,
        "key.bodyoffset" : 6888,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>AnyTensorStorage<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 3012,
        "key.name" : "AnyTensorStorage",
        "key.namelength" : 16,
        "key.nameoffset" : 6870,
        "key.offset" : 6860,
        "key.parsed_declaration" : "extension AnyTensorStorage",
        "key.parsed_scope.end" : 359,
        "key.parsed_scope.start" : 291,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>subscript&lt;Element&gt;(ranges: [<Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;], type: <Type usr=\"s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/Type>.Type) -&gt; <Type usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/Type> where Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type> { get set }<\/Declaration>",
            "key.bodylength" : 2881,
            "key.bodyoffset" : 6988,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>subscript<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip7ElementL_xmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>ranges<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>type<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/ref.generic_type_param>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/ref.class><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 2979,
            "key.name" : "subscript(_:_:)",
            "key.namelength" : 75,
            "key.nameoffset" : 6891,
            "key.offset" : 6891,
            "key.parsed_declaration" : "subscript<Element: TensorNumeric>(ranges: [Range<Int>], type: Element.Type) -> AnyTensorStorage",
            "key.parsed_scope.end" : 358,
            "key.parsed_scope.start" : 292,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluip\">subscript(_:_:_:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 13,
                    "key.offset" : 6910
                  }
                ],
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Element<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "TensorNumeric"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 22,
                "key.name" : "Element",
                "key.namelength" : 7,
                "key.nameoffset" : 6901,
                "key.offset" : 6901,
                "key.parsed_declaration" : "subscript<Element: TensorNumeric",
                "key.parsed_scope.end" : 292,
                "key.parsed_scope.start" : 292,
                "key.typename" : "Element.Type",
                "key.typeusr" : "$sxmD",
                "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip7ElementL_xmfp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> ([Range<Int>], Element.Type) -> AnyTensorStorage",
            "key.typeusr" : "$sy4main16AnyTensorStorageCSaySnySiGG_xmtcAA0C7NumericRzluD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip"
          },
          {
            "key.annotated_decl" : "<Declaration>let cTensorParams: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensorParams<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 40,
            "key.name" : "cTensorParams",
            "key.namelength" : 13,
            "key.nameoffset" : 7055,
            "key.offset" : 7051,
            "key.parsed_declaration" : "let cTensorParams = cTensor.pointee.info",
            "key.parsed_scope.end" : 295,
            "key.parsed_scope.start" : 295,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig01cC6ParamsL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let device: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>device<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 58,
            "key.name" : "device",
            "key.namelength" : 6,
            "key.nameoffset" : 7102,
            "key.offset" : 7098,
            "key.parsed_declaration" : "let device = DeviceKind.from(cTensorParams: cTensorParams)",
            "key.parsed_scope.end" : 296,
            "key.parsed_scope.start" : 296,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig6deviceL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let format: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>format<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 60,
            "key.name" : "format",
            "key.namelength" : 6,
            "key.nameoffset" : 7167,
            "key.offset" : 7163,
            "key.parsed_declaration" : "let format = TensorFormat.from(cTensorParams: cTensorParams)",
            "key.parsed_scope.end" : 297,
            "key.parsed_scope.start" : 297,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig6formatL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let increments: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>increments<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 32,
            "key.name" : "increments",
            "key.namelength" : 10,
            "key.nameoffset" : 7234,
            "key.offset" : 7230,
            "key.parsed_declaration" : "let increments = self.increments",
            "key.parsed_scope.end" : 298,
            "key.parsed_scope.start" : 298,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageC10incrementsSaySiGvp\">increments<\/RelatedName>"
              }
            ],
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig10incrementsL_SaySiGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let offset: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>offset<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 41,
            "key.name" : "offset",
            "key.namelength" : 6,
            "key.nameoffset" : 7522,
            "key.offset" : 7518,
            "key.parsed_declaration" : "let offset = ranges.map { $0.lowerBound }",
            "key.parsed_scope.end" : 304,
            "key.parsed_scope.start" : 304,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig6offsetL_SaySiGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let dimensions: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>dimensions<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 40,
            "key.name" : "dimensions",
            "key.namelength" : 10,
            "key.nameoffset" : 7570,
            "key.offset" : 7566,
            "key.parsed_declaration" : "let dimensions = ranges.map { $0.count }",
            "key.parsed_scope.end" : 305,
            "key.parsed_scope.start" : 305,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig10dimensionsL_SaySiGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var cOffset: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cOffset<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 35,
            "key.name" : "cOffset",
            "key.namelength" : 7,
            "key.nameoffset" : 7617,
            "key.offset" : 7613,
            "key.parsed_declaration" : "var cOffset = toCDimensions(offset)",
            "key.parsed_scope.end" : 306,
            "key.parsed_scope.start" : 306,
            "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
            "key.typeusr" : "$ss5Int32V_A7BtD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig7cOffsetL_s5Int32V_A7Itvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var cIncrements: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cIncrements<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 43,
            "key.name" : "cIncrements",
            "key.namelength" : 11,
            "key.nameoffset" : 7659,
            "key.offset" : 7655,
            "key.parsed_declaration" : "var cIncrements = toCDimensions(increments)",
            "key.parsed_scope.end" : 307,
            "key.parsed_scope.start" : 307,
            "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
            "key.typeusr" : "$ss5Int32V_A7BtD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig11cIncrementsL_s5Int32V_A7Itvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let newt: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>newt<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 349,
            "key.name" : "newt",
            "key.namelength" : 4,
            "key.nameoffset" : 7709,
            "key.offset" : 7705,
            "key.parsed_declaration" : "let newt = withUnsafePointer(to: &cOffset.0) { cOffset in\n  withUnsafePointer(to: &cIncrements.0) { cIncrements in\n    ccv_nnc_tensor_view_new(\n      cTensor,\n      toCTensorParams(\n        device, dataType: Element.dataType, format: format, dimensions: dimensions), cOffset,\n      cIncrements)!\n  }\n}",
            "key.parsed_scope.end" : 308,
            "key.parsed_scope.start" : 308,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluig4newtL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let cTensorParams: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensorParams<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 40,
            "key.name" : "cTensorParams",
            "key.namelength" : 13,
            "key.nameoffset" : 8215,
            "key.offset" : 8211,
            "key.parsed_declaration" : "let cTensorParams = cTensor.pointee.info",
            "key.parsed_scope.end" : 322,
            "key.parsed_scope.start" : 322,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis01cC6ParamsL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let device: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>device<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 58,
            "key.name" : "device",
            "key.namelength" : 6,
            "key.nameoffset" : 8262,
            "key.offset" : 8258,
            "key.parsed_declaration" : "let device = DeviceKind.from(cTensorParams: cTensorParams)",
            "key.parsed_scope.end" : 323,
            "key.parsed_scope.start" : 323,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis6deviceL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let format: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>format<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 60,
            "key.name" : "format",
            "key.namelength" : 6,
            "key.nameoffset" : 8327,
            "key.offset" : 8323,
            "key.parsed_declaration" : "let format = TensorFormat.from(cTensorParams: cTensorParams)",
            "key.parsed_scope.end" : 324,
            "key.parsed_scope.start" : 324,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis6formatL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let increments: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>increments<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 32,
            "key.name" : "increments",
            "key.namelength" : 10,
            "key.nameoffset" : 8394,
            "key.offset" : 8390,
            "key.parsed_declaration" : "let increments = self.increments",
            "key.parsed_scope.end" : 325,
            "key.parsed_scope.start" : 325,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageC10incrementsSaySiGvp\">increments<\/RelatedName>"
              }
            ],
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis10incrementsL_SaySiGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let offset: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>offset<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 41,
            "key.name" : "offset",
            "key.namelength" : 6,
            "key.nameoffset" : 8682,
            "key.offset" : 8678,
            "key.parsed_declaration" : "let offset = ranges.map { $0.lowerBound }",
            "key.parsed_scope.end" : 331,
            "key.parsed_scope.start" : 331,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis6offsetL_SaySiGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let dimensions: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>dimensions<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 40,
            "key.name" : "dimensions",
            "key.namelength" : 10,
            "key.nameoffset" : 8730,
            "key.offset" : 8726,
            "key.parsed_declaration" : "let dimensions = ranges.map { $0.count }",
            "key.parsed_scope.end" : 332,
            "key.parsed_scope.start" : 332,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis10dimensionsL_SaySiGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var cOffset: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cOffset<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 35,
            "key.name" : "cOffset",
            "key.namelength" : 7,
            "key.nameoffset" : 8777,
            "key.offset" : 8773,
            "key.parsed_declaration" : "var cOffset = toCDimensions(offset)",
            "key.parsed_scope.end" : 333,
            "key.parsed_scope.start" : 333,
            "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
            "key.typeusr" : "$ss5Int32V_A7BtD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis7cOffsetL_s5Int32V_A7Itvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var cIncrements: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cIncrements<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 43,
            "key.name" : "cIncrements",
            "key.namelength" : 11,
            "key.nameoffset" : 8819,
            "key.offset" : 8815,
            "key.parsed_declaration" : "var cIncrements = toCDimensions(increments)",
            "key.parsed_scope.end" : 334,
            "key.parsed_scope.start" : 334,
            "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
            "key.typeusr" : "$ss5Int32V_A7BtD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis11cIncrementsL_s5Int32V_A7Itvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var newt: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>newt<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 344,
            "key.name" : "newt",
            "key.namelength" : 4,
            "key.nameoffset" : 8869,
            "key.offset" : 8865,
            "key.parsed_declaration" : "var newt = withUnsafePointer(to: &cOffset.0) { cOffset in\n  withUnsafePointer(to: &cIncrements.0) { cIncrements in\n    ccv_nnc_tensor_view(\n      cTensor,\n      toCTensorParams(\n        device, dataType: Element.dataType, format: format, dimensions: dimensions), cOffset,\n      cIncrements)\n  }\n}",
            "key.parsed_scope.end" : 335,
            "key.parsed_scope.start" : 335,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis4newtL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>let inputDim: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>inputDim<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 58,
            "key.name" : "inputDim",
            "key.namelength" : 8,
            "key.nameoffset" : 9220,
            "key.offset" : 9216,
            "key.parsed_declaration" : "let inputDim = fromCDimensions(v.cTensor.pointee.info.dim)",
            "key.parsed_scope.end" : 344,
            "key.parsed_scope.start" : 344,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis8inputDimL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var input: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>input<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 62,
            "key.name" : "input",
            "key.namelength" : 5,
            "key.nameoffset" : 9388,
            "key.offset" : 9384,
            "key.parsed_declaration" : "var input: UnsafeMutablePointer<ccv_nnc_tensor_t>? = v.cTensor",
            "key.parsed_scope.end" : 348,
            "key.parsed_scope.start" : 348,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluis5inputL_Xevp"
          }
        ],
        "key.typename" : "AnyTensorStorage.Type",
        "key.typeusr" : "$s4main16AnyTensorStorageCmD",
        "key.usr" : "s:4main16AnyTensorStorageC"
      },
      {
        "key.annotated_decl" : "<Declaration>public final class AnyTensorStorage<\/Declaration>",
        "key.bodylength" : 1649,
        "key.bodyoffset" : 9902,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>AnyTensorStorage<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1678,
        "key.name" : "AnyTensorStorage",
        "key.namelength" : 16,
        "key.nameoffset" : 9884,
        "key.offset" : 9874,
        "key.parsed_declaration" : "extension AnyTensorStorage",
        "key.parsed_scope.end" : 401,
        "key.parsed_scope.start" : 361,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>subscript&lt;Element&gt;(indices: [<Type usr=\"s:Si\">Int<\/Type>], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;, type: <Type usr=\"s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/Type>.Type) -&gt; [<Type usr=\"s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/Type>] where Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type> { get set }<\/Declaration>",
            "key.bodylength" : 1535,
            "key.bodyoffset" : 10014,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>subscript<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluip7ElementL_xmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>indices<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>type<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/ref.generic_type_param>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluip7ElementL_xmfp\">Element<\/ref.generic_type_param>]<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 1645,
            "key.name" : "subscript(_:_:_:)",
            "key.namelength" : 88,
            "key.nameoffset" : 9905,
            "key.offset" : 9905,
            "key.parsed_declaration" : "subscript<Element: TensorNumeric>(indices: [Int], range: Range<Int>, type: Element.Type)\n  -> [Element]",
            "key.parsed_scope.end" : 400,
            "key.parsed_scope.start" : 362,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageCyxSaySiG_xmtcAA0C7NumericRzluip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageCyACSaySnySiGG_xmtcAA0C7NumericRzluip\">subscript(_:_:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 13,
                    "key.offset" : 9924
                  }
                ],
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Element<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "TensorNumeric"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 22,
                "key.name" : "Element",
                "key.namelength" : 7,
                "key.nameoffset" : 9915,
                "key.offset" : 9915,
                "key.parsed_declaration" : "subscript<Element: TensorNumeric",
                "key.parsed_scope.end" : 362,
                "key.parsed_scope.start" : 362,
                "key.typename" : "Element.Type",
                "key.typeusr" : "$sxmD",
                "key.usr" : "s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluip7ElementL_xmfp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> ([Int], Range<Int>, Element.Type) -> [Element]",
            "key.typeusr" : "$sySayxGSaySiG_SnySiGxmtc4main13TensorNumericRzluD",
            "key.usr" : "s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluip"
          },
          {
            "key.annotated_decl" : "<Declaration>let increments: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>increments<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 32,
            "key.name" : "increments",
            "key.namelength" : 10,
            "key.nameoffset" : 10035,
            "key.offset" : 10031,
            "key.parsed_declaration" : "let increments = self.increments",
            "key.parsed_scope.end" : 366,
            "key.parsed_scope.start" : 366,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageC10incrementsSaySiGvp\">increments<\/RelatedName>"
              }
            ],
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluig10incrementsL_AEvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 35,
            "key.name" : "count",
            "key.namelength" : 5,
            "key.nameoffset" : 10126,
            "key.offset" : 10122,
            "key.parsed_declaration" : "let count = increments.reduce(1, *)",
            "key.parsed_scope.end" : 368,
            "key.parsed_scope.start" : 368,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluig5countL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let pointer: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pointer<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 84,
            "key.name" : "pointer",
            "key.namelength" : 7,
            "key.nameoffset" : 10168,
            "key.offset" : 10164,
            "key.parsed_declaration" : "let pointer = cTensor.pointee.data.ptr.bindMemory(to: Element.self, capacity: count)",
            "key.parsed_scope.end" : 369,
            "key.parsed_scope.start" : 369,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluig7pointerL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var offset: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>offset<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 14,
            "key.name" : "offset",
            "key.namelength" : 6,
            "key.nameoffset" : 10427,
            "key.offset" : 10423,
            "key.parsed_declaration" : "var offset = 0",
            "key.parsed_scope.end" : 372,
            "key.parsed_scope.start" : 372,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluig6offsetL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let increments: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>increments<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 32,
            "key.name" : "increments",
            "key.namelength" : 10,
            "key.nameoffset" : 10768,
            "key.offset" : 10764,
            "key.parsed_declaration" : "let increments = self.increments",
            "key.parsed_scope.end" : 382,
            "key.parsed_scope.start" : 382,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main16AnyTensorStorageC10incrementsSaySiGvp\">increments<\/RelatedName>"
              }
            ],
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluis10incrementsL_AEvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 35,
            "key.name" : "count",
            "key.namelength" : 5,
            "key.nameoffset" : 10859,
            "key.offset" : 10855,
            "key.parsed_declaration" : "let count = increments.reduce(1, *)",
            "key.parsed_scope.end" : 384,
            "key.parsed_scope.start" : 384,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluis5countL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let pointer: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pointer<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 84,
            "key.name" : "pointer",
            "key.namelength" : 7,
            "key.nameoffset" : 10901,
            "key.offset" : 10897,
            "key.parsed_declaration" : "let pointer = cTensor.pointee.data.ptr.bindMemory(to: Element.self, capacity: count)",
            "key.parsed_scope.end" : 385,
            "key.parsed_scope.start" : 385,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluis7pointerL_Xevp"
          },
          {
            "key.annotated_decl" : "<Declaration>var offset: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>offset<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 14,
            "key.name" : "offset",
            "key.namelength" : 6,
            "key.nameoffset" : 11197,
            "key.offset" : 11193,
            "key.parsed_declaration" : "var offset = 0",
            "key.parsed_scope.end" : 389,
            "key.parsed_scope.start" : 389,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:4main16AnyTensorStorageCySayxGSaySiG_SnySiGxmtcAA0C7NumericRzluis6offsetL_Sivp"
          }
        ],
        "key.typename" : "AnyTensorStorage.Type",
        "key.typeusr" : "$s4main16AnyTensorStorageCmD",
        "key.usr" : "s:4main16AnyTensorStorageC"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public protocol AnyTensor<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 11580
          }
        ],
        "key.bodylength" : 103,
        "key.bodyoffset" : 11607,
        "key.doc.column" : 17,
        "key.doc.comment" : "A type-erased tensor.",
        "key.doc.declaration" : "public protocol AnyTensor",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"404\" column=\"17\"><Name>AnyTensor<\/Name><USR>s:4main9AnyTensorP<\/USR><Declaration>public protocol AnyTensor<\/Declaration><CommentParts><Abstract><Para>A type-erased tensor.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 404,
        "key.doc.name" : "AnyTensor",
        "key.doc.type" : "Class",
        "key.doclength" : 26,
        "key.docoffset" : 11554,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>AnyTensor<\/decl.name><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.protocol",
        "key.length" : 124,
        "key.name" : "AnyTensor",
        "key.namelength" : 9,
        "key.nameoffset" : 11596,
        "key.offset" : 11587,
        "key.parsed_declaration" : "public protocol AnyTensor",
        "key.parsed_scope.end" : 407,
        "key.parsed_scope.start" : 404,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var storage: <Type usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 11641,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>storage<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/ref.class><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 37,
            "key.name" : "storage",
            "key.namelength" : 7,
            "key.nameoffset" : 11614,
            "key.offset" : 11610,
            "key.parsed_declaration" : "var storage: AnyTensorStorage",
            "key.parsed_scope.end" : 405,
            "key.parsed_scope.start" : 405,
            "key.typename" : "AnyTensorStorage",
            "key.typeusr" : "$s4main16AnyTensorStorageCD",
            "key.usr" : "s:4main9AnyTensorP7storageAA0bC7StorageCvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var cTensor: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt; { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 11703,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cTensor<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 59,
            "key.name" : "cTensor",
            "key.namelength" : 7,
            "key.nameoffset" : 11654,
            "key.offset" : 11650,
            "key.parsed_declaration" : "var cTensor: UnsafeMutablePointer<ccv_nnc_tensor_t>",
            "key.parsed_scope.end" : 406,
            "key.parsed_scope.start" : 406,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main9AnyTensorP01cC0Xevp"
          }
        ],
        "key.typename" : "AnyTensor.Protocol",
        "key.typeusr" : "$s4main9AnyTensor_pmD",
        "key.usr" : "s:4main9AnyTensorP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol AnyTensor<\/Declaration>",
        "key.bodylength" : 764,
        "key.bodyoffset" : 11734,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol AnyTensor",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"404\" column=\"17\"><Name>AnyTensor<\/Name><USR>s:4main9AnyTensorP<\/USR><Declaration>public protocol AnyTensor<\/Declaration><CommentParts><Abstract><Para>A type-erased tensor.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 404,
        "key.doc.name" : "AnyTensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>AnyTensor<\/decl.name><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 786,
        "key.name" : "AnyTensor",
        "key.namelength" : 9,
        "key.nameoffset" : 11723,
        "key.offset" : 11713,
        "key.parsed_declaration" : "extension AnyTensor",
        "key.parsed_scope.end" : 440,
        "key.parsed_scope.start" : 409,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 11737
              }
            ],
            "key.bodylength" : 58,
            "key.bodyoffset" : 11768,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dataType<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 83,
            "key.name" : "dataType",
            "key.namelength" : 8,
            "key.nameoffset" : 11748,
            "key.offset" : 11744,
            "key.parsed_declaration" : "public var dataType: DataType",
            "key.parsed_scope.end" : 412,
            "key.parsed_scope.start" : 410,
            "key.typename" : "DataType",
            "key.typeusr" : "$s4main8DataTypeOD",
            "key.usr" : "s:4main9AnyTensorPAAE8dataTypeAA04DataE0Ovp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 11831
              }
            ],
            "key.bodylength" : 60,
            "key.bodyoffset" : 11860,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>kind<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 83,
            "key.name" : "kind",
            "key.namelength" : 4,
            "key.nameoffset" : 11842,
            "key.offset" : 11838,
            "key.parsed_declaration" : "public var kind: DeviceKind",
            "key.parsed_scope.end" : 416,
            "key.parsed_scope.start" : 414,
            "key.typename" : "DeviceKind",
            "key.typeusr" : "$s4main10DeviceKindOD",
            "key.usr" : "s:4main9AnyTensorPAAE4kindAA10DeviceKindOvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 11925
              }
            ],
            "key.bodylength" : 62,
            "key.bodyoffset" : 11958,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>format<\/decl.name>: <decl.var.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 89,
            "key.name" : "format",
            "key.namelength" : 6,
            "key.nameoffset" : 11936,
            "key.offset" : 11932,
            "key.parsed_declaration" : "public var format: TensorFormat",
            "key.parsed_scope.end" : 420,
            "key.parsed_scope.start" : 418,
            "key.typename" : "TensorFormat",
            "key.typeusr" : "$s4main12TensorFormatOD",
            "key.usr" : "s:4main9AnyTensorPAAE6formatAA0C6FormatOvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var dimensions: [<Type usr=\"s:Si\">Int<\/Type>] { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 12025
              }
            ],
            "key.bodylength" : 49,
            "key.bodyoffset" : 12055,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>dimensions<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 73,
            "key.name" : "dimensions",
            "key.namelength" : 10,
            "key.nameoffset" : 12036,
            "key.offset" : 12032,
            "key.parsed_declaration" : "public var dimensions: [Int]",
            "key.parsed_scope.end" : 424,
            "key.parsed_scope.start" : 422,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main9AnyTensorPAAE10dimensionsSaySiGvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var isTensorView: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 12109
              }
            ],
            "key.bodylength" : 99,
            "key.bodyoffset" : 12140,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isTensorView<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 124,
            "key.name" : "isTensorView",
            "key.namelength" : 12,
            "key.nameoffset" : 12120,
            "key.offset" : 12116,
            "key.parsed_declaration" : "public var isTensorView: Bool",
            "key.parsed_scope.end" : 429,
            "key.parsed_scope.start" : 426,
            "key.typename" : "Bool",
            "key.typeusr" : "$sSbD",
            "key.usr" : "s:4main9AnyTensorPAAE02isC4ViewSbvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let type: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>type<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 36,
            "key.name" : "type",
            "key.namelength" : 4,
            "key.nameoffset" : 12149,
            "key.offset" : 12145,
            "key.parsed_declaration" : "let type = Int(cTensor.pointee.type)",
            "key.parsed_scope.end" : 427,
            "key.parsed_scope.start" : 427,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4type2ofq_x_tr0_lF\">type(of:)<\/RelatedName>"
              }
            ],
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main9AnyTensorPAAE02isC4ViewSbvg4typeL_Xevp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var increments: [<Type usr=\"s:Si\">Int<\/Type>] { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 12244
              }
            ],
            "key.bodylength" : 222,
            "key.bodyoffset" : 12274,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>increments<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 246,
            "key.name" : "increments",
            "key.namelength" : 10,
            "key.nameoffset" : 12255,
            "key.offset" : 12251,
            "key.parsed_declaration" : "public var increments: [Int]",
            "key.parsed_scope.end" : 439,
            "key.parsed_scope.start" : 431,
            "key.typename" : "[Int]",
            "key.typeusr" : "$sSaySiGD",
            "key.usr" : "s:4main9AnyTensorPAAE10incrementsSaySiGvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let inc: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>inc<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 122,
            "key.name" : "inc",
            "key.namelength" : 3,
            "key.nameoffset" : 12343,
            "key.offset" : 12339,
            "key.parsed_declaration" : "let inc = UnsafeMutableRawPointer(cTensor).bindMemory(\n  to: ccv_nnc_tensor_view_t.self, capacity: 1\n).pointee.inc",
            "key.parsed_scope.end" : 435,
            "key.parsed_scope.start" : 435,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main9AnyTensorPAAE10incrementsSaySiGvg3incL_Xevp"
          }
        ],
        "key.typename" : "AnyTensor.Protocol",
        "key.typeusr" : "$s4main9AnyTensor_pmD",
        "key.usr" : "s:4main9AnyTensorP"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 255,
        "key.bodyoffset" : 12519,
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"450\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 450,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 274,
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 12511,
        "key.offset" : 12501,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 447,
        "key.parsed_scope.start" : 442,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func withUnsafeBytes&lt;R&gt;(_ body: (<Type usr=\"s:SW\">UnsafeRawBufferPointer<\/Type>) throws -&gt; <Type usr=\"s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF1RL_qd__mfp\">R<\/Type>) rethrows -&gt; <Type usr=\"s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF1RL_qd__mfp\">R<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.rethrows",
                "key.length" : 8,
                "key.offset" : 12599
              },
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 12522
              }
            ],
            "key.bodylength" : 158,
            "key.bodyoffset" : 12614,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>withUnsafeBytes<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF1RL_qd__mfp\"><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SW\">UnsafeRawBufferPointer<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF1RL_qd__mfp\">R<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF1RL_qd__mfp\">R<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 244,
            "key.name" : "withUnsafeBytes(_:)",
            "key.namelength" : 64,
            "key.nameoffset" : 12534,
            "key.offset" : 12529,
            "key.parsed_declaration" : "public func withUnsafeBytes<R>(_ body: (UnsafeRawBufferPointer) throws -> R) rethrows -> R",
            "key.parsed_scope.end" : 446,
            "key.parsed_scope.start" : 443,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>R<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>",
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 1,
                "key.name" : "R",
                "key.namelength" : 1,
                "key.nameoffset" : 12550,
                "key.offset" : 12550,
                "key.parsed_declaration" : "public func withUnsafeBytes<R",
                "key.parsed_scope.end" : 443,
                "key.parsed_scope.start" : 443,
                "key.typename" : "R.Type",
                "key.typeusr" : "$sqd__mD",
                "key.usr" : "s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF1RL_qd__mfp"
              },
              {
                "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 60,
                "key.name" : "count",
                "key.namelength" : 5,
                "key.nameoffset" : 12623,
                "key.offset" : 12619,
                "key.parsed_declaration" : "let count = increments.reduce(MemoryLayout<Element>.size, *)",
                "key.parsed_scope.end" : 444,
                "key.parsed_scope.start" : 444,
                "key.typename" : "Int",
                "key.typeusr" : "$sSiD",
                "key.usr" : "s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF5countL_Sivp"
              }
            ],
            "key.typename" : "<Element, R where Element : TensorNumeric> (Tensor<Element>) -> ((UnsafeRawBufferPointer) throws -> R) throws -> R",
            "key.typeusr" : "$syqd__qd__SWKXEKcluD",
            "key.usr" : "s:4main6TensorV15withUnsafeBytesyqd__qd__SWKXEKlF"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 12800
          }
        ],
        "key.bodylength" : 3932,
        "key.bodyoffset" : 12857,
        "key.doc.column" : 15,
        "key.doc.comment" : "Basic tensor type.",
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"450\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 450,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.doclength" : 23,
        "key.docoffset" : 12777,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 9,
            "key.offset" : 12846
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "AnyTensor"
          }
        ],
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 3983,
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 12814,
        "key.offset" : 12807,
        "key.parsed_declaration" : "public struct Tensor<Element: TensorNumeric>: AnyTensor",
        "key.parsed_scope.end" : 577,
        "key.parsed_scope.start" : 450,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 13,
                "key.offset" : 12830
              }
            ],
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Element<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "TensorNumeric"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 22,
            "key.name" : "Element",
            "key.namelength" : 7,
            "key.nameoffset" : 12821,
            "key.offset" : 12821,
            "key.parsed_declaration" : "public struct Tensor<Element: TensorNumeric",
            "key.parsed_scope.end" : 450,
            "key.parsed_scope.start" : 450,
            "key.typename" : "Element.Type",
            "key.typeusr" : "$sxmD",
            "key.usr" : "s:4main6TensorV7Elementxmfp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public private(set) var storage: <Type usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.setter_access.private",
                "key.length" : 12,
                "key.offset" : 12868
              },
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 12861
              }
            ],
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>private<\/syntaxtype.keyword>(set) <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>storage<\/decl.name>: <decl.var.type><ref.class usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/ref.class><\/decl.var.type> { get }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 29,
            "key.name" : "storage",
            "key.namelength" : 7,
            "key.nameoffset" : 12885,
            "key.offset" : 12881,
            "key.parsed_declaration" : "public private(set) var storage: AnyTensorStorage",
            "key.parsed_scope.end" : 452,
            "key.parsed_scope.start" : 452,
            "key.setter_accessibility" : "source.lang.swift.accessibility.private",
            "key.typename" : "AnyTensorStorage",
            "key.typeusr" : "$s4main16AnyTensorStorageCD",
            "key.usr" : "s:4main6TensorV7storageAA03AnyB7StorageCvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var cTensor: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt; { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 12913
              }
            ],
            "key.bodylength" : 17,
            "key.bodyoffset" : 12973,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cTensor<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 71,
            "key.name" : "cTensor",
            "key.namelength" : 7,
            "key.nameoffset" : 12924,
            "key.offset" : 12920,
            "key.parsed_declaration" : "public var cTensor: UnsafeMutablePointer<ccv_nnc_tensor_t>",
            "key.parsed_scope.end" : 453,
            "key.parsed_scope.start" : 453,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main6TensorV01cB0Xevp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private init(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type>, format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>])<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 12995
              }
            ],
            "key.bodylength" : 191,
            "key.bodyoffset" : 13090,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dataType<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 279,
            "key.name" : "init(_:dataType:format:dimensions:)",
            "key.namelength" : 85,
            "key.nameoffset" : 13003,
            "key.offset" : 13003,
            "key.parsed_declaration" : "private init(_ kind: DeviceKind, dataType: DataType, format: TensorFormat, dimensions: [Int])",
            "key.parsed_scope.end" : 461,
            "key.parsed_scope.start" : 455,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B15DimensionFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGAA10DeviceKindO_AA0B6FormatOSaySiGtcfc\">init(_: DeviceKind, format: TensorFormat, dimensions: [Int])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B15DimensionFormatOtcfc\">init(_: DeviceKind, _: TensorDimensionFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, format: TensorFormat, dimensions: [Int]) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: TensorDimensionFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensions20unsafeMutablePointer9keepAliveACyxGAA10DeviceKindO_AA0B6FormatOSaySiGSpyxGyptcfc\">init(_:format:dimensions:unsafeMutablePointer:keepAlive:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let cTensor: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensor<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 143,
                "key.name" : "cTensor",
                "key.namelength" : 7,
                "key.nameoffset" : 13099,
                "key.offset" : 13095,
                "key.parsed_declaration" : "let cTensor = ccv_nnc_tensor_new(\n  nil,\n  toCTensorParams(kind, dataType: dataType, format: format, dimensions: dimensions),\n  0)!",
                "key.parsed_scope.end" : 456,
                "key.parsed_scope.start" : 456,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV01cB0Xevp\">cTensor<\/RelatedName>"
                  }
                ],
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV_8dataType6format10dimensionsACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOSaySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc01cB0L_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (DeviceKind, DataType, TensorFormat, [Int]) -> Tensor<Element>",
            "key.typeusr" : "$s_8dataType6format10dimensions4main6TensorVyxGAD10DeviceKindO_AD04DataB0OAD0F6FormatOSaySiGtcD",
            "key.usr" : "s:4main6TensorV_8dataType6format10dimensionsACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOSaySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private init(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, _ dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type>, _ dimensionFormat: <Type usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 13286
              }
            ],
            "key.bodylength" : 128,
            "key.bodyoffset" : 13384,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dataType<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 219,
            "key.name" : "init(_:_:_:)",
            "key.namelength" : 88,
            "key.nameoffset" : 13294,
            "key.offset" : 13294,
            "key.parsed_declaration" : "private init(_ kind: DeviceKind, _ dataType: DataType, _ dimensionFormat: TensorDimensionFormat)",
            "key.parsed_scope.end" : 467,
            "key.parsed_scope.start" : 463,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format10dimensionsACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOSaySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:dimensions:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGAA10DeviceKindO_AA0B6FormatOSaySiGtcfc\">init(_: DeviceKind, format: TensorFormat, dimensions: [Int])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B15DimensionFormatOtcfc\">init(_: DeviceKind, _: TensorDimensionFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, format: TensorFormat, dimensions: [Int]) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: TensorDimensionFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensions20unsafeMutablePointer9keepAliveACyxGAA10DeviceKindO_AA0B6FormatOSaySiGSpyxGyptcfc\">init(_:format:dimensions:unsafeMutablePointer:keepAlive:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (DeviceKind, DataType, TensorDimensionFormat) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGAA10DeviceKindO_AA8DataTypeOAA0B15DimensionFormatOtcD",
            "key.usr" : "s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B15DimensionFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>init(_ tensor: <Type usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/Type>)<\/Declaration>",
            "key.bodylength" : 24,
            "key.bodyoffset" : 13551,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tensor<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:4main16AnyTensorStorageC\">AnyTensorStorage<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 59,
            "key.name" : "init(_:)",
            "key.namelength" : 32,
            "key.nameoffset" : 13517,
            "key.offset" : 13517,
            "key.parsed_declaration" : "init(_ tensor: AnyTensorStorage)",
            "key.parsed_scope.end" : 471,
            "key.parsed_scope.start" : 469,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format10dimensionsACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOSaySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:dimensions:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B15DimensionFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGAA10DeviceKindO_AA0B6FormatOSaySiGtcfc\">init(_: DeviceKind, format: TensorFormat, dimensions: [Int])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B15DimensionFormatOtcfc\">init(_: DeviceKind, _: TensorDimensionFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, format: TensorFormat, dimensions: [Int]) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: TensorDimensionFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensions20unsafeMutablePointer9keepAliveACyxGAA10DeviceKindO_AA0B6FormatOSaySiGSpyxGyptcfc\">init(_:format:dimensions:unsafeMutablePointer:keepAlive:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (AnyTensorStorage) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGAA03AnyB7StorageCcD",
            "key.usr" : "s:4main6TensorVyACyxGAA03AnyB7StorageCcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ tensor: <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 13698
              }
            ],
            "key.bodylength" : 80,
            "key.bodyoffset" : 13732,
            "key.doc.column" : 10,
            "key.doc.comment" : " Create a typed tensor from a type-erased tensor.\n\n - Parameter tensor: A type-erased tensor.",
            "key.doc.declaration" : "public init(_ tensor: AnyTensor)",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"478\" column=\"10\"><Name>init(_:)<\/Name><USR>s:4main6TensorVyACyxGAA03AnyB0_pcfc<\/USR><Declaration>public init(_ tensor: AnyTensor)<\/Declaration><CommentParts><Abstract><Para>Create a typed tensor from a type-erased tensor.<\/Para><\/Abstract><Parameters><Parameter><Name>tensor<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A type-erased tensor.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
            "key.doc.line" : 478,
            "key.doc.name" : "init(_:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "A type-erased tensor."
                  }
                ],
                "name" : "tensor"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 115,
            "key.docoffset" : 13580,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tensor<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 108,
            "key.name" : "init(_:)",
            "key.namelength" : 25,
            "key.nameoffset" : 13705,
            "key.offset" : 13705,
            "key.parsed_declaration" : "public init(_ tensor: AnyTensor)",
            "key.parsed_scope.end" : 481,
            "key.parsed_scope.start" : 478,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format10dimensionsACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOSaySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:dimensions:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B15DimensionFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGAA10DeviceKindO_AA0B6FormatOSaySiGtcfc\">init(_: DeviceKind, format: TensorFormat, dimensions: [Int])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B15DimensionFormatOtcfc\">init(_: DeviceKind, _: TensorDimensionFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, format: TensorFormat, dimensions: [Int]) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: TensorDimensionFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensions20unsafeMutablePointer9keepAliveACyxGAA10DeviceKindO_AA0B6FormatOSaySiGSpyxGyptcfc\">init(_:format:dimensions:unsafeMutablePointer:keepAlive:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (AnyTensor) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGAA03AnyB0_pcD",
            "key.usr" : "s:4main6TensorVyACyxGAA03AnyB0_pcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>])<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 13817
              }
            ],
            "key.bodylength" : 91,
            "key.bodyoffset" : 13891,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 159,
            "key.name" : "init(_:format:dimensions:)",
            "key.namelength" : 65,
            "key.nameoffset" : 13824,
            "key.offset" : 13824,
            "key.parsed_declaration" : "public init(_ kind: DeviceKind, format: TensorFormat, dimensions: [Int])",
            "key.parsed_scope.end" : 485,
            "key.parsed_scope.start" : 483,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format10dimensionsACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOSaySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:dimensions:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B15DimensionFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B15DimensionFormatOtcfc\">init(_: DeviceKind, _: TensorDimensionFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, format: TensorFormat, dimensions: [Int]) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: TensorDimensionFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensions20unsafeMutablePointer9keepAliveACyxGAA10DeviceKindO_AA0B6FormatOSaySiGSpyxGyptcfc\">init(_:format:dimensions:unsafeMutablePointer:keepAlive:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (DeviceKind, TensorFormat, [Int]) -> Tensor<Element>",
            "key.typeusr" : "$s_6format10dimensions4main6TensorVyxGAC10DeviceKindO_AC0D6FormatOSaySiGtcD",
            "key.usr" : "s:4main6TensorV_6format10dimensionsACyxGAA10DeviceKindO_AA0B6FormatOSaySiGtcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, _ dimensionFormat: <Type usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 14185
              }
            ],
            "key.bodylength" : 58,
            "key.bodyoffset" : 14260,
            "key.doc.column" : 10,
            "key.doc.comment" : " Create a new uninitialized tensor.\n\n - Parameters:\n   - kind: Which device this new tensor is on.\n   - dimensionFormat: The format and dimensions of the new tensor.",
            "key.doc.declaration" : "public init(_ kind: DeviceKind, _ dimensionFormat: TensorDimensionFormat)",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"494\" column=\"10\"><Name>init(_:_:)<\/Name><USR>s:4main6TensorVyACyxGAA10DeviceKindO_AA0B15DimensionFormatOtcfc<\/USR><Declaration>public init(_ kind: DeviceKind, _ dimensionFormat: TensorDimensionFormat)<\/Declaration><CommentParts><Abstract><Para>Create a new uninitialized tensor.<\/Para><\/Abstract><Parameters><Parameter><Name>kind<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Which device this new tensor is on.<\/Para><\/Discussion><\/Parameter><Parameter><Name>dimensionFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The format and dimensions of the new tensor.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
            "key.doc.line" : 494,
            "key.doc.name" : "init(_:_:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "Which device this new tensor is on."
                  }
                ],
                "name" : "kind"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The format and dimensions of the new tensor."
                  }
                ],
                "name" : "dimensionFormat"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 195,
            "key.docoffset" : 13987,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 127,
            "key.name" : "init(_:_:)",
            "key.namelength" : 66,
            "key.nameoffset" : 14192,
            "key.offset" : 14192,
            "key.parsed_declaration" : "public init(_ kind: DeviceKind, _ dimensionFormat: TensorDimensionFormat)",
            "key.parsed_scope.end" : 496,
            "key.parsed_scope.start" : 494,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format10dimensionsACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOSaySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:dimensions:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B15DimensionFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGAA10DeviceKindO_AA0B6FormatOSaySiGtcfc\">init(_: DeviceKind, format: TensorFormat, dimensions: [Int])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, format: TensorFormat, dimensions: [Int]) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: TensorDimensionFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensions20unsafeMutablePointer9keepAliveACyxGAA10DeviceKindO_AA0B6FormatOSaySiGSpyxGyptcfc\">init(_:format:dimensions:unsafeMutablePointer:keepAlive:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (DeviceKind, TensorDimensionFormat) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGAA10DeviceKindO_AA0B15DimensionFormatOtcD",
            "key.usr" : "s:4main6TensorVyACyxGAA10DeviceKindO_AA0B15DimensionFormatOtcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init&lt;S&gt;(_ sequence: <Type usr=\"s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/Type>, format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>]) where Element == S.Element, S : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 14323
              }
            ],
            "key.bodylength" : 229,
            "key.bodyoffset" : 14434,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\"><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>sequence<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element == S.Element<\/decl.generic_type_requirement>, <decl.generic_type_requirement>S : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 334,
            "key.name" : "init(_:format:dimensions:)",
            "key.namelength" : 73,
            "key.nameoffset" : 14330,
            "key.offset" : 14330,
            "key.parsed_declaration" : "public init<S: Sequence>(_ sequence: S, format: TensorFormat, dimensions: [Int])\nwhere S.Element == Element",
            "key.parsed_scope.end" : 505,
            "key.parsed_scope.start" : 498,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format10dimensionsACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOSaySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:dimensions:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B15DimensionFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGAA10DeviceKindO_AA0B6FormatOSaySiGtcfc\">init(_: DeviceKind, format: TensorFormat, dimensions: [Int])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B15DimensionFormatOtcfc\">init(_: DeviceKind, _: TensorDimensionFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: TensorDimensionFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensions20unsafeMutablePointer9keepAliveACyxGAA10DeviceKindO_AA0B6FormatOSaySiGSpyxGyptcfc\">init(_:format:dimensions:unsafeMutablePointer:keepAlive:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>S : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 8,
                    "key.offset" : 14338
                  }
                ],
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>S<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "Sequence"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 11,
                "key.name" : "S",
                "key.namelength" : 1,
                "key.nameoffset" : 14335,
                "key.offset" : 14335,
                "key.parsed_declaration" : "public init<S: Sequence",
                "key.parsed_scope.end" : 498,
                "key.parsed_scope.start" : 498,
                "key.typename" : "S.Type",
                "key.typeusr" : "$sqd__mD",
                "key.usr" : "s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp"
              },
              {
                "key.annotated_decl" : "<Declaration>let cArray: <Type usr=\"s:s15ContiguousArrayV\">ContiguousArray<\/Type>&lt;Element&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cArray<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s15ContiguousArrayV\">ContiguousArray<\/ref.struct>&lt;Element&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 38,
                "key.name" : "cArray",
                "key.namelength" : 6,
                "key.nameoffset" : 14503,
                "key.offset" : 14499,
                "key.parsed_declaration" : "let cArray = ContiguousArray(sequence)",
                "key.parsed_scope.end" : 501,
                "key.parsed_scope.start" : 501,
                "key.typename" : "ContiguousArray<Element>",
                "key.typeusr" : "$ss15ContiguousArrayVyxGD",
                "key.usr" : "s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc6cArrayL_s010ContiguousG0VyxGvp"
              }
            ],
            "key.typename" : "<Element, S where Element : TensorNumeric, Element == S.Element, S : Sequence> (Tensor<Element>.Type) -> (S, TensorFormat, [Int]) -> Tensor<Element>",
            "key.typeusr" : "$s_6format10dimensions4main6TensorVyxGqd___AC0D6FormatOSaySiGtc7ElementQyd__RszSTRd__luD",
            "key.usr" : "s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init&lt;S&gt;(_ sequence: <Type usr=\"s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/Type>, _ dimensionFormat: <Type usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/Type>) where Element == S.Element, S : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 14912
              }
            ],
            "key.bodylength" : 99,
            "key.bodyoffset" : 15024,
            "key.doc.column" : 10,
            "key.doc.comment" : " Create a new tensor and initialize with content from a sequence.\n\n - Parameters:\n   - sequence: The sequence to initialize the new tensor with.\n   - dimensionFormat: The format and dimensions of the new tensor.",
            "key.doc.declaration" : "public init<S>(_ sequence: S, _ dimensionFormat: TensorDimensionFormat) where Element == S.Element, S : Sequence",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"514\" column=\"10\"><Name>init(_:_:)<\/Name><USR>s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc<\/USR><Declaration>public init&lt;S&gt;(_ sequence: S, _ dimensionFormat: TensorDimensionFormat) where Element == S.Element, S : Sequence<\/Declaration><CommentParts><Abstract><Para>Create a new tensor and initialize with content from a sequence.<\/Para><\/Abstract><Parameters><Parameter><Name>sequence<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The sequence to initialize the new tensor with.<\/Para><\/Discussion><\/Parameter><Parameter><Name>dimensionFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The format and dimensions of the new tensor.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
            "key.doc.line" : 514,
            "key.doc.name" : "init(_:_:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "The sequence to initialize the new tensor with."
                  }
                ],
                "name" : "sequence"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The format and dimensions of the new tensor."
                  }
                ],
                "name" : "dimensionFormat"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 241,
            "key.docoffset" : 14668,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\"><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>sequence<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element == S.Element<\/decl.generic_type_requirement>, <decl.generic_type_requirement>S : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 205,
            "key.name" : "init(_:_:)",
            "key.namelength" : 74,
            "key.nameoffset" : 14919,
            "key.offset" : 14919,
            "key.parsed_declaration" : "public init<S: Sequence>(_ sequence: S, _ dimensionFormat: TensorDimensionFormat)\nwhere S.Element == Element",
            "key.parsed_scope.end" : 517,
            "key.parsed_scope.start" : 514,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format10dimensionsACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOSaySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:dimensions:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B15DimensionFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGAA10DeviceKindO_AA0B6FormatOSaySiGtcfc\">init(_: DeviceKind, format: TensorFormat, dimensions: [Int])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B15DimensionFormatOtcfc\">init(_: DeviceKind, _: TensorDimensionFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, format: TensorFormat, dimensions: [Int]) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensions20unsafeMutablePointer9keepAliveACyxGAA10DeviceKindO_AA0B6FormatOSaySiGSpyxGyptcfc\">init(_:format:dimensions:unsafeMutablePointer:keepAlive:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>S : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 8,
                    "key.offset" : 14927
                  }
                ],
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>S<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "Sequence"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 11,
                "key.name" : "S",
                "key.namelength" : 1,
                "key.nameoffset" : 14924,
                "key.offset" : 14924,
                "key.parsed_declaration" : "public init<S: Sequence",
                "key.parsed_scope.end" : 514,
                "key.parsed_scope.start" : 514,
                "key.typename" : "S.Type",
                "key.typeusr" : "$sqd__mD",
                "key.usr" : "s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc1SL_qd__mfp"
              }
            ],
            "key.typename" : "<Element, S where Element : TensorNumeric, Element == S.Element, S : Sequence> (Tensor<Element>.Type) -> (S, TensorDimensionFormat) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__luD",
            "key.usr" : "s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>], unsafeMutablePointer: <Type usr=\"s:Sp\">UnsafeMutablePointer<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt;, keepAlive: Any)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 15128
              }
            ],
            "key.bodylength" : 238,
            "key.bodyoffset" : 15283,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>unsafeMutablePointer<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sp\">UnsafeMutablePointer<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>keepAlive<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 387,
            "key.name" : "init(_:format:dimensions:unsafeMutablePointer:keepAlive:)",
            "key.namelength" : 146,
            "key.nameoffset" : 15135,
            "key.offset" : 15135,
            "key.parsed_declaration" : "public init(\n  _ kind: DeviceKind, format: TensorFormat, dimensions: [Int],\n  unsafeMutablePointer: UnsafeMutablePointer<Element>, keepAlive: Any\n)",
            "key.parsed_scope.end" : 528,
            "key.parsed_scope.start" : 519,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_8dataType6format10dimensionsACyxGAA10DeviceKindO_AA04DataD0OAA0B6FormatOSaySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:dataType:format:dimensions:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA8DataTypeOAA0B15DimensionFormatOtc33_C59670EF05D79618B17EDFA5C2551CEDLlfc\">init(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB7StorageCcfc\">init(_: AnyTensorStorage)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA03AnyB0_pcfc\">init(_: AnyTensor)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGAA10DeviceKindO_AA0B6FormatOSaySiGtcfc\">init(_: DeviceKind, format: TensorFormat, dimensions: [Int])<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGAA10DeviceKindO_AA0B15DimensionFormatOtcfc\">init(_: DeviceKind, _: TensorDimensionFormat)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV_6format10dimensionsACyxGqd___AA0B6FormatOSaySiGtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, format: TensorFormat, dimensions: [Int]) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGqd___AA0B15DimensionFormatOtc7ElementQyd__RszSTRd__lufc\">init&lt;S&gt;(_: S, _: TensorDimensionFormat) where Element == S.Element, S : Sequence<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyXeXecfc\">init(numpy:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let cTensor: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensor<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 168,
                "key.name" : "cTensor",
                "key.namelength" : 7,
                "key.nameoffset" : 15292,
                "key.offset" : 15288,
                "key.parsed_declaration" : "let cTensor = ccv_nnc_tensor_new(\n  unsafeMutablePointer,\n  toCTensorParams(kind, dataType: Element.dataType, format: format, dimensions: dimensions),\n  0)!",
                "key.parsed_scope.end" : 523,
                "key.parsed_scope.start" : 523,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV01cB0Xevp\">cTensor<\/RelatedName>"
                  }
                ],
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV_6format10dimensions20unsafeMutablePointer9keepAliveACyxGAA10DeviceKindO_AA0B6FormatOSaySiGSpyxGyptcfc01cB0L_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>.Type) -> (DeviceKind, TensorFormat, [Int], UnsafeMutablePointer<Element>, Any) -> Tensor<Element>",
            "key.typeusr" : "$s_6format10dimensions20unsafeMutablePointer9keepAlive4main6TensorVyxGAE10DeviceKindO_AE0I6FormatOSaySiGSpyxGyptcD",
            "key.usr" : "s:4main6TensorV_6format10dimensions20unsafeMutablePointer9keepAliveACyxGAA10DeviceKindO_AA0B6FormatOSaySiGSpyxGyptcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(indices: <Type usr=\"s:Si\">Int<\/Type>...) -&gt; <Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type> { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 15526
              }
            ],
            "key.bodylength" : 347,
            "key.bodyoffset" : 15572,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>indices<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type>...<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 387,
            "key.name" : "subscript(_:)",
            "key.namelength" : 26,
            "key.nameoffset" : 15533,
            "key.offset" : 15533,
            "key.parsed_declaration" : "public subscript(indices: Int...) -> Element",
            "key.parsed_scope.end" : 544,
            "key.parsed_scope.start" : 530,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSaySiG_SnySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int...) -> Element",
            "key.typeusr" : "$syxSid_tcD",
            "key.usr" : "s:4main6TensorVyxSid_tcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(ranges: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;...) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>&gt; { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 15924
              }
            ],
            "key.bodylength" : 370,
            "key.bodyoffset" : 15984,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>ranges<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type>...<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 424,
            "key.name" : "subscript(_:)",
            "key.namelength" : 32,
            "key.nameoffset" : 15931,
            "key.offset" : 15931,
            "key.parsed_declaration" : "public subscript(ranges: Range<Int>...) -> Tensor<Element>",
            "key.parsed_scope.end" : 560,
            "key.parsed_scope.start" : 546,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSaySiG_SnySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Range<Int>...) -> Tensor<Element>",
            "key.typeusr" : "$sy4main6TensorVyxGSnySiGd_tcD",
            "key.usr" : "s:4main6TensorVyACyxGSnySiGd_tcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private subscript(indices: [<Type usr=\"s:Si\">Int<\/Type>], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; [<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>] { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 16359
              }
            ],
            "key.bodylength" : 361,
            "key.bodyoffset" : 16426,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>indices<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>]<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 421,
            "key.name" : "subscript(_:_:)",
            "key.namelength" : 44,
            "key.nameoffset" : 16367,
            "key.offset" : 16367,
            "key.parsed_declaration" : "private subscript(indices: [Int], range: Range<Int>) -> [Element]",
            "key.parsed_scope.end" : 576,
            "key.parsed_scope.start" : 562,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.setter_accessibility" : "source.lang.swift.accessibility.private",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> ([Int], Range<Int>) -> [Element]",
            "key.typeusr" : "$sySayxGSaySiG_SnySiGtcD",
            "key.usr" : "s:4main6TensorVySayxGSaySiG_SnySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlip"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 1460,
        "key.bodyoffset" : 16810,
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"450\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 450,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1479,
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 16802,
        "key.offset" : 16792,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 623,
        "key.parsed_scope.start" : 579,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; [<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>] { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 16813
              }
            ],
            "key.bodylength" : 70,
            "key.bodyoffset" : 16863,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>]<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 114,
            "key.name" : "subscript(_:)",
            "key.namelength" : 28,
            "key.nameoffset" : 16820,
            "key.offset" : 16820,
            "key.parsed_declaration" : "public subscript(range: Range<Int>) -> [Element]",
            "key.parsed_scope.end" : 583,
            "key.parsed_scope.start" : 580,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSaySiG_SnySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Range<Int>) -> [Element]",
            "key.typeusr" : "$sySayxGSnySiGcD",
            "key.usr" : "s:4main6TensorVySayxGSnySiGcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; [<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>] { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 16938
              }
            ],
            "key.bodylength" : 74,
            "key.bodyoffset" : 16997,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>]<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 127,
            "key.name" : "subscript(_:_:)",
            "key.namelength" : 37,
            "key.nameoffset" : 16945,
            "key.offset" : 16945,
            "key.parsed_declaration" : "public subscript(i0: Int, range: Range<Int>) -> [Element]",
            "key.parsed_scope.end" : 588,
            "key.parsed_scope.start" : 585,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSaySiG_SnySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Range<Int>) -> [Element]",
            "key.typeusr" : "$sySayxGSi_SnySiGtcD",
            "key.usr" : "s:4main6TensorVySayxGSi_SnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; [<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>] { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 17076
              }
            ],
            "key.bodylength" : 82,
            "key.bodyoffset" : 17144,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>]<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 144,
            "key.name" : "subscript(_:_:_:)",
            "key.namelength" : 46,
            "key.nameoffset" : 17083,
            "key.offset" : 17083,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, range: Range<Int>) -> [Element]",
            "key.parsed_scope.end" : 593,
            "key.parsed_scope.start" : 590,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSaySiG_SnySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Range<Int>) -> [Element]",
            "key.typeusr" : "$sySayxGSi_SiSnySiGtcD",
            "key.usr" : "s:4main6TensorVySayxGSi_SiSnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; [<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>] { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 17231
              }
            ],
            "key.bodylength" : 90,
            "key.bodyoffset" : 17308,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>]<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 161,
            "key.name" : "subscript(_:_:_:_:)",
            "key.namelength" : 55,
            "key.nameoffset" : 17238,
            "key.offset" : 17238,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, range: Range<Int>) -> [Element]",
            "key.parsed_scope.end" : 598,
            "key.parsed_scope.start" : 595,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSaySiG_SnySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Range<Int>) -> [Element]",
            "key.typeusr" : "$sySayxGSi_S2iSnySiGtcD",
            "key.usr" : "s:4main6TensorVySayxGSi_S2iSnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, i3: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; [<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>] { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 17403
              }
            ],
            "key.bodylength" : 98,
            "key.bodyoffset" : 17489,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i3<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>]<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 178,
            "key.name" : "subscript(_:_:_:_:_:)",
            "key.namelength" : 64,
            "key.nameoffset" : 17410,
            "key.offset" : 17410,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, i3: Int, range: Range<Int>) -> [Element]",
            "key.parsed_scope.end" : 603,
            "key.parsed_scope.start" : 600,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSaySiG_SnySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Int, Range<Int>) -> [Element]",
            "key.typeusr" : "$sySayxGSi_S3iSnySiGtcD",
            "key.usr" : "s:4main6TensorVySayxGSi_S3iSnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, i3: <Type usr=\"s:Si\">Int<\/Type>, i4: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; [<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>] { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 17592
              }
            ],
            "key.bodylength" : 106,
            "key.bodyoffset" : 17687,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i3<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i4<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>]<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 195,
            "key.name" : "subscript(_:_:_:_:_:_:)",
            "key.namelength" : 73,
            "key.nameoffset" : 17599,
            "key.offset" : 17599,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, i3: Int, i4: Int, range: Range<Int>) -> [Element]",
            "key.parsed_scope.end" : 608,
            "key.parsed_scope.start" : 605,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSaySiG_SnySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Int, Int, Range<Int>) -> [Element]",
            "key.typeusr" : "$sySayxGSi_S4iSnySiGtcD",
            "key.usr" : "s:4main6TensorVySayxGSi_S4iSnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, i3: <Type usr=\"s:Si\">Int<\/Type>, i4: <Type usr=\"s:Si\">Int<\/Type>, i5: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; [<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>] { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 17798
              }
            ],
            "key.bodylength" : 114,
            "key.bodyoffset" : 17908,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i3<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i4<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i5<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>]<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 218,
            "key.name" : "subscript(_:_:_:_:_:_:_:)",
            "key.namelength" : 82,
            "key.nameoffset" : 17805,
            "key.offset" : 17805,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, range: Range<Int>)\n  -> [Element]",
            "key.parsed_scope.end" : 615,
            "key.parsed_scope.start" : 610,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSaySiG_SnySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S6iSnySiGtcip\">subscript(_:_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Int, Int, Int, Range<Int>) -> [Element]",
            "key.typeusr" : "$sySayxGSi_S5iSnySiGtcD",
            "key.usr" : "s:4main6TensorVySayxGSi_S5iSnySiGtcip"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(i0: <Type usr=\"s:Si\">Int<\/Type>, i1: <Type usr=\"s:Si\">Int<\/Type>, i2: <Type usr=\"s:Si\">Int<\/Type>, i3: <Type usr=\"s:Si\">Int<\/Type>, i4: <Type usr=\"s:Si\">Int<\/Type>, i5: <Type usr=\"s:Si\">Int<\/Type>, i6: <Type usr=\"s:Si\">Int<\/Type>, range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;) -&gt; [<Type usr=\"s:4main6TensorV7Elementxmfp\">Element<\/Type>] { get set }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 18027
              }
            ],
            "key.bodylength" : 122,
            "key.bodyoffset" : 18146,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>i0<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i1<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i2<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i3<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i4<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i5<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>i6<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\">Element<\/ref.generic_type_param>]<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 235,
            "key.name" : "subscript(_:_:_:_:_:_:_:_:)",
            "key.namelength" : 91,
            "key.nameoffset" : 18034,
            "key.offset" : 18034,
            "key.parsed_declaration" : "public subscript(i0: Int, i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, range: Range<Int>)\n  -> [Element]",
            "key.parsed_scope.end" : 622,
            "key.parsed_scope.start" : 617,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyxSid_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVyACyxGSnySiGd_tcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSaySiG_SnySiGtc33_C59670EF05D79618B17EDFA5C2551CEDLlip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSnySiGcip\">subscript(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SnySiGtcip\">subscript(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_SiSnySiGtcip\">subscript(_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S2iSnySiGtcip\">subscript(_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S3iSnySiGtcip\">subscript(_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S4iSnySiGtcip\">subscript(_:_:_:_:_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorVySayxGSi_S5iSnySiGtcip\">subscript(_:_:_:_:_:_:_:)<\/RelatedName>"
              }
            ],
            "key.setter_accessibility" : "source.lang.swift.accessibility.public",
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Int, Int, Int, Int, Int, Int, Int, Range<Int>) -> [Element]",
            "key.typeusr" : "$sySayxGSi_S6iSnySiGtcD",
            "key.usr" : "s:4main6TensorVySayxGSi_S6iSnySiGtcip"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 1601,
        "key.bodyoffset" : 18291,
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"450\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 450,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1620,
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 18283,
        "key.offset" : 18273,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 668,
        "key.parsed_scope.start" : 625,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func toGPU(_ ordinal: <Type usr=\"s:Si\">Int<\/Type> = 0, streamContext: <Type usr=\"s:4main13StreamContextC\">StreamContext<\/Type>? = nil) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;Element&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 18534
              }
            ],
            "key.bodylength" : 514,
            "key.bodyoffset" : 18618,
            "key.doc.column" : 15,
            "key.doc.comment" : " Move this tensor from CPU to GPU.\n\n - Parameters:\n   - ordinal: Which GPU the new tensor will reside.\n   - streamContext: Run the operation on the given stream context.\n - Returns: A new tensor on GPU.",
            "key.doc.declaration" : "public func toGPU(_ ordinal: Int = 0, streamContext: StreamContext? = nil) -> main.Tensor<Element>",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"635\" column=\"15\"><Name>toGPU(_:streamContext:)<\/Name><USR>s:4main6TensorV5toGPU_13streamContextACyxGSi_AA06StreamF0CSgtF<\/USR><Declaration>public func toGPU(_ ordinal: Int = 0, streamContext: StreamContext? = nil) -&gt; main.Tensor&lt;Element&gt;<\/Declaration><CommentParts><Abstract><Para>Move this tensor from CPU to GPU.<\/Para><\/Abstract><Parameters><Parameter><Name>ordinal<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Which GPU the new tensor will reside.<\/Para><\/Discussion><\/Parameter><Parameter><Name>streamContext<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Run the operation on the given stream context.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>A new tensor on GPU.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 635,
            "key.doc.name" : "toGPU(_:streamContext:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "Which GPU the new tensor will reside."
                  }
                ],
                "name" : "ordinal"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Run the operation on the given stream context."
                  }
                ],
                "name" : "streamContext"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "A new tensor on GPU."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 236,
            "key.docoffset" : 18295,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toGPU<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>ordinal<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = 0<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>streamContext<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:4main13StreamContextC\">StreamContext<\/ref.class>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;Element&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 592,
            "key.name" : "toGPU(_:streamContext:)",
            "key.namelength" : 62,
            "key.nameoffset" : 18546,
            "key.offset" : 18541,
            "key.parsed_declaration" : "public func toGPU(_ ordinal: Int = 0, streamContext: StreamContext? = nil) -> Self",
            "key.parsed_scope.end" : 646,
            "key.parsed_scope.start" : 635,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var _output: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_output<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 151,
                "key.name" : "_output",
                "key.namelength" : 7,
                "key.nameoffset" : 18627,
                "key.offset" : 18623,
                "key.parsed_declaration" : "var _output = ccv_nnc_tensor_new(\n  nil,\n  toCTensorParams(.GPU(ordinal), dataType: dataType, format: format, dimensions: dimensions),\n  0)",
                "key.parsed_scope.end" : 636,
                "key.parsed_scope.start" : 636,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV5toGPU_13streamContextACyxGSi_AA06StreamF0CSgtF7_outputL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>let cmd: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cmd<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 105,
                "key.name" : "cmd",
                "key.namelength" : 3,
                "key.nameoffset" : 18783,
                "key.offset" : 18779,
                "key.parsed_declaration" : "let cmd = ccv_nnc_cmd(\n  CCV_NNC_DATA_TRANSFER_FORWARD, nil, CmdParamsFactory.factory.newParams(), 0)",
                "key.parsed_scope.end" : 640,
                "key.parsed_scope.start" : 640,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV5toGPU_13streamContextACyxGSi_AA06StreamF0CSgtF3cmdL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>let _streamContext: <Type usr=\"s:s13OpaquePointerV\">OpaquePointer<\/Type>?<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>_streamContext<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s13OpaquePointerV\">OpaquePointer<\/ref.struct>?<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 43,
                "key.name" : "_streamContext",
                "key.namelength" : 14,
                "key.nameoffset" : 18893,
                "key.offset" : 18889,
                "key.parsed_declaration" : "let _streamContext = streamContext?._stream",
                "key.parsed_scope.end" : 642,
                "key.parsed_scope.start" : 642,
                "key.typename" : "OpaquePointer?",
                "key.typeusr" : "$ss13OpaquePointerVSgD",
                "key.usr" : "s:4main6TensorV5toGPU_13streamContextACyxGSi_AA06StreamF0CSgtF01_eF0L_s13OpaquePointerVSgvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var _input: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_input<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 61,
                "key.name" : "_input",
                "key.namelength" : 6,
                "key.nameoffset" : 18941,
                "key.offset" : 18937,
                "key.parsed_declaration" : "var _input: UnsafeMutablePointer<ccv_nnc_tensor_t>? = cTensor",
                "key.parsed_scope.end" : 643,
                "key.parsed_scope.start" : 643,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV5toGPU_13streamContextACyxGSi_AA06StreamF0CSgtF6_inputL_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>) -> (Int, StreamContext?) -> Tensor<Element>",
            "key.typeusr" : "$s_13streamContext4main6TensorVyxGSi_AB06StreamB0CSgtcD",
            "key.usr" : "s:4main6TensorV5toGPU_13streamContextACyxGSi_AA06StreamF0CSgtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func toCPU(streamContext: <Type usr=\"s:4main13StreamContextC\">StreamContext<\/Type>? = nil) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;Element&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 19320
              }
            ],
            "key.bodylength" : 505,
            "key.bodyoffset" : 19384,
            "key.doc.column" : 15,
            "key.doc.comment" : " Move this tensor from GPU to CPU.\n\n - Parameters:\n   - streamContext: Run the operation on the given stream context.\n - Returns: A new tensor on CPU.",
            "key.doc.declaration" : "public func toCPU(streamContext: StreamContext? = nil) -> main.Tensor<Element>",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"655\" column=\"15\"><Name>toCPU(streamContext:)<\/Name><USR>s:4main6TensorV5toCPU13streamContextACyxGAA06StreamF0CSg_tF<\/USR><Declaration>public func toCPU(streamContext: StreamContext? = nil) -&gt; main.Tensor&lt;Element&gt;<\/Declaration><CommentParts><Abstract><Para>Move this tensor from GPU to CPU.<\/Para><\/Abstract><Parameters><Parameter><Name>streamContext<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Run the operation on the given stream context.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>A new tensor on CPU.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 655,
            "key.doc.name" : "toCPU(streamContext:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "Run the operation on the given stream context."
                  }
                ],
                "name" : "streamContext"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "A new tensor on CPU."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 180,
            "key.docoffset" : 19137,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toCPU<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>streamContext<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:4main13StreamContextC\">StreamContext<\/ref.class>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;Element&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 563,
            "key.name" : "toCPU(streamContext:)",
            "key.namelength" : 42,
            "key.nameoffset" : 19332,
            "key.offset" : 19327,
            "key.parsed_declaration" : "public func toCPU(streamContext: StreamContext? = nil) -> Self",
            "key.parsed_scope.end" : 666,
            "key.parsed_scope.start" : 655,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var _output: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_output<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 142,
                "key.name" : "_output",
                "key.namelength" : 7,
                "key.nameoffset" : 19393,
                "key.offset" : 19389,
                "key.parsed_declaration" : "var _output = ccv_nnc_tensor_new(\n  nil,\n  toCTensorParams(.CPU, dataType: dataType, format: format, dimensions: dimensions),\n  0)",
                "key.parsed_scope.end" : 656,
                "key.parsed_scope.start" : 656,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV5toCPU13streamContextACyxGAA06StreamF0CSg_tF7_outputL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>let cmd: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cmd<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 105,
                "key.name" : "cmd",
                "key.namelength" : 3,
                "key.nameoffset" : 19540,
                "key.offset" : 19536,
                "key.parsed_declaration" : "let cmd = ccv_nnc_cmd(\n  CCV_NNC_DATA_TRANSFER_FORWARD, nil, CmdParamsFactory.factory.newParams(), 0)",
                "key.parsed_scope.end" : 660,
                "key.parsed_scope.start" : 660,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV5toCPU13streamContextACyxGAA06StreamF0CSg_tF3cmdL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>let _streamContext: <Type usr=\"s:s13OpaquePointerV\">OpaquePointer<\/Type>?<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>_streamContext<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s13OpaquePointerV\">OpaquePointer<\/ref.struct>?<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 43,
                "key.name" : "_streamContext",
                "key.namelength" : 14,
                "key.nameoffset" : 19650,
                "key.offset" : 19646,
                "key.parsed_declaration" : "let _streamContext = streamContext?._stream",
                "key.parsed_scope.end" : 662,
                "key.parsed_scope.start" : 662,
                "key.typename" : "OpaquePointer?",
                "key.typeusr" : "$ss13OpaquePointerVSgD",
                "key.usr" : "s:4main6TensorV5toCPU13streamContextACyxGAA06StreamF0CSg_tF01_eF0L_s13OpaquePointerVSgvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var _input: UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_input<\/decl.name>: <decl.var.type>UnsafeMutablePointer&lt;ccv_nnc_tensor_t&gt;?<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 61,
                "key.name" : "_input",
                "key.namelength" : 6,
                "key.nameoffset" : 19698,
                "key.offset" : 19694,
                "key.parsed_declaration" : "var _input: UnsafeMutablePointer<ccv_nnc_tensor_t>? = cTensor",
                "key.parsed_scope.end" : 663,
                "key.parsed_scope.start" : 663,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV5toCPU13streamContextACyxGAA06StreamF0CSg_tF6_inputL_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>) -> (StreamContext?) -> Tensor<Element>",
            "key.typeusr" : "$s13streamContext4main6TensorVyxGAB06StreamB0CSg_tcD",
            "key.usr" : "s:4main6TensorV5toCPU13streamContextACyxGAA06StreamF0CSg_tF"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 1804,
        "key.bodyoffset" : 19913,
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"450\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 450,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1823,
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 19905,
        "key.offset" : 19895,
        "key.parsed_declaration" : "extension Tensor",
        "key.parsed_scope.end" : 718,
        "key.parsed_scope.start" : 670,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>], offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;Element&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 19917
              }
            ],
            "key.bodylength" : 1018,
            "key.bodyoffset" : 20043,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;Element&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 1138,
            "key.name" : "reshape(format:dimensions:offset:increments:)",
            "key.namelength" : 104,
            "key.nameoffset" : 19929,
            "key.offset" : 19924,
            "key.parsed_declaration" : "public func reshape(\n  format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil\n) -> Self",
            "key.parsed_scope.end" : 699,
            "key.parsed_scope.start" : 672,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV7reshape_6offset10incrementsACyxGAA0B15DimensionFormatO_SaySiGSgAKtF\">reshape(_:offset:increments:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let cTensorParams: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cTensorParams<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 40,
                "key.name" : "cTensorParams",
                "key.namelength" : 13,
                "key.nameoffset" : 20052,
                "key.offset" : 20048,
                "key.parsed_declaration" : "let cTensorParams = cTensor.pointee.info",
                "key.parsed_scope.end" : 675,
                "key.parsed_scope.start" : 675,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV7reshape6format10dimensions6offset10incrementsACyxGAA0B6FormatO_SaySiGALSgAMtF01cB6ParamsL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>let device: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>device<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 58,
                "key.name" : "device",
                "key.namelength" : 6,
                "key.nameoffset" : 20097,
                "key.offset" : 20093,
                "key.parsed_declaration" : "let device = DeviceKind.from(cTensorParams: cTensorParams)",
                "key.parsed_scope.end" : 676,
                "key.parsed_scope.start" : 676,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV7reshape6format10dimensions6offset10incrementsACyxGAA0B6FormatO_SaySiGALSgAMtF6deviceL_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>var cOffset: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cOffset<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 35,
                "key.name" : "cOffset",
                "key.namelength" : 7,
                "key.nameoffset" : 20477,
                "key.offset" : 20473,
                "key.parsed_declaration" : "var cOffset = toCDimensions(offset)",
                "key.parsed_scope.end" : 684,
                "key.parsed_scope.start" : 684,
                "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
                "key.typeusr" : "$ss5Int32V_A7BtD",
                "key.usr" : "s:4main6TensorV7reshape6format10dimensions6offset10incrementsACyxGAA0B6FormatO_SaySiGALSgAMtF7cOffsetL_s5Int32V_A7Ptvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var cIncrements: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cIncrements<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 43,
                "key.name" : "cIncrements",
                "key.namelength" : 11,
                "key.nameoffset" : 20517,
                "key.offset" : 20513,
                "key.parsed_declaration" : "var cIncrements = toCDimensions(increments)",
                "key.parsed_scope.end" : 685,
                "key.parsed_scope.start" : 685,
                "key.typename" : "(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
                "key.typeusr" : "$ss5Int32V_A7BtD",
                "key.usr" : "s:4main6TensorV7reshape6format10dimensions6offset10incrementsACyxGAA0B6FormatO_SaySiGALSgAMtF11cIncrementsL_s5Int32V_A7Ptvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let newt: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>newt<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 333,
                "key.name" : "newt",
                "key.namelength" : 4,
                "key.nameoffset" : 20565,
                "key.offset" : 20561,
                "key.parsed_declaration" : "let newt = withUnsafePointer(to: &cOffset.0) { cOffset in\n  withUnsafePointer(to: &cIncrements.0) { cIncrements in\n    ccv_nnc_tensor_view_new(\n      cTensor,\n      toCTensorParams(\n        device, dataType: Element.dataType, format: format, dimensions: dimensions), cOffset,\n      cIncrements)!\n  }\n}",
                "key.parsed_scope.end" : 686,
                "key.parsed_scope.start" : 686,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV7reshape6format10dimensions6offset10incrementsACyxGAA0B6FormatO_SaySiGALSgAMtF4newtL0_Xevp"
              },
              {
                "key.annotated_decl" : "<Declaration>let anyTensor: &lt;&lt;error type&gt;&gt;<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>anyTensor<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 132,
                "key.name" : "anyTensor",
                "key.namelength" : 9,
                "key.nameoffset" : 20903,
                "key.offset" : 20899,
                "key.parsed_declaration" : "let anyTensor = newt.withMemoryRebound(to: ccv_nnc_tensor_t.self, capacity: 1) {\n  AnyTensorStorage($0, original: storage)\n}",
                "key.parsed_scope.end" : 695,
                "key.parsed_scope.start" : 695,
                "key.typename" : "<<error type>>",
                "key.typeusr" : "$sXeD",
                "key.usr" : "s:4main6TensorV7reshape6format10dimensions6offset10incrementsACyxGAA0B6FormatO_SaySiGALSgAMtF03anyB0L_Xevp"
              }
            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>) -> (TensorFormat, [Int], [Int]?, [Int]?) -> Tensor<Element>",
            "key.typeusr" : "$s6format10dimensions6offset10increments4main6TensorVyxGAE0F6FormatO_SaySiGAKSgALtcD",
            "key.usr" : "s:4main6TensorV7reshape6format10dimensions6offset10incrementsACyxGAA0B6FormatO_SaySiGALSgAMtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(_ dimensionFormat: <Type usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/Type>, offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; <Type usr=\"s:4main6TensorV\">Tensor<\/Type>&lt;Element&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 21440
              }
            ],
            "key.bodylength" : 147,
            "key.bodyoffset" : 21567,
            "key.doc.column" : 15,
            "key.doc.comment" : " Create a new tensor pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - dimensionFormat: New format and dimensions for the tensor.\n   - offset: Whether offset on each dimensions.\n   - increments: The step on each dimensions.\n - Returns: The new tensor with different format but the same memory content.",
            "key.doc.declaration" : "public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -> main.Tensor<Element>",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"710\" column=\"15\"><Name>reshape(_:offset:increments:)<\/Name><USR>s:4main6TensorV7reshape_6offset10incrementsACyxGAA0B15DimensionFormatO_SaySiGSgAKtF<\/USR><Declaration>public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; main.Tensor&lt;Element&gt;<\/Declaration><CommentParts><Abstract><Para>Create a new tensor pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>dimensionFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and dimensions for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each dimensions.<\/Para><\/Discussion><\/Parameter><Parameter><Name>increments<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The step on each dimensions.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensor with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 710,
            "key.doc.name" : "reshape(_:offset:increments:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and dimensions for the tensor."
                  }
                ],
                "name" : "dimensionFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each dimensions."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The step on each dimensions."
                  }
                ],
                "name" : "increments"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensor with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 371,
            "key.docoffset" : 21066,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:4main6TensorV\">Tensor<\/ref.struct>&lt;Element&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 268,
            "key.name" : "reshape(_:offset:increments:)",
            "key.namelength" : 105,
            "key.nameoffset" : 21452,
            "key.offset" : 21447,
            "key.parsed_declaration" : "public func reshape(\n  _ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil\n) -> Self",
            "key.parsed_scope.end" : 716,
            "key.parsed_scope.start" : 710,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4main6TensorV7reshape6format10dimensions6offset10incrementsACyxGAA0B6FormatO_SaySiGALSgAMtF\">reshape(format:dimensions:offset:increments:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : TensorNumeric> (Tensor<Element>) -> (TensorDimensionFormat, [Int]?, [Int]?) -> Tensor<Element>",
            "key.typeusr" : "$s_6offset10increments4main6TensorVyxGAC0D15DimensionFormatO_SaySiGSgAJtcD",
            "key.usr" : "s:4main6TensorV7reshape_6offset10incrementsACyxGAA0B15DimensionFormatO_SaySiGSgAKtF"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.bodylength" : 859,
        "key.bodyoffset" : 21775,
        "key.doc.declaration" : "protocol Collection : Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 915,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 21730,
        "key.offset" : 21720,
        "key.parsed_declaration" : "extension Collection where Element == Tensor<Float64>",
        "key.parsed_scope.end" : 742,
        "key.parsed_scope.start" : 720,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>], offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 21778
              }
            ],
            "key.bodylength" : 123,
            "key.bodyoffset" : 21909,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 248,
            "key.name" : "reshape(format:dimensions:offset:increments:)",
            "key.namelength" : 104,
            "key.nameoffset" : 21790,
            "key.offset" : 21785,
            "key.parsed_declaration" : "public func reshape(\n  format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 727,
            "key.parsed_scope.start" : 721,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Double>> (Self) -> (TensorFormat, [Int], [Int]?, [Int]?) -> [Self.Element]",
            "key.typeusr" : "$s6format10dimensions6offset10incrementsSay4main6TensorVySdGGAE0F6FormatO_SaySiGALSgAMtcD",
            "key.usr" : "s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(_ dimensionFormat: <Type usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/Type>, offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 22410
              }
            ],
            "key.bodylength" : 90,
            "key.bodyoffset" : 22542,
            "key.doc.column" : 15,
            "key.doc.comment" : " Create new tensors pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - dimensionFormat: New format and dimensions for the tensor.\n   - offset: Whether offset on each dimensions.\n   - increments: The step on each dimensions.\n - Returns: The new tensors with different format but the same memory content.",
            "key.doc.declaration" : "public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -> [Element]",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"737\" column=\"15\"><Name>reshape(_:offset:increments:)<\/Name><USR>s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF<\/USR><Declaration>public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/Declaration><CommentParts><Abstract><Para>Create new tensors pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>dimensionFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and dimensions for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each dimensions.<\/Para><\/Discussion><\/Parameter><Parameter><Name>increments<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The step on each dimensions.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensors with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 737,
            "key.doc.name" : "reshape(_:offset:increments:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and dimensions for the tensor."
                  }
                ],
                "name" : "dimensionFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each dimensions."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The step on each dimensions."
                  }
                ],
                "name" : "increments"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensors with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 371,
            "key.docoffset" : 22036,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 216,
            "key.name" : "reshape(_:offset:increments:)",
            "key.namelength" : 105,
            "key.nameoffset" : 22422,
            "key.offset" : 22417,
            "key.parsed_declaration" : "public func reshape(\n  _ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 741,
            "key.parsed_scope.start" : 737,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Double>> (Self) -> (TensorDimensionFormat, [Int]?, [Int]?) -> [Self.Element]",
            "key.typeusr" : "$s_6offset10incrementsSay4main6TensorVySdGGAC0D15DimensionFormatO_SaySiGSgAKtcD",
            "key.usr" : "s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF"
          }
        ],
        "key.typename" : "Collection.Protocol",
        "key.typeusr" : "$sSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.bodylength" : 859,
        "key.bodyoffset" : 22690,
        "key.doc.declaration" : "protocol Collection : Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 913,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 22647,
        "key.offset" : 22637,
        "key.parsed_declaration" : "extension Collection where Element == Tensor<Int64>",
        "key.parsed_scope.end" : 766,
        "key.parsed_scope.start" : 744,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>], offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 22693
              }
            ],
            "key.bodylength" : 123,
            "key.bodyoffset" : 22824,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 248,
            "key.name" : "reshape(format:dimensions:offset:increments:)",
            "key.namelength" : 104,
            "key.nameoffset" : 22705,
            "key.offset" : 22700,
            "key.parsed_declaration" : "public func reshape(\n  format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 751,
            "key.parsed_scope.start" : 745,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Int64>> (Self) -> (TensorFormat, [Int], [Int]?, [Int]?) -> [Self.Element]",
            "key.typeusr" : "$s6format10dimensions6offset10incrementsSay4main6TensorVys5Int64VGGAE0F6FormatO_SaySiGANSgAOtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(_ dimensionFormat: <Type usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/Type>, offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 23325
              }
            ],
            "key.bodylength" : 90,
            "key.bodyoffset" : 23457,
            "key.doc.column" : 15,
            "key.doc.comment" : " Create new tensors pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - dimensionFormat: New format and dimensions for the tensor.\n   - offset: Whether offset on each dimensions.\n   - increments: The step on each dimensions.\n - Returns: The new tensors with different format but the same memory content.",
            "key.doc.declaration" : "public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -> [Element]",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"761\" column=\"15\"><Name>reshape(_:offset:increments:)<\/Name><USR>s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF<\/USR><Declaration>public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/Declaration><CommentParts><Abstract><Para>Create new tensors pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>dimensionFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and dimensions for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each dimensions.<\/Para><\/Discussion><\/Parameter><Parameter><Name>increments<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The step on each dimensions.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensors with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 761,
            "key.doc.name" : "reshape(_:offset:increments:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and dimensions for the tensor."
                  }
                ],
                "name" : "dimensionFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each dimensions."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The step on each dimensions."
                  }
                ],
                "name" : "increments"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensors with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 371,
            "key.docoffset" : 22951,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 216,
            "key.name" : "reshape(_:offset:increments:)",
            "key.namelength" : 105,
            "key.nameoffset" : 23337,
            "key.offset" : 23332,
            "key.parsed_declaration" : "public func reshape(\n  _ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 765,
            "key.parsed_scope.start" : 761,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Int64>> (Self) -> (TensorDimensionFormat, [Int]?, [Int]?) -> [Self.Element]",
            "key.typeusr" : "$s_6offset10incrementsSay4main6TensorVys5Int64VGGAC0D15DimensionFormatO_SaySiGSgAMtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF"
          }
        ],
        "key.typename" : "Collection.Protocol",
        "key.typeusr" : "$sSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.bodylength" : 859,
        "key.bodyoffset" : 23607,
        "key.doc.declaration" : "protocol Collection : Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 915,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 23562,
        "key.offset" : 23552,
        "key.parsed_declaration" : "extension Collection where Element == Tensor<Float32>",
        "key.parsed_scope.end" : 790,
        "key.parsed_scope.start" : 768,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>], offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 23610
              }
            ],
            "key.bodylength" : 123,
            "key.bodyoffset" : 23741,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 248,
            "key.name" : "reshape(format:dimensions:offset:increments:)",
            "key.namelength" : 104,
            "key.nameoffset" : 23622,
            "key.offset" : 23617,
            "key.parsed_declaration" : "public func reshape(\n  format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 775,
            "key.parsed_scope.start" : 769,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Float>> (Self) -> (TensorFormat, [Int], [Int]?, [Int]?) -> [Self.Element]",
            "key.typeusr" : "$s6format10dimensions6offset10incrementsSay4main6TensorVySfGGAE0F6FormatO_SaySiGALSgAMtcD",
            "key.usr" : "s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(_ dimensionFormat: <Type usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/Type>, offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 24242
              }
            ],
            "key.bodylength" : 90,
            "key.bodyoffset" : 24374,
            "key.doc.column" : 15,
            "key.doc.comment" : " Create new tensors pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - dimensionFormat: New format and dimensions for the tensor.\n   - offset: Whether offset on each dimensions.\n   - increments: The step on each dimensions.\n - Returns: The new tensors with different format but the same memory content.",
            "key.doc.declaration" : "public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -> [Element]",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"785\" column=\"15\"><Name>reshape(_:offset:increments:)<\/Name><USR>s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF<\/USR><Declaration>public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/Declaration><CommentParts><Abstract><Para>Create new tensors pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>dimensionFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and dimensions for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each dimensions.<\/Para><\/Discussion><\/Parameter><Parameter><Name>increments<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The step on each dimensions.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensors with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 785,
            "key.doc.name" : "reshape(_:offset:increments:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and dimensions for the tensor."
                  }
                ],
                "name" : "dimensionFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each dimensions."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The step on each dimensions."
                  }
                ],
                "name" : "increments"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensors with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 371,
            "key.docoffset" : 23868,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 216,
            "key.name" : "reshape(_:offset:increments:)",
            "key.namelength" : 105,
            "key.nameoffset" : 24254,
            "key.offset" : 24249,
            "key.parsed_declaration" : "public func reshape(\n  _ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 789,
            "key.parsed_scope.start" : 785,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Float>> (Self) -> (TensorDimensionFormat, [Int]?, [Int]?) -> [Self.Element]",
            "key.typeusr" : "$s_6offset10incrementsSay4main6TensorVySfGGAC0D15DimensionFormatO_SaySiGSgAKtcD",
            "key.usr" : "s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF"
          }
        ],
        "key.typename" : "Collection.Protocol",
        "key.typeusr" : "$sSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.bodylength" : 859,
        "key.bodyoffset" : 24522,
        "key.doc.declaration" : "protocol Collection : Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 913,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 24479,
        "key.offset" : 24469,
        "key.parsed_declaration" : "extension Collection where Element == Tensor<Int32>",
        "key.parsed_scope.end" : 814,
        "key.parsed_scope.start" : 792,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>], offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 24525
              }
            ],
            "key.bodylength" : 123,
            "key.bodyoffset" : 24656,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 248,
            "key.name" : "reshape(format:dimensions:offset:increments:)",
            "key.namelength" : 104,
            "key.nameoffset" : 24537,
            "key.offset" : 24532,
            "key.parsed_declaration" : "public func reshape(\n  format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 799,
            "key.parsed_scope.start" : 793,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Int32>> (Self) -> (TensorFormat, [Int], [Int]?, [Int]?) -> [Self.Element]",
            "key.typeusr" : "$s6format10dimensions6offset10incrementsSay4main6TensorVys5Int32VGGAE0F6FormatO_SaySiGANSgAOtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(_ dimensionFormat: <Type usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/Type>, offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 25157
              }
            ],
            "key.bodylength" : 90,
            "key.bodyoffset" : 25289,
            "key.doc.column" : 15,
            "key.doc.comment" : " Create new tensors pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - dimensionFormat: New format and dimensions for the tensor.\n   - offset: Whether offset on each dimensions.\n   - increments: The step on each dimensions.\n - Returns: The new tensors with different format but the same memory content.",
            "key.doc.declaration" : "public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -> [Element]",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"809\" column=\"15\"><Name>reshape(_:offset:increments:)<\/Name><USR>s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF<\/USR><Declaration>public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/Declaration><CommentParts><Abstract><Para>Create new tensors pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>dimensionFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and dimensions for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each dimensions.<\/Para><\/Discussion><\/Parameter><Parameter><Name>increments<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The step on each dimensions.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensors with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 809,
            "key.doc.name" : "reshape(_:offset:increments:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and dimensions for the tensor."
                  }
                ],
                "name" : "dimensionFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each dimensions."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The step on each dimensions."
                  }
                ],
                "name" : "increments"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensors with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 371,
            "key.docoffset" : 24783,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 216,
            "key.name" : "reshape(_:offset:increments:)",
            "key.namelength" : 105,
            "key.nameoffset" : 25169,
            "key.offset" : 25164,
            "key.parsed_declaration" : "public func reshape(\n  _ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 813,
            "key.parsed_scope.start" : 809,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Int32>> (Self) -> (TensorDimensionFormat, [Int]?, [Int]?) -> [Self.Element]",
            "key.typeusr" : "$s_6offset10incrementsSay4main6TensorVys5Int32VGGAC0D15DimensionFormatO_SaySiGSgAMtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF"
          }
        ],
        "key.typename" : "Collection.Protocol",
        "key.typeusr" : "$sSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.bodylength" : 859,
        "key.bodyoffset" : 25439,
        "key.doc.declaration" : "protocol Collection : Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 915,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 25394,
        "key.offset" : 25384,
        "key.parsed_declaration" : "extension Collection where Element == Tensor<Float16>",
        "key.parsed_scope.end" : 838,
        "key.parsed_scope.start" : 816,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>], offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 25442
              }
            ],
            "key.bodylength" : 123,
            "key.bodyoffset" : 25573,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 248,
            "key.name" : "reshape(format:dimensions:offset:increments:)",
            "key.namelength" : 104,
            "key.nameoffset" : 25454,
            "key.offset" : 25449,
            "key.parsed_declaration" : "public func reshape(\n  format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 823,
            "key.parsed_scope.start" : 817,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Float16>> (Self) -> (TensorFormat, [Int], [Int]?, [Int]?) -> [Self.Element]",
            "key.typeusr" : "$s6format10dimensions6offset10incrementsSay4main6TensorVys7Float16VGGAE0F6FormatO_SaySiGANSgAOtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(_ dimensionFormat: <Type usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/Type>, offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 26074
              }
            ],
            "key.bodylength" : 90,
            "key.bodyoffset" : 26206,
            "key.doc.column" : 15,
            "key.doc.comment" : " Create new tensors pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - dimensionFormat: New format and dimensions for the tensor.\n   - offset: Whether offset on each dimensions.\n   - increments: The step on each dimensions.\n - Returns: The new tensors with different format but the same memory content.",
            "key.doc.declaration" : "public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -> [Element]",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"833\" column=\"15\"><Name>reshape(_:offset:increments:)<\/Name><USR>s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF<\/USR><Declaration>public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/Declaration><CommentParts><Abstract><Para>Create new tensors pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>dimensionFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and dimensions for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each dimensions.<\/Para><\/Discussion><\/Parameter><Parameter><Name>increments<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The step on each dimensions.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensors with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 833,
            "key.doc.name" : "reshape(_:offset:increments:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and dimensions for the tensor."
                  }
                ],
                "name" : "dimensionFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each dimensions."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The step on each dimensions."
                  }
                ],
                "name" : "increments"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensors with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 371,
            "key.docoffset" : 25700,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 216,
            "key.name" : "reshape(_:offset:increments:)",
            "key.namelength" : 105,
            "key.nameoffset" : 26086,
            "key.offset" : 26081,
            "key.parsed_declaration" : "public func reshape(\n  _ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 837,
            "key.parsed_scope.start" : 833,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<Float16>> (Self) -> (TensorDimensionFormat, [Int]?, [Int]?) -> [Self.Element]",
            "key.typeusr" : "$s_6offset10incrementsSay4main6TensorVys7Float16VGGAC0D15DimensionFormatO_SaySiGSgAMtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF"
          }
        ],
        "key.typename" : "Collection.Protocol",
        "key.typeusr" : "$sSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.bodylength" : 859,
        "key.bodyoffset" : 26354,
        "key.doc.declaration" : "protocol Collection : Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection : Sequence<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 913,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 26311,
        "key.offset" : 26301,
        "key.parsed_declaration" : "extension Collection where Element == Tensor<UInt8>",
        "key.parsed_scope.end" : 862,
        "key.parsed_scope.start" : 840,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>], offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 26357
              }
            ],
            "key.bodylength" : 123,
            "key.bodyoffset" : 26488,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 248,
            "key.name" : "reshape(format:dimensions:offset:increments:)",
            "key.namelength" : 104,
            "key.nameoffset" : 26369,
            "key.offset" : 26364,
            "key.parsed_declaration" : "public func reshape(\n  format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 847,
            "key.parsed_scope.start" : 841,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<UInt8>> (Self) -> (TensorFormat, [Int], [Int]?, [Int]?) -> [Self.Element]",
            "key.typeusr" : "$s6format10dimensions6offset10incrementsSay4main6TensorVys5UInt8VGGAE0F6FormatO_SaySiGANSgAOtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func reshape(_ dimensionFormat: <Type usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/Type>, offset: [<Type usr=\"s:Si\">Int<\/Type>]? = nil, increments: [<Type usr=\"s:Si\">Int<\/Type>]? = nil) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 26989
              }
            ],
            "key.bodylength" : 90,
            "key.bodyoffset" : 27121,
            "key.doc.column" : 15,
            "key.doc.comment" : " Create new tensors pointing to the same memory region but with different sizes.\n\n - Parameters:\n   - dimensionFormat: New format and dimensions for the tensor.\n   - offset: Whether offset on each dimensions.\n   - increments: The step on each dimensions.\n - Returns: The new tensors with different format but the same memory content.",
            "key.doc.declaration" : "public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -> [Element]",
            "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"857\" column=\"15\"><Name>reshape(_:offset:increments:)<\/Name><USR>s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF<\/USR><Declaration>public func reshape(_ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/Declaration><CommentParts><Abstract><Para>Create new tensors pointing to the same memory region but with different sizes.<\/Para><\/Abstract><Parameters><Parameter><Name>dimensionFormat<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>New format and dimensions for the tensor.<\/Para><\/Discussion><\/Parameter><Parameter><Name>offset<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Whether offset on each dimensions.<\/Para><\/Discussion><\/Parameter><Parameter><Name>increments<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The step on each dimensions.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The new tensors with different format but the same memory content.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 857,
            "key.doc.name" : "reshape(_:offset:increments:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "New format and dimensions for the tensor."
                  }
                ],
                "name" : "dimensionFormat"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Whether offset on each dimensions."
                  }
                ],
                "name" : "offset"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The step on each dimensions."
                  }
                ],
                "name" : "increments"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "The new tensors with different format but the same memory content."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 371,
            "key.docoffset" : 26615,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reshape<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensionFormat<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main21TensorDimensionFormatO\">TensorDimensionFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offset<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>increments<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 216,
            "key.name" : "reshape(_:offset:increments:)",
            "key.namelength" : 105,
            "key.nameoffset" : 27001,
            "key.offset" : 26996,
            "key.parsed_declaration" : "public func reshape(\n  _ dimensionFormat: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil\n) -> [Element]",
            "key.parsed_scope.end" : 861,
            "key.parsed_scope.start" : 857,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySdG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int64VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayADGAA0B6FormatO_SaySiGAOSgAPtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVySfG7ElementRtzrlE7reshape_6offset10incrementsSayADGAA0B15DimensionFormatO_SaySiGSgANtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5Int32VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys7Float16VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF\">reshape(_: TensorDimensionFormat, offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape6format10dimensions6offset10incrementsSayAFGAA0B6FormatO_SaySiGAQSgARtF\">reshape(format: TensorFormat, dimensions: [Int], offset: [Int]? = nil, increments: [Int]? = nil) -&gt; [Element]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection, Self.Element == Tensor<UInt8>> (Self) -> (TensorDimensionFormat, [Int]?, [Int]?) -> [Self.Element]",
            "key.typeusr" : "$s_6offset10incrementsSay4main6TensorVys5UInt8VGGAC0D15DimensionFormatO_SaySiGSgAMtcD",
            "key.usr" : "s:Sl4mainAA6TensorVys5UInt8VG7ElementRtzrlE7reshape_6offset10incrementsSayAFGAA0B15DimensionFormatO_SaySiGSgAPtF"
          }
        ],
        "key.typename" : "Collection.Protocol",
        "key.typeusr" : "$sSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>public final class AnyTensorStorage<\/Declaration>",
        "key.bodylength" : 986,
        "key.bodyoffset" : 27244,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>AnyTensorStorage<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1015,
        "key.name" : "AnyTensorStorage",
        "key.namelength" : 16,
        "key.nameoffset" : 27226,
        "key.offset" : 27216,
        "key.parsed_declaration" : "extension AnyTensorStorage",
        "key.parsed_scope.end" : 900,
        "key.parsed_scope.start" : 864,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>func toAnyTensor() -&gt; <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type><\/Declaration>",
            "key.bodylength" : 343,
            "key.bodyoffset" : 27281,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toAnyTensor<\/decl.name>() -&gt; <decl.function.returntype><ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 377,
            "key.name" : "toAnyTensor()",
            "key.namelength" : 13,
            "key.nameoffset" : 27253,
            "key.offset" : 27248,
            "key.parsed_declaration" : "func toAnyTensor() -> AnyTensor",
            "key.parsed_scope.end" : 881,
            "key.parsed_scope.start" : 866,
            "key.substructure" : [

            ],
            "key.typename" : "(AnyTensorStorage) -> () -> AnyTensor",
            "key.typeusr" : "$s4main9AnyTensor_pycD",
            "key.usr" : "s:4main16AnyTensorStorageC02tobC0AA0bC0_pyF"
          },
          {
            "key.annotated_decl" : "<Declaration>func toTensor&lt;Element&gt;(_ type: <Type usr=\"s:4main16AnyTensorStorageC02toC0yxxmlF7ElementL_xmfp\">Element<\/Type>.Type) -&gt; <Type usr=\"s:4main16AnyTensorStorageC02toC0yxxmlF7ElementL_xmfp\">Element<\/Type><\/Declaration>",
            "key.bodylength" : 541,
            "key.bodyoffset" : 27686,
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toTensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main16AnyTensorStorageC02toC0yxxmlF7ElementL_xmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>type<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4main16AnyTensorStorageC02toC0yxxmlF7ElementL_xmfp\">Element<\/ref.generic_type_param>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4main16AnyTensorStorageC02toC0yxxmlF7ElementL_xmfp\">Element<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 599,
            "key.name" : "toTensor(_:)",
            "key.namelength" : 39,
            "key.nameoffset" : 27634,
            "key.offset" : 27629,
            "key.parsed_declaration" : "func toTensor<Element>(_ type: Element.Type) -> Element",
            "key.parsed_scope.end" : 898,
            "key.parsed_scope.start" : 883,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>Element<\/Declaration>",
                "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>",
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 7,
                "key.name" : "Element",
                "key.namelength" : 7,
                "key.nameoffset" : 27643,
                "key.offset" : 27643,
                "key.parsed_declaration" : "func toTensor<Element",
                "key.parsed_scope.end" : 883,
                "key.parsed_scope.start" : 883,
                "key.typename" : "Element.Type",
                "key.typeusr" : "$sxmD",
                "key.usr" : "s:4main16AnyTensorStorageC02toC0yxxmlF7ElementL_xmfp"
              }
            ],
            "key.typename" : "<Element> (AnyTensorStorage) -> (Element.Type) -> Element",
            "key.typeusr" : "$syxxmcluD",
            "key.usr" : "s:4main16AnyTensorStorageC02toC0yxxmlF"
          }
        ],
        "key.typename" : "AnyTensorStorage.Type",
        "key.typeusr" : "$s4main16AnyTensorStorageCmD",
        "key.usr" : "s:4main16AnyTensorStorageC"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Tensor&lt;Element&gt; : <Type usr=\"s:4main9AnyTensorP\">AnyTensor<\/Type> where Element : <Type usr=\"s:4main13TensorNumericP\">TensorNumeric<\/Type><\/Declaration>",
        "key.bodylength" : 169,
        "key.bodyoffset" : 28276,
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Tensor<Element> : AnyTensor where Element : main.TensorNumeric",
        "key.doc.file" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift\" line=\"450\" column=\"15\"><Name>Tensor<\/Name><USR>s:4main6TensorV<\/USR><Declaration>public struct Tensor&lt;Element&gt; : AnyTensor where Element : main.TensorNumeric<\/Declaration><CommentParts><Abstract><Para>Basic tensor type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 450,
        "key.doc.name" : "Tensor",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 23,
            "key.offset" : 28251
          }
        ],
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Tensor<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4main6TensorV7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:4main9AnyTensorP\">AnyTensor<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:4main13TensorNumericP\">TensorNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "CustomStringConvertible"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 213,
        "key.name" : "Tensor",
        "key.namelength" : 6,
        "key.nameoffset" : 28243,
        "key.offset" : 28233,
        "key.parsed_declaration" : "extension Tensor: CustomStringConvertible",
        "key.parsed_scope.end" : 907,
        "key.parsed_scope.start" : 902,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var description: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 28279
              }
            ],
            "key.bodylength" : 132,
            "key.bodyoffset" : 28311,
            "key.doc.declaration" : "var description: String { get }",
            "key.doc.discussion" : [
              {
                "Para" : "Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the `String(describing:)` initializer. This initializer works with any type, and uses the custom `description` property for types that conform to `CustomStringConvertible`:"
              },
              {
                "CodeListing" : ""
              },
              {
                "Para" : "The conversion of `p` to a string in the assignment to `s` uses the `Point` type’s `description` property."
              },
              {
                "Note" : ""
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>description<\/Name><USR>s:s23CustomStringConvertibleP11descriptionSSvp<\/USR><Declaration>var description: String { get }<\/Declaration><CommentParts><Abstract><Para>A textual representation of this instance.<\/Para><\/Abstract><Discussion><Para>Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the <codeVoice>String(describing:)<\/codeVoice> initializer. This initializer works with any type, and uses the custom <codeVoice>description<\/codeVoice> property for types that conform to <codeVoice>CustomStringConvertible<\/codeVoice>:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct Point: CustomStringConvertible {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    let x: Int, y: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var description: String {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        return \"(\\(x), \\(y))\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let p = Point(x: 21, y: 30)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let s = String(describing: p)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(s)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"(21, 30)\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The conversion of <codeVoice>p<\/codeVoice> to a string in the assignment to <codeVoice>s<\/codeVoice> uses the <codeVoice>Point<\/codeVoice> type’s <codeVoice>description<\/codeVoice> property.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>CustomStringConvertible<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "description",
            "key.doc.type" : "Other",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>description<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 158,
            "key.name" : "description",
            "key.namelength" : 11,
            "key.nameoffset" : 28290,
            "key.offset" : 28286,
            "key.overrides" : [
              {
                "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSvp"
              }
            ],
            "key.parsed_declaration" : "public var description: String",
            "key.parsed_scope.end" : 906,
            "key.parsed_scope.start" : 903,
            "key.typename" : "String",
            "key.typeusr" : "$sSSD",
            "key.usr" : "s:s23CustomStringConvertibleP11descriptionSSvp"
          }
        ],
        "key.typename" : "Tensor<Element>.Type",
        "key.typeusr" : "$s4main6TensorVyxGmD",
        "key.usr" : "s:4main6TensorV"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>func toCDimensions(_ dimensions: [<Type usr=\"s:Si\">Int<\/Type>]?) -&gt; (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)<\/Declaration>",
        "key.bodylength" : 1357,
        "key.bodyoffset" : 28550,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toCDimensions<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensions<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 1460,
        "key.name" : "toCDimensions(_:)",
        "key.namelength" : 35,
        "key.nameoffset" : 28453,
        "key.offset" : 28448,
        "key.parsed_declaration" : "func toCDimensions(_ dimensions: [Int]?) -> (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
        "key.parsed_scope.end" : 950,
        "key.parsed_scope.start" : 909,
        "key.substructure" : [

        ],
        "key.typename" : "([Int]?) -> (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)",
        "key.typeusr" : "$sys5Int32V_A7BtSaySiGSgcD",
        "key.usr" : "s:4main13toCDimensionsys5Int32V_A7DtSaySiGSgF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>func toCDimensionsArray(_ dimensions: [<Type usr=\"s:Si\">Int<\/Type>]?) -&gt; [<Type usr=\"s:s5Int32V\">Int32<\/Type>]<\/Declaration>",
        "key.bodylength" : 1362,
        "key.bodyoffset" : 29968,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toCDimensionsArray<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dimensions<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct>]<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 1421,
        "key.name" : "toCDimensionsArray(_:)",
        "key.namelength" : 40,
        "key.nameoffset" : 29915,
        "key.offset" : 29910,
        "key.parsed_declaration" : "func toCDimensionsArray(_ dimensions: [Int]?) -> [Int32]",
        "key.parsed_scope.end" : 992,
        "key.parsed_scope.start" : 952,
        "key.substructure" : [

        ],
        "key.typename" : "([Int]?) -> [Int32]",
        "key.typeusr" : "$sySays5Int32VGSaySiGSgcD",
        "key.usr" : "s:4main18toCDimensionsArrayySays5Int32VGSaySiGSgF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>func fromCDimensions(_ dim: (<Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>, <Type usr=\"s:s5Int32V\">Int32<\/Type>)) -&gt; [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
        "key.bodylength" : 770,
        "key.bodyoffset" : 31429,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>fromCDimensions<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dim<\/decl.var.parameter.name>: <decl.var.parameter.type><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 867,
        "key.name" : "fromCDimensions(_:)",
        "key.namelength" : 80,
        "key.nameoffset" : 31338,
        "key.offset" : 31333,
        "key.parsed_declaration" : "func fromCDimensions(_ dim: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)) -> [Int]",
        "key.parsed_scope.end" : 1017,
        "key.parsed_scope.start" : 994,
        "key.substructure" : [

        ],
        "key.typename" : "((Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)) -> [Int]",
        "key.typeusr" : "$sySaySiGs5Int32V_A7Ct_tcD",
        "key.usr" : "s:4main15fromCDimensionsySaySiGs5Int32V_A7Et_tF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>func toCTensorParams(_ kind: <Type usr=\"s:4main10DeviceKindO\">DeviceKind<\/Type>, dataType: <Type usr=\"s:4main8DataTypeO\">DataType<\/Type>, format: <Type usr=\"s:4main12TensorFormatO\">TensorFormat<\/Type>, dimensions: [<Type usr=\"s:Si\">Int<\/Type>]) -&gt; ccv_nnc_tensor_param_t<\/Declaration>",
        "key.bodylength" : 330,
        "key.bodyoffset" : 32335,
        "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toCTensorParams<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>kind<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:4main10DeviceKindO\">DeviceKind<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dataType<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main8DataTypeO\">DataType<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>format<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.enum usr=\"s:4main12TensorFormatO\">TensorFormat<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dimensions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>ccv_nnc_tensor_param_t<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 464,
        "key.name" : "toCTensorParams(_:dataType:format:dimensions:)",
        "key.namelength" : 100,
        "key.nameoffset" : 32207,
        "key.offset" : 32202,
        "key.parsed_declaration" : "func toCTensorParams(\n  _ kind: DeviceKind, dataType: DataType, format: TensorFormat, dimensions: [Int]\n) -> ccv_nnc_tensor_param_t",
        "key.parsed_scope.end" : 1033,
        "key.parsed_scope.start" : 1019,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>var params: &lt;&lt;error type&gt;&gt;<\/Declaration>",
            "key.filepath" : "\/home\/liu\/Dropbox\/workspace\/s4nnc\/nnc\/Tensor.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>params<\/decl.name>: <decl.var.type>&lt;&lt;error type&gt;&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 37,
            "key.name" : "params",
            "key.namelength" : 6,
            "key.nameoffset" : 32342,
            "key.offset" : 32338,
            "key.parsed_declaration" : "var params = ccv_nnc_tensor_param_t()",
            "key.parsed_scope.end" : 1022,
            "key.parsed_scope.start" : 1022,
            "key.typename" : "<<error type>>",
            "key.typeusr" : "$sXeD",
            "key.usr" : "s:4main15toCTensorParamsyXeXeF6paramsL_Xevp"
          }
        ],
        "key.typename" : "(DeviceKind, DataType, TensorFormat, [Int]) -> <<error type>>",
        "key.typeusr" : "$syXeXecD",
        "key.usr" : "s:4main15toCTensorParamsyXeXeF"
      }
    ]
  }
}
